#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DataValue:
  """
  Attributes:
   - data_type
   - data_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'data_type', None, None, ), # 1
    (2, TType.STRING, 'data_value', None, None, ), # 2
  )

  def __init__(self, data_type=None, data_value=None,):
    self.data_type = data_type
    self.data_value = data_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.data_type = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.data_value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataValue')
    if self.data_type is not None:
      oprot.writeFieldBegin('data_type', TType.BYTE, 1)
      oprot.writeByte(self.data_type)
      oprot.writeFieldEnd()
    if self.data_value is not None:
      oprot.writeFieldBegin('data_value', TType.STRING, 2)
      oprot.writeString(self.data_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryParameter:
  """
  Attributes:
   - para_id
   - name
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'para_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRUCT, 'value', (DataValue, DataValue.thrift_spec), None, ), # 3
  )

  def __init__(self, para_id=None, name=None, value=None,):
    self.para_id = para_id
    self.name = name
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.para_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.value = DataValue()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryParameter')
    if self.para_id is not None:
      oprot.writeFieldBegin('para_id', TType.I32, 1)
      oprot.writeI32(self.para_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 3)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryCommand:
  """
  Attributes:
   - query_id
   - db_name
   - force_partition
   - partition_id
   - is_readonly
   - timeout
   - require_result
   - trace_level
   - sql
   - paras
   - startTransaction
   - transaction_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'query_id', None, None, ), # 1
    (2, TType.STRING, 'db_name', None, None, ), # 2
    (3, TType.BOOL, 'force_partition', None, None, ), # 3
    (4, TType.I32, 'partition_id', None, None, ), # 4
    (5, TType.BOOL, 'is_readonly', None, None, ), # 5
    (6, TType.I32, 'timeout', None, None, ), # 6
    (7, TType.BOOL, 'require_result', None, None, ), # 7
    (8, TType.BYTE, 'trace_level', None, None, ), # 8
    (9, TType.STRING, 'sql', None, None, ), # 9
    (10, TType.LIST, 'paras', (TType.STRUCT,(QueryParameter, QueryParameter.thrift_spec)), None, ), # 10
    (11, TType.BOOL, 'startTransaction', None, None, ), # 11
    (12, TType.STRING, 'transaction_id', None, None, ), # 12
  )

  def __init__(self, query_id=None, db_name=None, force_partition=None, partition_id=None, is_readonly=None, timeout=None, require_result=None, trace_level=None, sql=None, paras=None, startTransaction=None, transaction_id=None,):
    self.query_id = query_id
    self.db_name = db_name
    self.force_partition = force_partition
    self.partition_id = partition_id
    self.is_readonly = is_readonly
    self.timeout = timeout
    self.require_result = require_result
    self.trace_level = trace_level
    self.sql = sql
    self.paras = paras
    self.startTransaction = startTransaction
    self.transaction_id = transaction_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.query_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.db_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.force_partition = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.partition_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_readonly = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timeout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.require_result = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BYTE:
          self.trace_level = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.sql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.paras = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = QueryParameter()
            _elem5.read(iprot)
            self.paras.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.startTransaction = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.transaction_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryCommand')
    if self.query_id is not None:
      oprot.writeFieldBegin('query_id', TType.I32, 1)
      oprot.writeI32(self.query_id)
      oprot.writeFieldEnd()
    if self.db_name is not None:
      oprot.writeFieldBegin('db_name', TType.STRING, 2)
      oprot.writeString(self.db_name)
      oprot.writeFieldEnd()
    if self.force_partition is not None:
      oprot.writeFieldBegin('force_partition', TType.BOOL, 3)
      oprot.writeBool(self.force_partition)
      oprot.writeFieldEnd()
    if self.partition_id is not None:
      oprot.writeFieldBegin('partition_id', TType.I32, 4)
      oprot.writeI32(self.partition_id)
      oprot.writeFieldEnd()
    if self.is_readonly is not None:
      oprot.writeFieldBegin('is_readonly', TType.BOOL, 5)
      oprot.writeBool(self.is_readonly)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.I32, 6)
      oprot.writeI32(self.timeout)
      oprot.writeFieldEnd()
    if self.require_result is not None:
      oprot.writeFieldBegin('require_result', TType.BOOL, 7)
      oprot.writeBool(self.require_result)
      oprot.writeFieldEnd()
    if self.trace_level is not None:
      oprot.writeFieldBegin('trace_level', TType.BYTE, 8)
      oprot.writeByte(self.trace_level)
      oprot.writeFieldEnd()
    if self.sql is not None:
      oprot.writeFieldBegin('sql', TType.STRING, 9)
      oprot.writeString(self.sql)
      oprot.writeFieldEnd()
    if self.paras is not None:
      oprot.writeFieldBegin('paras', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.paras))
      for iter6 in self.paras:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTransaction is not None:
      oprot.writeFieldBegin('startTransaction', TType.BOOL, 11)
      oprot.writeBool(self.startTransaction)
      oprot.writeFieldEnd()
    if self.transaction_id is not None:
      oprot.writeFieldBegin('transaction_id', TType.STRING, 12)
      oprot.writeString(self.transaction_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MultQueryCommand:
  """
  Attributes:
   - single_command
   - paral_nums
   - all_shard
   - shard_list
   - max_errnums
   - exec_timeout
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'single_command', (QueryCommand, QueryCommand.thrift_spec), None, ), # 1
    (2, TType.I32, 'paral_nums', None, None, ), # 2
    (3, TType.BOOL, 'all_shard', None, None, ), # 3
    (4, TType.LIST, 'shard_list', (TType.I32,None), None, ), # 4
    (5, TType.I32, 'max_errnums', None, None, ), # 5
    (6, TType.I32, 'exec_timeout', None, None, ), # 6
  )

  def __init__(self, single_command=None, paral_nums=None, all_shard=None, shard_list=None, max_errnums=None, exec_timeout=None,):
    self.single_command = single_command
    self.paral_nums = paral_nums
    self.all_shard = all_shard
    self.shard_list = shard_list
    self.max_errnums = max_errnums
    self.exec_timeout = exec_timeout

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.single_command = QueryCommand()
          self.single_command.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.paral_nums = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.all_shard = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.shard_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.shard_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.max_errnums = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exec_timeout = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MultQueryCommand')
    if self.single_command is not None:
      oprot.writeFieldBegin('single_command', TType.STRUCT, 1)
      self.single_command.write(oprot)
      oprot.writeFieldEnd()
    if self.paral_nums is not None:
      oprot.writeFieldBegin('paral_nums', TType.I32, 2)
      oprot.writeI32(self.paral_nums)
      oprot.writeFieldEnd()
    if self.all_shard is not None:
      oprot.writeFieldBegin('all_shard', TType.BOOL, 3)
      oprot.writeBool(self.all_shard)
      oprot.writeFieldEnd()
    if self.shard_list is not None:
      oprot.writeFieldBegin('shard_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.shard_list))
      for iter13 in self.shard_list:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_errnums is not None:
      oprot.writeFieldBegin('max_errnums', TType.I32, 5)
      oprot.writeI32(self.max_errnums)
      oprot.writeFieldEnd()
    if self.exec_timeout is not None:
      oprot.writeFieldBegin('exec_timeout', TType.I32, 6)
      oprot.writeI32(self.exec_timeout)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultHeader:
  """
  Attributes:
   - header_id
   - name
   - data_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'header_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.BYTE, 'data_type', None, None, ), # 3
  )

  def __init__(self, header_id=None, name=None, data_type=None,):
    self.header_id = header_id
    self.name = name
    self.data_type = data_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.header_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.data_type = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultHeader')
    if self.header_id is not None:
      oprot.writeFieldBegin('header_id', TType.I32, 1)
      oprot.writeI32(self.header_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.data_type is not None:
      oprot.writeFieldBegin('data_type', TType.BYTE, 3)
      oprot.writeByte(self.data_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultCell:
  """
  Attributes:
   - data_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'data_value', None, None, ), # 1
  )

  def __init__(self, data_value=None,):
    self.data_value = data_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data_value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultCell')
    if self.data_value is not None:
      oprot.writeFieldBegin('data_value', TType.STRING, 1)
      oprot.writeString(self.data_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultRow:
  """
  Attributes:
   - row_id
   - result_cell
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'row_id', None, None, ), # 1
    (2, TType.LIST, 'result_cell', (TType.STRUCT,(ResultCell, ResultCell.thrift_spec)), None, ), # 2
  )

  def __init__(self, row_id=None, result_cell=None,):
    self.row_id = row_id
    self.result_cell = result_cell

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.row_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.result_cell = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = ResultCell()
            _elem19.read(iprot)
            self.result_cell.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultRow')
    if self.row_id is not None:
      oprot.writeFieldBegin('row_id', TType.I32, 1)
      oprot.writeI32(self.row_id)
      oprot.writeFieldEnd()
    if self.result_cell is not None:
      oprot.writeFieldBegin('result_cell', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.result_cell))
      for iter20 in self.result_cell:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultBlock:
  """
  Attributes:
   - shard_id
   - row_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shard_id', None, None, ), # 1
    (2, TType.LIST, 'row_list', (TType.STRUCT,(ResultRow, ResultRow.thrift_spec)), None, ), # 2
  )

  def __init__(self, shard_id=None, row_list=None,):
    self.shard_id = shard_id
    self.row_list = row_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shard_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.row_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ResultRow()
            _elem26.read(iprot)
            self.row_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultBlock')
    if self.shard_id is not None:
      oprot.writeFieldBegin('shard_id', TType.I32, 1)
      oprot.writeI32(self.shard_id)
      oprot.writeFieldEnd()
    if self.row_list is not None:
      oprot.writeFieldBegin('row_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.row_list))
      for iter27 in self.row_list:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultSet:
  """
  Attributes:
   - query_id
   - row_count
   - header_list
   - block_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'query_id', None, None, ), # 1
    (2, TType.I32, 'row_count', None, None, ), # 2
    (3, TType.LIST, 'header_list', (TType.STRUCT,(ResultHeader, ResultHeader.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'block_list', (TType.STRUCT,(ResultBlock, ResultBlock.thrift_spec)), None, ), # 4
  )

  def __init__(self, query_id=None, row_count=None, header_list=None, block_list=None,):
    self.query_id = query_id
    self.row_count = row_count
    self.header_list = header_list
    self.block_list = block_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.query_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.row_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.header_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = ResultHeader()
            _elem33.read(iprot)
            self.header_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.block_list = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = ResultBlock()
            _elem39.read(iprot)
            self.block_list.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultSet')
    if self.query_id is not None:
      oprot.writeFieldBegin('query_id', TType.I32, 1)
      oprot.writeI32(self.query_id)
      oprot.writeFieldEnd()
    if self.row_count is not None:
      oprot.writeFieldBegin('row_count', TType.I32, 2)
      oprot.writeI32(self.row_count)
      oprot.writeFieldEnd()
    if self.header_list is not None:
      oprot.writeFieldBegin('header_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.header_list))
      for iter40 in self.header_list:
        iter40.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.block_list is not None:
      oprot.writeFieldBegin('block_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.block_list))
      for iter41 in self.block_list:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PartitionTraceResult:
  """
  Attributes:
   - partition_id
   - result_size
   - sql_timespan
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'partition_id', None, None, ), # 1
    (2, TType.I32, 'result_size', None, None, ), # 2
    (3, TType.I32, 'sql_timespan', None, None, ), # 3
  )

  def __init__(self, partition_id=None, result_size=None, sql_timespan=None,):
    self.partition_id = partition_id
    self.result_size = result_size
    self.sql_timespan = sql_timespan

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.partition_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.result_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sql_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PartitionTraceResult')
    if self.partition_id is not None:
      oprot.writeFieldBegin('partition_id', TType.I32, 1)
      oprot.writeI32(self.partition_id)
      oprot.writeFieldEnd()
    if self.result_size is not None:
      oprot.writeFieldBegin('result_size', TType.I32, 2)
      oprot.writeI32(self.result_size)
      oprot.writeFieldEnd()
    if self.sql_timespan is not None:
      oprot.writeFieldBegin('sql_timespan', TType.I32, 3)
      oprot.writeI32(self.sql_timespan)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TraceResult:
  """
  Attributes:
   - result_size
   - parse_timespan
   - lookup_timespan
   - total_sql_timespan
   - data_merge_timespan
   - part_trace_list
   - searilize_timespan
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result_size', None, None, ), # 1
    (2, TType.I32, 'parse_timespan', None, None, ), # 2
    (3, TType.I32, 'lookup_timespan', None, None, ), # 3
    (4, TType.I32, 'total_sql_timespan', None, None, ), # 4
    (5, TType.I32, 'data_merge_timespan', None, None, ), # 5
    (6, TType.LIST, 'part_trace_list', (TType.STRUCT,(PartitionTraceResult, PartitionTraceResult.thrift_spec)), None, ), # 6
    (7, TType.I32, 'searilize_timespan', None, None, ), # 7
  )

  def __init__(self, result_size=None, parse_timespan=None, lookup_timespan=None, total_sql_timespan=None, data_merge_timespan=None, part_trace_list=None, searilize_timespan=None,):
    self.result_size = result_size
    self.parse_timespan = parse_timespan
    self.lookup_timespan = lookup_timespan
    self.total_sql_timespan = total_sql_timespan
    self.data_merge_timespan = data_merge_timespan
    self.part_trace_list = part_trace_list
    self.searilize_timespan = searilize_timespan

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.parse_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.lookup_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.total_sql_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.data_merge_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.part_trace_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = PartitionTraceResult()
            _elem47.read(iprot)
            self.part_trace_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.searilize_timespan = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TraceResult')
    if self.result_size is not None:
      oprot.writeFieldBegin('result_size', TType.I32, 1)
      oprot.writeI32(self.result_size)
      oprot.writeFieldEnd()
    if self.parse_timespan is not None:
      oprot.writeFieldBegin('parse_timespan', TType.I32, 2)
      oprot.writeI32(self.parse_timespan)
      oprot.writeFieldEnd()
    if self.lookup_timespan is not None:
      oprot.writeFieldBegin('lookup_timespan', TType.I32, 3)
      oprot.writeI32(self.lookup_timespan)
      oprot.writeFieldEnd()
    if self.total_sql_timespan is not None:
      oprot.writeFieldBegin('total_sql_timespan', TType.I32, 4)
      oprot.writeI32(self.total_sql_timespan)
      oprot.writeFieldEnd()
    if self.data_merge_timespan is not None:
      oprot.writeFieldBegin('data_merge_timespan', TType.I32, 5)
      oprot.writeI32(self.data_merge_timespan)
      oprot.writeFieldEnd()
    if self.part_trace_list is not None:
      oprot.writeFieldBegin('part_trace_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.part_trace_list))
      for iter48 in self.part_trace_list:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.searilize_timespan is not None:
      oprot.writeFieldBegin('searilize_timespan', TType.I32, 7)
      oprot.writeI32(self.searilize_timespan)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Result:
  """
  Attributes:
   - code
   - error_message
   - result_data
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'code', None, None, ), # 1
    (2, TType.STRING, 'error_message', None, None, ), # 2
    (3, TType.STRUCT, 'result_data', (ResultSet, ResultSet.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'trace', (TraceResult, TraceResult.thrift_spec), None, ), # 4
  )

  def __init__(self, code=None, error_message=None, result_data=None, trace=None,):
    self.code = code
    self.error_message = error_message
    self.result_data = result_data
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.code = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.result_data = ResultSet()
          self.result_data.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.trace = TraceResult()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Result')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I16, 1)
      oprot.writeI16(self.code)
      oprot.writeFieldEnd()
    if self.error_message is not None:
      oprot.writeFieldBegin('error_message', TType.STRING, 2)
      oprot.writeString(self.error_message)
      oprot.writeFieldEnd()
    if self.result_data is not None:
      oprot.writeFieldBegin('result_data', TType.STRUCT, 3)
      self.result_data.write(oprot)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 4)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PartitionIDSet:
  """
  Attributes:
   - shard_id
   - value_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shard_id', None, None, ), # 1
    (2, TType.LIST, 'value_list', (TType.STRUCT,(DataValue, DataValue.thrift_spec)), None, ), # 2
  )

  def __init__(self, shard_id=None, value_list=None,):
    self.shard_id = shard_id
    self.value_list = value_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shard_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.value_list = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = DataValue()
            _elem54.read(iprot)
            self.value_list.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PartitionIDSet')
    if self.shard_id is not None:
      oprot.writeFieldBegin('shard_id', TType.I32, 1)
      oprot.writeI32(self.shard_id)
      oprot.writeFieldEnd()
    if self.value_list is not None:
      oprot.writeFieldBegin('value_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.value_list))
      for iter55 in self.value_list:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PartitionIDSets:
  """
  Attributes:
   - sets
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sets', (TType.STRUCT,(PartitionIDSet, PartitionIDSet.thrift_spec)), None, ), # 1
  )

  def __init__(self, sets=None,):
    self.sets = sets

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sets = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = PartitionIDSet()
            _elem61.read(iprot)
            self.sets.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PartitionIDSets')
    if self.sets is not None:
      oprot.writeFieldBegin('sets', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.sets))
      for iter62 in self.sets:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerStatus:
  """
  Attributes:
   - total_request_nums
   - abort_request_nums
   - current_request_nums
   - current_active_request_nums
   - processing_request_nums
   - pending_task_nums
   - overloaded
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_request_nums', None, None, ), # 1
    (2, TType.I64, 'abort_request_nums', None, None, ), # 2
    (3, TType.I64, 'current_request_nums', None, None, ), # 3
    (4, TType.I64, 'current_active_request_nums', None, None, ), # 4
    (5, TType.I64, 'processing_request_nums', None, None, ), # 5
    (6, TType.I64, 'pending_task_nums', None, None, ), # 6
    (7, TType.BOOL, 'overloaded', None, None, ), # 7
  )

  def __init__(self, total_request_nums=None, abort_request_nums=None, current_request_nums=None, current_active_request_nums=None, processing_request_nums=None, pending_task_nums=None, overloaded=None,):
    self.total_request_nums = total_request_nums
    self.abort_request_nums = abort_request_nums
    self.current_request_nums = current_request_nums
    self.current_active_request_nums = current_active_request_nums
    self.processing_request_nums = processing_request_nums
    self.pending_task_nums = pending_task_nums
    self.overloaded = overloaded

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.abort_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.current_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.current_active_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.processing_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.pending_task_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.overloaded = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerStatus')
    if self.total_request_nums is not None:
      oprot.writeFieldBegin('total_request_nums', TType.I64, 1)
      oprot.writeI64(self.total_request_nums)
      oprot.writeFieldEnd()
    if self.abort_request_nums is not None:
      oprot.writeFieldBegin('abort_request_nums', TType.I64, 2)
      oprot.writeI64(self.abort_request_nums)
      oprot.writeFieldEnd()
    if self.current_request_nums is not None:
      oprot.writeFieldBegin('current_request_nums', TType.I64, 3)
      oprot.writeI64(self.current_request_nums)
      oprot.writeFieldEnd()
    if self.current_active_request_nums is not None:
      oprot.writeFieldBegin('current_active_request_nums', TType.I64, 4)
      oprot.writeI64(self.current_active_request_nums)
      oprot.writeFieldEnd()
    if self.processing_request_nums is not None:
      oprot.writeFieldBegin('processing_request_nums', TType.I64, 5)
      oprot.writeI64(self.processing_request_nums)
      oprot.writeFieldEnd()
    if self.pending_task_nums is not None:
      oprot.writeFieldBegin('pending_task_nums', TType.I64, 6)
      oprot.writeI64(self.pending_task_nums)
      oprot.writeFieldEnd()
    if self.overloaded is not None:
      oprot.writeFieldBegin('overloaded', TType.BOOL, 7)
      oprot.writeBool(self.overloaded)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatus:
  """
  Attributes:
   - request_nums
   - query_time
   - total_request_nums
   - error_request_nums
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'request_nums', None, None, ), # 1
    (2, TType.I64, 'query_time', None, None, ), # 2
    (3, TType.I64, 'total_request_nums', None, None, ), # 3
    (4, TType.I64, 'error_request_nums', None, None, ), # 4
  )

  def __init__(self, request_nums=None, query_time=None, total_request_nums=None, error_request_nums=None,):
    self.request_nums = request_nums
    self.query_time = query_time
    self.total_request_nums = total_request_nums
    self.error_request_nums = error_request_nums

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.query_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.total_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.error_request_nums = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatus')
    if self.request_nums is not None:
      oprot.writeFieldBegin('request_nums', TType.I64, 1)
      oprot.writeI64(self.request_nums)
      oprot.writeFieldEnd()
    if self.query_time is not None:
      oprot.writeFieldBegin('query_time', TType.I64, 2)
      oprot.writeI64(self.query_time)
      oprot.writeFieldEnd()
    if self.total_request_nums is not None:
      oprot.writeFieldBegin('total_request_nums', TType.I64, 3)
      oprot.writeI64(self.total_request_nums)
      oprot.writeFieldEnd()
    if self.error_request_nums is not None:
      oprot.writeFieldBegin('error_request_nums', TType.I64, 4)
      oprot.writeI64(self.error_request_nums)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShardQueryStatus:
  """
  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (QueryStatus, QueryStatus.thrift_spec), None, ), # 1
  )

  def __init__(self, status=None,):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = QueryStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShardQueryStatus')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MultiShardQueryStatus:
  """
  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (QueryStatus, QueryStatus.thrift_spec), None, ), # 1
  )

  def __init__(self, status=None,):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = QueryStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MultiShardQueryStatus')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConnectPoolStatus:
  """
  Attributes:
   - used_connections
   - idle_connections
   - error_connections
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'used_connections', None, None, ), # 1
    (2, TType.I64, 'idle_connections', None, None, ), # 2
    (3, TType.I64, 'error_connections', None, None, ), # 3
  )

  def __init__(self, used_connections=None, idle_connections=None, error_connections=None,):
    self.used_connections = used_connections
    self.idle_connections = idle_connections
    self.error_connections = error_connections

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.used_connections = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.idle_connections = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.error_connections = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConnectPoolStatus')
    if self.used_connections is not None:
      oprot.writeFieldBegin('used_connections', TType.I64, 1)
      oprot.writeI64(self.used_connections)
      oprot.writeFieldEnd()
    if self.idle_connections is not None:
      oprot.writeFieldBegin('idle_connections', TType.I64, 2)
      oprot.writeI64(self.idle_connections)
      oprot.writeFieldEnd()
    if self.error_connections is not None:
      oprot.writeFieldBegin('error_connections', TType.I64, 3)
      oprot.writeI64(self.error_connections)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShardConnectPoolStatus:
  """
  Attributes:
   - shardid
   - master
   - slave
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shardid', None, None, ), # 1
    (2, TType.STRUCT, 'master', (ConnectPoolStatus, ConnectPoolStatus.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'slave', (ConnectPoolStatus, ConnectPoolStatus.thrift_spec), None, ), # 3
  )

  def __init__(self, shardid=None, master=None, slave=None,):
    self.shardid = shardid
    self.master = master
    self.slave = slave

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shardid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.master = ConnectPoolStatus()
          self.master.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.slave = ConnectPoolStatus()
          self.slave.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShardConnectPoolStatus')
    if self.shardid is not None:
      oprot.writeFieldBegin('shardid', TType.I32, 1)
      oprot.writeI32(self.shardid)
      oprot.writeFieldEnd()
    if self.master is not None:
      oprot.writeFieldBegin('master', TType.STRUCT, 2)
      self.master.write(oprot)
      oprot.writeFieldEnd()
    if self.slave is not None:
      oprot.writeFieldBegin('slave', TType.STRUCT, 3)
      self.slave.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DBConnectPoolStatus:
  """
  Attributes:
   - dbname
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dbname', None, None, ), # 1
    (2, TType.LIST, 'status', (TType.STRUCT,(ShardConnectPoolStatus, ShardConnectPoolStatus.thrift_spec)), None, ), # 2
  )

  def __init__(self, dbname=None, status=None,):
    self.dbname = dbname
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dbname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.status = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = ShardConnectPoolStatus()
            _elem68.read(iprot)
            self.status.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DBConnectPoolStatus')
    if self.dbname is not None:
      oprot.writeFieldBegin('dbname', TType.STRING, 1)
      oprot.writeString(self.dbname)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.status))
      for iter69 in self.status:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThreadPoolStatus:
  """
  Attributes:
   - idle_threads
   - used_threads
   - avg_request_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'idle_threads', None, None, ), # 1
    (2, TType.I64, 'used_threads', None, None, ), # 2
    (3, TType.I64, 'avg_request_time', None, None, ), # 3
  )

  def __init__(self, idle_threads=None, used_threads=None, avg_request_time=None,):
    self.idle_threads = idle_threads
    self.used_threads = used_threads
    self.avg_request_time = avg_request_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.idle_threads = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.used_threads = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.avg_request_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThreadPoolStatus')
    if self.idle_threads is not None:
      oprot.writeFieldBegin('idle_threads', TType.I64, 1)
      oprot.writeI64(self.idle_threads)
      oprot.writeFieldEnd()
    if self.used_threads is not None:
      oprot.writeFieldBegin('used_threads', TType.I64, 2)
      oprot.writeI64(self.used_threads)
      oprot.writeFieldEnd()
    if self.avg_request_time is not None:
      oprot.writeFieldBegin('avg_request_time', TType.I64, 3)
      oprot.writeI64(self.avg_request_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DDAStatus:
  """
  Attributes:
   - server_status
   - query_status
   - multiquery_status
   - connpool_status
   - threadpool_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'server_status', (ServerStatus, ServerStatus.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'query_status', (ShardQueryStatus, ShardQueryStatus.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'multiquery_status', (MultiShardQueryStatus, MultiShardQueryStatus.thrift_spec), None, ), # 3
    (4, TType.LIST, 'connpool_status', (TType.STRUCT,(DBConnectPoolStatus, DBConnectPoolStatus.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'threadpool_status', (ThreadPoolStatus, ThreadPoolStatus.thrift_spec), None, ), # 5
  )

  def __init__(self, server_status=None, query_status=None, multiquery_status=None, connpool_status=None, threadpool_status=None,):
    self.server_status = server_status
    self.query_status = query_status
    self.multiquery_status = multiquery_status
    self.connpool_status = connpool_status
    self.threadpool_status = threadpool_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.server_status = ServerStatus()
          self.server_status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.query_status = ShardQueryStatus()
          self.query_status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.multiquery_status = MultiShardQueryStatus()
          self.multiquery_status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.connpool_status = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = DBConnectPoolStatus()
            _elem75.read(iprot)
            self.connpool_status.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.threadpool_status = ThreadPoolStatus()
          self.threadpool_status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DDAStatus')
    if self.server_status is not None:
      oprot.writeFieldBegin('server_status', TType.STRUCT, 1)
      self.server_status.write(oprot)
      oprot.writeFieldEnd()
    if self.query_status is not None:
      oprot.writeFieldBegin('query_status', TType.STRUCT, 2)
      self.query_status.write(oprot)
      oprot.writeFieldEnd()
    if self.multiquery_status is not None:
      oprot.writeFieldBegin('multiquery_status', TType.STRUCT, 3)
      self.multiquery_status.write(oprot)
      oprot.writeFieldEnd()
    if self.connpool_status is not None:
      oprot.writeFieldBegin('connpool_status', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.connpool_status))
      for iter76 in self.connpool_status:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.threadpool_status is not None:
      oprot.writeFieldBegin('threadpool_status', TType.STRUCT, 5)
      self.threadpool_status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
