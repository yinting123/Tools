#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class BookingMenu:
  kGeneralMenu = 1
  kHourRoomMenu = 2
  kGroupBuyMenu = 3

  _VALUES_TO_NAMES = {
    1: "kGeneralMenu",
    2: "kHourRoomMenu",
    3: "kGroupBuyMenu",
  }

  _NAMES_TO_VALUES = {
    "kGeneralMenu": 1,
    "kHourRoomMenu": 2,
    "kGroupBuyMenu": 3,
  }


class RequestPriceRange:
  """
  Attributes:
   - low_price
   - high_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'low_price', None, None, ), # 1
    (2, TType.I32, 'high_price', None, None, ), # 2
  )

  def __init__(self, low_price=None, high_price=None,):
    self.low_price = low_price
    self.high_price = high_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.low_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.high_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestPriceRange')
    if self.low_price is not None:
      oprot.writeFieldBegin('low_price', TType.I32, 1)
      oprot.writeI32(self.low_price)
      oprot.writeFieldEnd()
    if self.high_price is not None:
      oprot.writeFieldBegin('high_price', TType.I32, 2)
      oprot.writeI32(self.high_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.low_price)
    value = (value * 31) ^ hash(self.high_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectPrice:
  """
  Attributes:
   - type
   - request_price_range
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'request_price_range', (TType.STRUCT,(RequestPriceRange, RequestPriceRange.thrift_spec)), None, ), # 2
  )

  def __init__(self, type=None, request_price_range=None,):
    self.type = type
    self.request_price_range = request_price_range

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.request_price_range = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = RequestPriceRange()
            _elem5.read(iprot)
            self.request_price_range.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectPrice')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.request_price_range is not None:
      oprot.writeFieldBegin('request_price_range', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.request_price_range))
      for iter6 in self.request_price_range:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.request_price_range)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelInvoiceInfo:
  """
  Attributes:
   - shotel_id
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, shotel_id=None, type=None,):
    self.shotel_id = shotel_id
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelInvoiceInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelHelpfulTips:
  """
  Attributes:
   - shotel_id
   - helpful_tips_cn
   - helpful_tips_en
   - start_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.STRING, 'helpful_tips_cn', None, None, ), # 2
    (3, TType.STRING, 'helpful_tips_en', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
  )

  def __init__(self, shotel_id=None, helpful_tips_cn=None, helpful_tips_en=None, start_date=None, end_date=None,):
    self.shotel_id = shotel_id
    self.helpful_tips_cn = helpful_tips_cn
    self.helpful_tips_en = helpful_tips_en
    self.start_date = start_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.helpful_tips_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.helpful_tips_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelHelpfulTips')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.helpful_tips_cn is not None:
      oprot.writeFieldBegin('helpful_tips_cn', TType.STRING, 2)
      oprot.writeString(self.helpful_tips_cn)
      oprot.writeFieldEnd()
    if self.helpful_tips_en is not None:
      oprot.writeFieldBegin('helpful_tips_en', TType.STRING, 3)
      oprot.writeString(self.helpful_tips_en)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.helpful_tips_cn)
    value = (value * 31) ^ hash(self.helpful_tips_en)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftSecondTag:
  """
  Attributes:
   - sub_bit_number
   - sub_gift_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sub_bit_number', None, None, ), # 1
    (2, TType.I32, 'sub_gift_price', None, None, ), # 2
  )

  def __init__(self, sub_bit_number=None, sub_gift_price=None,):
    self.sub_bit_number = sub_bit_number
    self.sub_gift_price = sub_gift_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sub_bit_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sub_gift_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftSecondTag')
    if self.sub_bit_number is not None:
      oprot.writeFieldBegin('sub_bit_number', TType.I32, 1)
      oprot.writeI32(self.sub_bit_number)
      oprot.writeFieldEnd()
    if self.sub_gift_price is not None:
      oprot.writeFieldBegin('sub_gift_price', TType.I32, 2)
      oprot.writeI32(self.sub_gift_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sub_bit_number)
    value = (value * 31) ^ hash(self.sub_gift_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftFirstTag:
  """
  Attributes:
   - bit_number
   - priority
   - gift_second_tag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'bit_number', None, None, ), # 1
    (2, TType.I32, 'priority', None, None, ), # 2
    (3, TType.LIST, 'gift_second_tag', (TType.STRUCT,(GiftSecondTag, GiftSecondTag.thrift_spec)), None, ), # 3
  )

  def __init__(self, bit_number=None, priority=None, gift_second_tag=None,):
    self.bit_number = bit_number
    self.priority = priority
    self.gift_second_tag = gift_second_tag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.bit_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gift_second_tag = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GiftSecondTag()
            _elem12.read(iprot)
            self.gift_second_tag.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftFirstTag')
    if self.bit_number is not None:
      oprot.writeFieldBegin('bit_number', TType.I32, 1)
      oprot.writeI32(self.bit_number)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 2)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.gift_second_tag is not None:
      oprot.writeFieldBegin('gift_second_tag', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.gift_second_tag))
      for iter13 in self.gift_second_tag:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bit_number)
    value = (value * 31) ^ hash(self.priority)
    value = (value * 31) ^ hash(self.gift_second_tag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftInfo:
  """
  Attributes:
   - shotel_id
   - sroom_type_id
   - rateplan_id
   - gift_content_cn
   - gift_content_en
   - way_of_giving
   - way_of_giving_other_cn
   - way_of_giving_other_en
   - gift_types
   - status
   - begin_date
   - end_date
   - date_type
   - bit_sum4_week
   - hour_type
   - hour_number
   - gift_first_tag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.I64, 'sroom_type_id', None, None, ), # 2
    (3, TType.I64, 'rateplan_id', None, None, ), # 3
    None, # 4
    (5, TType.STRING, 'gift_content_cn', None, None, ), # 5
    (6, TType.STRING, 'gift_content_en', None, None, ), # 6
    (7, TType.I32, 'way_of_giving', None, None, ), # 7
    (8, TType.STRING, 'way_of_giving_other_cn', None, None, ), # 8
    (9, TType.STRING, 'way_of_giving_other_en', None, None, ), # 9
    (10, TType.I32, 'gift_types', None, None, ), # 10
    (11, TType.I32, 'status', None, None, ), # 11
    (12, TType.STRING, 'begin_date', None, None, ), # 12
    (13, TType.STRING, 'end_date', None, None, ), # 13
    (14, TType.I32, 'date_type', None, None, ), # 14
    (15, TType.I32, 'bit_sum4_week', None, None, ), # 15
    (16, TType.I32, 'hour_type', None, None, ), # 16
    (17, TType.I32, 'hour_number', None, None, ), # 17
    (18, TType.LIST, 'gift_first_tag', (TType.STRUCT,(GiftFirstTag, GiftFirstTag.thrift_spec)), None, ), # 18
  )

  def __init__(self, shotel_id=None, sroom_type_id=None, rateplan_id=None, gift_content_cn=None, gift_content_en=None, way_of_giving=None, way_of_giving_other_cn=None, way_of_giving_other_en=None, gift_types=None, status=None, begin_date=None, end_date=None, date_type=None, bit_sum4_week=None, hour_type=None, hour_number=None, gift_first_tag=None,):
    self.shotel_id = shotel_id
    self.sroom_type_id = sroom_type_id
    self.rateplan_id = rateplan_id
    self.gift_content_cn = gift_content_cn
    self.gift_content_en = gift_content_en
    self.way_of_giving = way_of_giving
    self.way_of_giving_other_cn = way_of_giving_other_cn
    self.way_of_giving_other_en = way_of_giving_other_en
    self.gift_types = gift_types
    self.status = status
    self.begin_date = begin_date
    self.end_date = end_date
    self.date_type = date_type
    self.bit_sum4_week = bit_sum4_week
    self.hour_type = hour_type
    self.hour_number = hour_number
    self.gift_first_tag = gift_first_tag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sroom_type_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.gift_content_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.gift_content_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.way_of_giving = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.way_of_giving_other_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.way_of_giving_other_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.gift_types = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.begin_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.bit_sum4_week = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.hour_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.hour_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.gift_first_tag = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = GiftFirstTag()
            _elem19.read(iprot)
            self.gift_first_tag.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_type_id is not None:
      oprot.writeFieldBegin('sroom_type_id', TType.I64, 2)
      oprot.writeI64(self.sroom_type_id)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 3)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.gift_content_cn is not None:
      oprot.writeFieldBegin('gift_content_cn', TType.STRING, 5)
      oprot.writeString(self.gift_content_cn)
      oprot.writeFieldEnd()
    if self.gift_content_en is not None:
      oprot.writeFieldBegin('gift_content_en', TType.STRING, 6)
      oprot.writeString(self.gift_content_en)
      oprot.writeFieldEnd()
    if self.way_of_giving is not None:
      oprot.writeFieldBegin('way_of_giving', TType.I32, 7)
      oprot.writeI32(self.way_of_giving)
      oprot.writeFieldEnd()
    if self.way_of_giving_other_cn is not None:
      oprot.writeFieldBegin('way_of_giving_other_cn', TType.STRING, 8)
      oprot.writeString(self.way_of_giving_other_cn)
      oprot.writeFieldEnd()
    if self.way_of_giving_other_en is not None:
      oprot.writeFieldBegin('way_of_giving_other_en', TType.STRING, 9)
      oprot.writeString(self.way_of_giving_other_en)
      oprot.writeFieldEnd()
    if self.gift_types is not None:
      oprot.writeFieldBegin('gift_types', TType.I32, 10)
      oprot.writeI32(self.gift_types)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.STRING, 12)
      oprot.writeString(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 13)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 14)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.bit_sum4_week is not None:
      oprot.writeFieldBegin('bit_sum4_week', TType.I32, 15)
      oprot.writeI32(self.bit_sum4_week)
      oprot.writeFieldEnd()
    if self.hour_type is not None:
      oprot.writeFieldBegin('hour_type', TType.I32, 16)
      oprot.writeI32(self.hour_type)
      oprot.writeFieldEnd()
    if self.hour_number is not None:
      oprot.writeFieldBegin('hour_number', TType.I32, 17)
      oprot.writeI32(self.hour_number)
      oprot.writeFieldEnd()
    if self.gift_first_tag is not None:
      oprot.writeFieldBegin('gift_first_tag', TType.LIST, 18)
      oprot.writeListBegin(TType.STRUCT, len(self.gift_first_tag))
      for iter20 in self.gift_first_tag:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_type_id)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.gift_content_cn)
    value = (value * 31) ^ hash(self.gift_content_en)
    value = (value * 31) ^ hash(self.way_of_giving)
    value = (value * 31) ^ hash(self.way_of_giving_other_cn)
    value = (value * 31) ^ hash(self.way_of_giving_other_en)
    value = (value * 31) ^ hash(self.gift_types)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.bit_sum4_week)
    value = (value * 31) ^ hash(self.hour_type)
    value = (value * 31) ^ hash(self.hour_number)
    value = (value * 31) ^ hash(self.gift_first_tag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftInfoPreview:
  """
  Attributes:
   - gift_preview_string
   - is_next7_days
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'gift_preview_string', None, None, ), # 2
    (3, TType.BOOL, 'is_next7_days', None, None, ), # 3
  )

  def __init__(self, gift_preview_string=None, is_next7_days=None,):
    self.gift_preview_string = gift_preview_string
    self.is_next7_days = is_next7_days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.gift_preview_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_next7_days = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftInfoPreview')
    if self.gift_preview_string is not None:
      oprot.writeFieldBegin('gift_preview_string', TType.STRING, 2)
      oprot.writeString(self.gift_preview_string)
      oprot.writeFieldEnd()
    if self.is_next7_days is not None:
      oprot.writeFieldBegin('is_next7_days', TType.BOOL, 3)
      oprot.writeBool(self.is_next7_days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gift_preview_string)
    value = (value * 31) ^ hash(self.is_next7_days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Gift:
  """
  Attributes:
   - gift_id
   - gift_info
   - gift_info_preview
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'gift_id', None, None, ), # 1
    (2, TType.STRUCT, 'gift_info', (GiftInfo, GiftInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gift_info_preview', (GiftInfoPreview, GiftInfoPreview.thrift_spec), None, ), # 3
  )

  def __init__(self, gift_id=None, gift_info=None, gift_info_preview=None,):
    self.gift_id = gift_id
    self.gift_info = gift_info
    self.gift_info_preview = gift_info_preview

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.gift_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.gift_info = GiftInfo()
          self.gift_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gift_info_preview = GiftInfoPreview()
          self.gift_info_preview.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Gift')
    if self.gift_id is not None:
      oprot.writeFieldBegin('gift_id', TType.I64, 1)
      oprot.writeI64(self.gift_id)
      oprot.writeFieldEnd()
    if self.gift_info is not None:
      oprot.writeFieldBegin('gift_info', TType.STRUCT, 2)
      self.gift_info.write(oprot)
      oprot.writeFieldEnd()
    if self.gift_info_preview is not None:
      oprot.writeFieldBegin('gift_info_preview', TType.STRUCT, 3)
      self.gift_info_preview.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gift_id is None:
      raise TProtocol.TProtocolException(message='Required field gift_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gift_id)
    value = (value * 31) ^ hash(self.gift_info)
    value = (value * 31) ^ hash(self.gift_info_preview)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelBookingRule:
  """
  Attributes:
   - id
   - shotel_id
   - cn_description
   - en_description
   - start_date
   - end_date
   - booking_date_type
   - booking_rule_type
   - start_hour
   - end_hour
   - note2
   - limit1
   - limit2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'shotel_id', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'cn_description', None, None, ), # 4
    (5, TType.STRING, 'en_description', None, None, ), # 5
    (6, TType.STRING, 'start_date', None, None, ), # 6
    (7, TType.STRING, 'end_date', None, None, ), # 7
    (8, TType.I32, 'booking_date_type', None, None, ), # 8
    (9, TType.I32, 'booking_rule_type', None, None, ), # 9
    (10, TType.STRING, 'start_hour', None, None, ), # 10
    (11, TType.STRING, 'end_hour', None, None, ), # 11
    (12, TType.STRING, 'note2', None, None, ), # 12
    (13, TType.STRING, 'limit1', None, None, ), # 13
    (14, TType.STRING, 'limit2', None, None, ), # 14
  )

  def __init__(self, id=None, shotel_id=None, cn_description=None, en_description=None, start_date=None, end_date=None, booking_date_type=None, booking_rule_type=None, start_hour=None, end_hour=None, note2=None, limit1=None, limit2=None,):
    self.id = id
    self.shotel_id = shotel_id
    self.cn_description = cn_description
    self.en_description = en_description
    self.start_date = start_date
    self.end_date = end_date
    self.booking_date_type = booking_date_type
    self.booking_rule_type = booking_rule_type
    self.start_hour = start_hour
    self.end_hour = end_hour
    self.note2 = note2
    self.limit1 = limit1
    self.limit2 = limit2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cn_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.en_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.booking_date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.booking_rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.start_hour = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.end_hour = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.note2 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.limit1 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.limit2 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelBookingRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 2)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.cn_description is not None:
      oprot.writeFieldBegin('cn_description', TType.STRING, 4)
      oprot.writeString(self.cn_description)
      oprot.writeFieldEnd()
    if self.en_description is not None:
      oprot.writeFieldBegin('en_description', TType.STRING, 5)
      oprot.writeString(self.en_description)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 6)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 7)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.booking_date_type is not None:
      oprot.writeFieldBegin('booking_date_type', TType.I32, 8)
      oprot.writeI32(self.booking_date_type)
      oprot.writeFieldEnd()
    if self.booking_rule_type is not None:
      oprot.writeFieldBegin('booking_rule_type', TType.I32, 9)
      oprot.writeI32(self.booking_rule_type)
      oprot.writeFieldEnd()
    if self.start_hour is not None:
      oprot.writeFieldBegin('start_hour', TType.STRING, 10)
      oprot.writeString(self.start_hour)
      oprot.writeFieldEnd()
    if self.end_hour is not None:
      oprot.writeFieldBegin('end_hour', TType.STRING, 11)
      oprot.writeString(self.end_hour)
      oprot.writeFieldEnd()
    if self.note2 is not None:
      oprot.writeFieldBegin('note2', TType.STRING, 12)
      oprot.writeString(self.note2)
      oprot.writeFieldEnd()
    if self.limit1 is not None:
      oprot.writeFieldBegin('limit1', TType.STRING, 13)
      oprot.writeString(self.limit1)
      oprot.writeFieldEnd()
    if self.limit2 is not None:
      oprot.writeFieldBegin('limit2', TType.STRING, 14)
      oprot.writeString(self.limit2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.cn_description)
    value = (value * 31) ^ hash(self.en_description)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.booking_date_type)
    value = (value * 31) ^ hash(self.booking_rule_type)
    value = (value * 31) ^ hash(self.start_hour)
    value = (value * 31) ^ hash(self.end_hour)
    value = (value * 31) ^ hash(self.note2)
    value = (value * 31) ^ hash(self.limit1)
    value = (value * 31) ^ hash(self.limit2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddValueInfo:
  """
  Attributes:
   - id
   - business_code
   - add_value_eng_name
   - add_value_cn_name
   - is_include
   - share
   - price_default_option
   - price
   - is_add
   - single_price_defaultoption
   - single_price
   - memo
   - is_forbidden
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'business_code', None, None, ), # 2
    (3, TType.STRING, 'add_value_eng_name', None, None, ), # 3
    (4, TType.STRING, 'add_value_cn_name', None, None, ), # 4
    (5, TType.I32, 'is_include', None, None, ), # 5
    (6, TType.I32, 'share', None, None, ), # 6
    (7, TType.I32, 'price_default_option', None, None, ), # 7
    (8, TType.DOUBLE, 'price', None, None, ), # 8
    (9, TType.BOOL, 'is_add', None, None, ), # 9
    (10, TType.I32, 'single_price_defaultoption', None, None, ), # 10
    (11, TType.DOUBLE, 'single_price', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
    (13, TType.I32, 'is_forbidden', None, None, ), # 13
  )

  def __init__(self, id=None, business_code=None, add_value_eng_name=None, add_value_cn_name=None, is_include=None, share=None, price_default_option=None, price=None, is_add=None, single_price_defaultoption=None, single_price=None, memo=None, is_forbidden=None,):
    self.id = id
    self.business_code = business_code
    self.add_value_eng_name = add_value_eng_name
    self.add_value_cn_name = add_value_cn_name
    self.is_include = is_include
    self.share = share
    self.price_default_option = price_default_option
    self.price = price
    self.is_add = is_add
    self.single_price_defaultoption = single_price_defaultoption
    self.single_price = single_price
    self.memo = memo
    self.is_forbidden = is_forbidden

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.business_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.add_value_eng_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.add_value_cn_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.is_include = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_add = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.single_price_defaultoption = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.single_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.is_forbidden = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddValueInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.business_code is not None:
      oprot.writeFieldBegin('business_code', TType.STRING, 2)
      oprot.writeString(self.business_code)
      oprot.writeFieldEnd()
    if self.add_value_eng_name is not None:
      oprot.writeFieldBegin('add_value_eng_name', TType.STRING, 3)
      oprot.writeString(self.add_value_eng_name)
      oprot.writeFieldEnd()
    if self.add_value_cn_name is not None:
      oprot.writeFieldBegin('add_value_cn_name', TType.STRING, 4)
      oprot.writeString(self.add_value_cn_name)
      oprot.writeFieldEnd()
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.I32, 5)
      oprot.writeI32(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 6)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.price_default_option is not None:
      oprot.writeFieldBegin('price_default_option', TType.I32, 7)
      oprot.writeI32(self.price_default_option)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 8)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.is_add is not None:
      oprot.writeFieldBegin('is_add', TType.BOOL, 9)
      oprot.writeBool(self.is_add)
      oprot.writeFieldEnd()
    if self.single_price_defaultoption is not None:
      oprot.writeFieldBegin('single_price_defaultoption', TType.I32, 10)
      oprot.writeI32(self.single_price_defaultoption)
      oprot.writeFieldEnd()
    if self.single_price is not None:
      oprot.writeFieldBegin('single_price', TType.DOUBLE, 11)
      oprot.writeDouble(self.single_price)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.is_forbidden is not None:
      oprot.writeFieldBegin('is_forbidden', TType.I32, 13)
      oprot.writeI32(self.is_forbidden)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.business_code)
    value = (value * 31) ^ hash(self.add_value_eng_name)
    value = (value * 31) ^ hash(self.add_value_cn_name)
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.price_default_option)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.is_add)
    value = (value * 31) ^ hash(self.single_price_defaultoption)
    value = (value * 31) ^ hash(self.single_price)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.is_forbidden)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VouchInfo:
  """
  Attributes:
   - id
   - rateplan_id
   - vouch_way
   - start_date
   - end_date
   - date_type
   - is_week_effective
   - arrive_start_time
   - arrive_end_time
   - room_count
   - money_type
   - rule_type
   - rule_data_int
   - rule_data_date_time
   - rule_data_date_string
   - rule_description_cn
   - rule_description_en
   - is_arrive_time_vouch
   - is_room_count_vouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'rateplan_id', None, None, ), # 2
    (3, TType.I32, 'vouch_way', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
    (6, TType.I32, 'date_type', None, None, ), # 6
    (7, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 7
    (8, TType.STRING, 'arrive_start_time', None, None, ), # 8
    (9, TType.STRING, 'arrive_end_time', None, None, ), # 9
    (10, TType.I32, 'room_count', None, None, ), # 10
    (11, TType.I32, 'money_type', None, None, ), # 11
    (12, TType.I32, 'rule_type', None, None, ), # 12
    (13, TType.I32, 'rule_data_int', None, None, ), # 13
    (14, TType.STRING, 'rule_data_date_time', None, None, ), # 14
    (15, TType.STRING, 'rule_data_date_string', None, None, ), # 15
    (16, TType.STRING, 'rule_description_cn', None, None, ), # 16
    (17, TType.STRING, 'rule_description_en', None, None, ), # 17
    (18, TType.BOOL, 'is_arrive_time_vouch', None, None, ), # 18
    (19, TType.BOOL, 'is_room_count_vouch', None, None, ), # 19
  )

  def __init__(self, id=None, rateplan_id=None, vouch_way=None, start_date=None, end_date=None, date_type=None, is_week_effective=None, arrive_start_time=None, arrive_end_time=None, room_count=None, money_type=None, rule_type=None, rule_data_int=None, rule_data_date_time=None, rule_data_date_string=None, rule_description_cn=None, rule_description_en=None, is_arrive_time_vouch=None, is_room_count_vouch=None,):
    self.id = id
    self.rateplan_id = rateplan_id
    self.vouch_way = vouch_way
    self.start_date = start_date
    self.end_date = end_date
    self.date_type = date_type
    self.is_week_effective = is_week_effective
    self.arrive_start_time = arrive_start_time
    self.arrive_end_time = arrive_end_time
    self.room_count = room_count
    self.money_type = money_type
    self.rule_type = rule_type
    self.rule_data_int = rule_data_int
    self.rule_data_date_time = rule_data_date_time
    self.rule_data_date_string = rule_data_date_string
    self.rule_description_cn = rule_description_cn
    self.rule_description_en = rule_description_en
    self.is_arrive_time_vouch = is_arrive_time_vouch
    self.is_room_count_vouch = is_room_count_vouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.vouch_way = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32()
            self.is_week_effective.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.arrive_start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.arrive_end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.room_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.money_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.rule_data_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.rule_data_date_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.rule_data_date_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.rule_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.rule_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.is_arrive_time_vouch = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_room_count_vouch = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VouchInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 2)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.vouch_way is not None:
      oprot.writeFieldBegin('vouch_way', TType.I32, 3)
      oprot.writeI32(self.vouch_way)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 6)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter27 in self.is_week_effective:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.arrive_start_time is not None:
      oprot.writeFieldBegin('arrive_start_time', TType.STRING, 8)
      oprot.writeString(self.arrive_start_time)
      oprot.writeFieldEnd()
    if self.arrive_end_time is not None:
      oprot.writeFieldBegin('arrive_end_time', TType.STRING, 9)
      oprot.writeString(self.arrive_end_time)
      oprot.writeFieldEnd()
    if self.room_count is not None:
      oprot.writeFieldBegin('room_count', TType.I32, 10)
      oprot.writeI32(self.room_count)
      oprot.writeFieldEnd()
    if self.money_type is not None:
      oprot.writeFieldBegin('money_type', TType.I32, 11)
      oprot.writeI32(self.money_type)
      oprot.writeFieldEnd()
    if self.rule_type is not None:
      oprot.writeFieldBegin('rule_type', TType.I32, 12)
      oprot.writeI32(self.rule_type)
      oprot.writeFieldEnd()
    if self.rule_data_int is not None:
      oprot.writeFieldBegin('rule_data_int', TType.I32, 13)
      oprot.writeI32(self.rule_data_int)
      oprot.writeFieldEnd()
    if self.rule_data_date_time is not None:
      oprot.writeFieldBegin('rule_data_date_time', TType.STRING, 14)
      oprot.writeString(self.rule_data_date_time)
      oprot.writeFieldEnd()
    if self.rule_data_date_string is not None:
      oprot.writeFieldBegin('rule_data_date_string', TType.STRING, 15)
      oprot.writeString(self.rule_data_date_string)
      oprot.writeFieldEnd()
    if self.rule_description_cn is not None:
      oprot.writeFieldBegin('rule_description_cn', TType.STRING, 16)
      oprot.writeString(self.rule_description_cn)
      oprot.writeFieldEnd()
    if self.rule_description_en is not None:
      oprot.writeFieldBegin('rule_description_en', TType.STRING, 17)
      oprot.writeString(self.rule_description_en)
      oprot.writeFieldEnd()
    if self.is_arrive_time_vouch is not None:
      oprot.writeFieldBegin('is_arrive_time_vouch', TType.BOOL, 18)
      oprot.writeBool(self.is_arrive_time_vouch)
      oprot.writeFieldEnd()
    if self.is_room_count_vouch is not None:
      oprot.writeFieldBegin('is_room_count_vouch', TType.BOOL, 19)
      oprot.writeBool(self.is_room_count_vouch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.vouch_way)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.is_week_effective)
    value = (value * 31) ^ hash(self.arrive_start_time)
    value = (value * 31) ^ hash(self.arrive_end_time)
    value = (value * 31) ^ hash(self.room_count)
    value = (value * 31) ^ hash(self.money_type)
    value = (value * 31) ^ hash(self.rule_type)
    value = (value * 31) ^ hash(self.rule_data_int)
    value = (value * 31) ^ hash(self.rule_data_date_time)
    value = (value * 31) ^ hash(self.rule_data_date_string)
    value = (value * 31) ^ hash(self.rule_description_cn)
    value = (value * 31) ^ hash(self.rule_description_en)
    value = (value * 31) ^ hash(self.is_arrive_time_vouch)
    value = (value * 31) ^ hash(self.is_room_count_vouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PrePayInfo:
  """
  Attributes:
   - id
   - rate_plan_id
   - target_type
   - start_date
   - end_date
   - date_type
   - rule_type
   - cut_before_change_time
   - cut_after_change_time
   - cut_type_before
   - cut_type_after
   - cut_num_before
   - cut_num_after
   - rule_data_int
   - rule_data_second_int
   - rule_data_date_time
   - rule_data_string
   - rule_description_cn
   - rule_description_en
   - is_week_effective
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'rate_plan_id', None, None, ), # 2
    (3, TType.I32, 'target_type', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
    (6, TType.I32, 'date_type', None, None, ), # 6
    (7, TType.I32, 'rule_type', None, None, ), # 7
    (8, TType.BOOL, 'cut_before_change_time', None, None, ), # 8
    (9, TType.BOOL, 'cut_after_change_time', None, None, ), # 9
    (10, TType.I32, 'cut_type_before', None, None, ), # 10
    (11, TType.I32, 'cut_type_after', None, None, ), # 11
    (12, TType.I32, 'cut_num_before', None, None, ), # 12
    (13, TType.I32, 'cut_num_after', None, None, ), # 13
    (14, TType.I32, 'rule_data_int', None, None, ), # 14
    (15, TType.I32, 'rule_data_second_int', None, None, ), # 15
    (16, TType.STRING, 'rule_data_date_time', None, None, ), # 16
    (17, TType.STRING, 'rule_data_string', None, None, ), # 17
    (18, TType.STRING, 'rule_description_cn', None, None, ), # 18
    (19, TType.STRING, 'rule_description_en', None, None, ), # 19
    (20, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 20
  )

  def __init__(self, id=None, rate_plan_id=None, target_type=None, start_date=None, end_date=None, date_type=None, rule_type=None, cut_before_change_time=None, cut_after_change_time=None, cut_type_before=None, cut_type_after=None, cut_num_before=None, cut_num_after=None, rule_data_int=None, rule_data_second_int=None, rule_data_date_time=None, rule_data_string=None, rule_description_cn=None, rule_description_en=None, is_week_effective=None,):
    self.id = id
    self.rate_plan_id = rate_plan_id
    self.target_type = target_type
    self.start_date = start_date
    self.end_date = end_date
    self.date_type = date_type
    self.rule_type = rule_type
    self.cut_before_change_time = cut_before_change_time
    self.cut_after_change_time = cut_after_change_time
    self.cut_type_before = cut_type_before
    self.cut_type_after = cut_type_after
    self.cut_num_before = cut_num_before
    self.cut_num_after = cut_num_after
    self.rule_data_int = rule_data_int
    self.rule_data_second_int = rule_data_second_int
    self.rule_data_date_time = rule_data_date_time
    self.rule_data_string = rule_data_string
    self.rule_description_cn = rule_description_cn
    self.rule_description_en = rule_description_en
    self.is_week_effective = is_week_effective

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.rate_plan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.target_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.cut_before_change_time = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.cut_after_change_time = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.cut_type_before = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cut_type_after = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.cut_num_before = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.cut_num_after = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.rule_data_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.rule_data_second_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.rule_data_date_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.rule_data_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.rule_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.rule_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32()
            self.is_week_effective.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrePayInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I64, 2)
      oprot.writeI64(self.rate_plan_id)
      oprot.writeFieldEnd()
    if self.target_type is not None:
      oprot.writeFieldBegin('target_type', TType.I32, 3)
      oprot.writeI32(self.target_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 6)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.rule_type is not None:
      oprot.writeFieldBegin('rule_type', TType.I32, 7)
      oprot.writeI32(self.rule_type)
      oprot.writeFieldEnd()
    if self.cut_before_change_time is not None:
      oprot.writeFieldBegin('cut_before_change_time', TType.BOOL, 8)
      oprot.writeBool(self.cut_before_change_time)
      oprot.writeFieldEnd()
    if self.cut_after_change_time is not None:
      oprot.writeFieldBegin('cut_after_change_time', TType.BOOL, 9)
      oprot.writeBool(self.cut_after_change_time)
      oprot.writeFieldEnd()
    if self.cut_type_before is not None:
      oprot.writeFieldBegin('cut_type_before', TType.I32, 10)
      oprot.writeI32(self.cut_type_before)
      oprot.writeFieldEnd()
    if self.cut_type_after is not None:
      oprot.writeFieldBegin('cut_type_after', TType.I32, 11)
      oprot.writeI32(self.cut_type_after)
      oprot.writeFieldEnd()
    if self.cut_num_before is not None:
      oprot.writeFieldBegin('cut_num_before', TType.I32, 12)
      oprot.writeI32(self.cut_num_before)
      oprot.writeFieldEnd()
    if self.cut_num_after is not None:
      oprot.writeFieldBegin('cut_num_after', TType.I32, 13)
      oprot.writeI32(self.cut_num_after)
      oprot.writeFieldEnd()
    if self.rule_data_int is not None:
      oprot.writeFieldBegin('rule_data_int', TType.I32, 14)
      oprot.writeI32(self.rule_data_int)
      oprot.writeFieldEnd()
    if self.rule_data_second_int is not None:
      oprot.writeFieldBegin('rule_data_second_int', TType.I32, 15)
      oprot.writeI32(self.rule_data_second_int)
      oprot.writeFieldEnd()
    if self.rule_data_date_time is not None:
      oprot.writeFieldBegin('rule_data_date_time', TType.STRING, 16)
      oprot.writeString(self.rule_data_date_time)
      oprot.writeFieldEnd()
    if self.rule_data_string is not None:
      oprot.writeFieldBegin('rule_data_string', TType.STRING, 17)
      oprot.writeString(self.rule_data_string)
      oprot.writeFieldEnd()
    if self.rule_description_cn is not None:
      oprot.writeFieldBegin('rule_description_cn', TType.STRING, 18)
      oprot.writeString(self.rule_description_cn)
      oprot.writeFieldEnd()
    if self.rule_description_en is not None:
      oprot.writeFieldBegin('rule_description_en', TType.STRING, 19)
      oprot.writeString(self.rule_description_en)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 20)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter34 in self.is_week_effective:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.rate_plan_id)
    value = (value * 31) ^ hash(self.target_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.rule_type)
    value = (value * 31) ^ hash(self.cut_before_change_time)
    value = (value * 31) ^ hash(self.cut_after_change_time)
    value = (value * 31) ^ hash(self.cut_type_before)
    value = (value * 31) ^ hash(self.cut_type_after)
    value = (value * 31) ^ hash(self.cut_num_before)
    value = (value * 31) ^ hash(self.cut_num_after)
    value = (value * 31) ^ hash(self.rule_data_int)
    value = (value * 31) ^ hash(self.rule_data_second_int)
    value = (value * 31) ^ hash(self.rule_data_date_time)
    value = (value * 31) ^ hash(self.rule_data_string)
    value = (value * 31) ^ hash(self.rule_description_cn)
    value = (value * 31) ^ hash(self.rule_description_en)
    value = (value * 31) ^ hash(self.is_week_effective)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddBreakfastInfoOfDay:
  """
  Attributes:
   - is_include
   - share
   - price_default_option
   - price
   - date
   - policy_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_include', None, None, ), # 1
    (2, TType.I32, 'share', None, None, ), # 2
    (3, TType.I32, 'price_default_option', None, None, ), # 3
    (4, TType.DOUBLE, 'price', None, None, ), # 4
    (5, TType.STRING, 'date', None, None, ), # 5
    (6, TType.I64, 'policy_id', None, None, ), # 6
  )

  def __init__(self, is_include=None, share=None, price_default_option=None, price=None, date=None, policy_id=None,):
    self.is_include = is_include
    self.share = share
    self.price_default_option = price_default_option
    self.price = price
    self.date = date
    self.policy_id = policy_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_include = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.policy_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddBreakfastInfoOfDay')
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.BOOL, 1)
      oprot.writeBool(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 2)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.price_default_option is not None:
      oprot.writeFieldBegin('price_default_option', TType.I32, 3)
      oprot.writeI32(self.price_default_option)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 4)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 5)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.policy_id is not None:
      oprot.writeFieldBegin('policy_id', TType.I64, 6)
      oprot.writeI64(self.policy_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.price_default_option)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.policy_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddBreakfasePolicyInfo:
  """
  Attributes:
   - rate_plan_id
   - policy_id
   - sub_policy
   - policy_name
   - policy_name_eng
   - is_customer_visible
   - cn_description
   - eng_description
   - date_type
   - start_date
   - end_date
   - is_week_effective
   - status
   - is_include
   - share
   - currency_code
   - price_default
   - price
   - is_add
   - single_price_default_option
   - single_price
   - memo
   - add_value_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rate_plan_id', None, None, ), # 1
    (2, TType.I64, 'policy_id', None, None, ), # 2
    (3, TType.I32, 'sub_policy', None, None, ), # 3
    (4, TType.STRING, 'policy_name', None, None, ), # 4
    (5, TType.STRING, 'policy_name_eng', None, None, ), # 5
    (6, TType.I32, 'is_customer_visible', None, None, ), # 6
    (7, TType.STRING, 'cn_description', None, None, ), # 7
    (8, TType.STRING, 'eng_description', None, None, ), # 8
    (9, TType.I32, 'date_type', None, None, ), # 9
    (10, TType.STRING, 'start_date', None, None, ), # 10
    (11, TType.STRING, 'end_date', None, None, ), # 11
    (12, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'is_include', None, None, ), # 14
    (15, TType.I32, 'share', None, None, ), # 15
    (16, TType.STRING, 'currency_code', None, None, ), # 16
    (17, TType.I32, 'price_default', None, None, ), # 17
    (18, TType.DOUBLE, 'price', None, None, ), # 18
    (19, TType.I32, 'is_add', None, None, ), # 19
    (20, TType.I32, 'single_price_default_option', None, None, ), # 20
    (21, TType.DOUBLE, 'single_price', None, None, ), # 21
    (22, TType.STRING, 'memo', None, None, ), # 22
    (23, TType.I64, 'add_value_id', None, None, ), # 23
  )

  def __init__(self, rate_plan_id=None, policy_id=None, sub_policy=None, policy_name=None, policy_name_eng=None, is_customer_visible=None, cn_description=None, eng_description=None, date_type=None, start_date=None, end_date=None, is_week_effective=None, status=None, is_include=None, share=None, currency_code=None, price_default=None, price=None, is_add=None, single_price_default_option=None, single_price=None, memo=None, add_value_id=None,):
    self.rate_plan_id = rate_plan_id
    self.policy_id = policy_id
    self.sub_policy = sub_policy
    self.policy_name = policy_name
    self.policy_name_eng = policy_name_eng
    self.is_customer_visible = is_customer_visible
    self.cn_description = cn_description
    self.eng_description = eng_description
    self.date_type = date_type
    self.start_date = start_date
    self.end_date = end_date
    self.is_week_effective = is_week_effective
    self.status = status
    self.is_include = is_include
    self.share = share
    self.currency_code = currency_code
    self.price_default = price_default
    self.price = price
    self.is_add = is_add
    self.single_price_default_option = single_price_default_option
    self.single_price = single_price
    self.memo = memo
    self.add_value_id = add_value_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rate_plan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.policy_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sub_policy = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.policy_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.policy_name_eng = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.is_customer_visible = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cn_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.eng_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI32()
            self.is_week_effective.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.is_include = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.currency_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.price_default = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.is_add = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.single_price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.single_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.add_value_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddBreakfasePolicyInfo')
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I64, 1)
      oprot.writeI64(self.rate_plan_id)
      oprot.writeFieldEnd()
    if self.policy_id is not None:
      oprot.writeFieldBegin('policy_id', TType.I64, 2)
      oprot.writeI64(self.policy_id)
      oprot.writeFieldEnd()
    if self.sub_policy is not None:
      oprot.writeFieldBegin('sub_policy', TType.I32, 3)
      oprot.writeI32(self.sub_policy)
      oprot.writeFieldEnd()
    if self.policy_name is not None:
      oprot.writeFieldBegin('policy_name', TType.STRING, 4)
      oprot.writeString(self.policy_name)
      oprot.writeFieldEnd()
    if self.policy_name_eng is not None:
      oprot.writeFieldBegin('policy_name_eng', TType.STRING, 5)
      oprot.writeString(self.policy_name_eng)
      oprot.writeFieldEnd()
    if self.is_customer_visible is not None:
      oprot.writeFieldBegin('is_customer_visible', TType.I32, 6)
      oprot.writeI32(self.is_customer_visible)
      oprot.writeFieldEnd()
    if self.cn_description is not None:
      oprot.writeFieldBegin('cn_description', TType.STRING, 7)
      oprot.writeString(self.cn_description)
      oprot.writeFieldEnd()
    if self.eng_description is not None:
      oprot.writeFieldBegin('eng_description', TType.STRING, 8)
      oprot.writeString(self.eng_description)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 9)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 10)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 11)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 12)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter41 in self.is_week_effective:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.I32, 14)
      oprot.writeI32(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 15)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.currency_code is not None:
      oprot.writeFieldBegin('currency_code', TType.STRING, 16)
      oprot.writeString(self.currency_code)
      oprot.writeFieldEnd()
    if self.price_default is not None:
      oprot.writeFieldBegin('price_default', TType.I32, 17)
      oprot.writeI32(self.price_default)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 18)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.is_add is not None:
      oprot.writeFieldBegin('is_add', TType.I32, 19)
      oprot.writeI32(self.is_add)
      oprot.writeFieldEnd()
    if self.single_price_default_option is not None:
      oprot.writeFieldBegin('single_price_default_option', TType.I32, 20)
      oprot.writeI32(self.single_price_default_option)
      oprot.writeFieldEnd()
    if self.single_price is not None:
      oprot.writeFieldBegin('single_price', TType.DOUBLE, 21)
      oprot.writeDouble(self.single_price)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 22)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.add_value_id is not None:
      oprot.writeFieldBegin('add_value_id', TType.I64, 23)
      oprot.writeI64(self.add_value_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.policy_id is None:
      raise TProtocol.TProtocolException(message='Required field policy_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rate_plan_id)
    value = (value * 31) ^ hash(self.policy_id)
    value = (value * 31) ^ hash(self.sub_policy)
    value = (value * 31) ^ hash(self.policy_name)
    value = (value * 31) ^ hash(self.policy_name_eng)
    value = (value * 31) ^ hash(self.is_customer_visible)
    value = (value * 31) ^ hash(self.cn_description)
    value = (value * 31) ^ hash(self.eng_description)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.is_week_effective)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.currency_code)
    value = (value * 31) ^ hash(self.price_default)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.is_add)
    value = (value * 31) ^ hash(self.single_price_default_option)
    value = (value * 31) ^ hash(self.single_price)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.add_value_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HoursRoomInfo:
  """
  Attributes:
   - earliest_arrival_time
   - latest_arrival_time
   - stay_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'earliest_arrival_time', None, None, ), # 1
    (2, TType.STRING, 'latest_arrival_time', None, None, ), # 2
    (3, TType.STRING, 'stay_time', None, None, ), # 3
  )

  def __init__(self, earliest_arrival_time=None, latest_arrival_time=None, stay_time=None,):
    self.earliest_arrival_time = earliest_arrival_time
    self.latest_arrival_time = latest_arrival_time
    self.stay_time = stay_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.earliest_arrival_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.latest_arrival_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.stay_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HoursRoomInfo')
    if self.earliest_arrival_time is not None:
      oprot.writeFieldBegin('earliest_arrival_time', TType.STRING, 1)
      oprot.writeString(self.earliest_arrival_time)
      oprot.writeFieldEnd()
    if self.latest_arrival_time is not None:
      oprot.writeFieldBegin('latest_arrival_time', TType.STRING, 2)
      oprot.writeString(self.latest_arrival_time)
      oprot.writeFieldEnd()
    if self.stay_time is not None:
      oprot.writeFieldBegin('stay_time', TType.STRING, 3)
      oprot.writeString(self.stay_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.earliest_arrival_time)
    value = (value * 31) ^ hash(self.latest_arrival_time)
    value = (value * 31) ^ hash(self.stay_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatePlanAddtion:
  """
  Attributes:
   - addition_id
   - addition_value
   - addition_value_str
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'addition_id', None, None, ), # 1
    (2, TType.I32, 'addition_value', None, None, ), # 2
    (3, TType.STRING, 'addition_value_str', None, None, ), # 3
  )

  def __init__(self, addition_id=None, addition_value=None, addition_value_str=None,):
    self.addition_id = addition_id
    self.addition_value = addition_value
    self.addition_value_str = addition_value_str

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.addition_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.addition_value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.addition_value_str = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatePlanAddtion')
    if self.addition_id is not None:
      oprot.writeFieldBegin('addition_id', TType.I32, 1)
      oprot.writeI32(self.addition_id)
      oprot.writeFieldEnd()
    if self.addition_value is not None:
      oprot.writeFieldBegin('addition_value', TType.I32, 2)
      oprot.writeI32(self.addition_value)
      oprot.writeFieldEnd()
    if self.addition_value_str is not None:
      oprot.writeFieldBegin('addition_value_str', TType.STRING, 3)
      oprot.writeString(self.addition_value_str)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addition_id)
    value = (value * 31) ^ hash(self.addition_value)
    value = (value * 31) ^ hash(self.addition_value_str)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RPRatePlan:
  """
  Attributes:
   - rateplan_id
   - booking_channel
   - sell_channel
   - product_type
   - customer_level
   - settlement_type
   - price_model
   - price_type
   - rateplan_name_cn
   - rateplan_name_en
   - rateplan_description_cn
   - rateplan_description_en
   - min_advance_booking_days
   - max_advance_booking_days
   - start_date
   - end_date
   - min_stay_days
   - max_stay_days
   - is_limit_time_sale
   - min_checkin_rooms
   - inventory_limit
   - status
   - date_type
   - expected_confirm_time
   - add_value_infos
   - vouch_infos
   - prepay_infos
   - is_special_breakfast
   - add_breakfast_info_of_days
   - add_breakfast_policy_infos
   - additions
   - max_checkin_rooms
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rateplan_id', None, None, ), # 1
    (2, TType.I32, 'booking_channel', None, None, ), # 2
    (3, TType.I32, 'sell_channel', None, None, ), # 3
    (4, TType.I32, 'product_type', None, None, ), # 4
    (5, TType.I32, 'customer_level', None, None, ), # 5
    (6, TType.I32, 'settlement_type', None, None, ), # 6
    (7, TType.I32, 'price_model', None, None, ), # 7
    (8, TType.I32, 'price_type', None, None, ), # 8
    (9, TType.STRING, 'rateplan_name_cn', None, None, ), # 9
    (10, TType.STRING, 'rateplan_name_en', None, None, ), # 10
    (11, TType.STRING, 'rateplan_description_cn', None, None, ), # 11
    (12, TType.STRING, 'rateplan_description_en', None, None, ), # 12
    (13, TType.I32, 'min_advance_booking_days', None, None, ), # 13
    (14, TType.I32, 'max_advance_booking_days', None, None, ), # 14
    (15, TType.STRING, 'start_date', None, None, ), # 15
    (16, TType.STRING, 'end_date', None, None, ), # 16
    (17, TType.I32, 'min_stay_days', None, None, ), # 17
    (18, TType.I32, 'max_stay_days', None, None, ), # 18
    (19, TType.BOOL, 'is_limit_time_sale', None, None, ), # 19
    (20, TType.I32, 'min_checkin_rooms', None, None, ), # 20
    (21, TType.I32, 'inventory_limit', None, None, ), # 21
    (22, TType.I32, 'status', None, None, ), # 22
    (23, TType.I32, 'date_type', None, None, ), # 23
    None, # 24
    (25, TType.STRING, 'expected_confirm_time', None, None, ), # 25
    (26, TType.LIST, 'add_value_infos', (TType.STRUCT,(AddValueInfo, AddValueInfo.thrift_spec)), None, ), # 26
    (27, TType.LIST, 'vouch_infos', (TType.STRUCT,(VouchInfo, VouchInfo.thrift_spec)), None, ), # 27
    (28, TType.LIST, 'prepay_infos', (TType.STRUCT,(PrePayInfo, PrePayInfo.thrift_spec)), None, ), # 28
    (29, TType.BOOL, 'is_special_breakfast', None, None, ), # 29
    (30, TType.LIST, 'add_breakfast_info_of_days', (TType.STRUCT,(AddBreakfastInfoOfDay, AddBreakfastInfoOfDay.thrift_spec)), None, ), # 30
    (31, TType.LIST, 'add_breakfast_policy_infos', (TType.STRUCT,(AddBreakfasePolicyInfo, AddBreakfasePolicyInfo.thrift_spec)), None, ), # 31
    (32, TType.LIST, 'additions', (TType.STRUCT,(RatePlanAddtion, RatePlanAddtion.thrift_spec)), None, ), # 32
    (33, TType.I32, 'max_checkin_rooms', None, None, ), # 33
  )

  def __init__(self, rateplan_id=None, booking_channel=None, sell_channel=None, product_type=None, customer_level=None, settlement_type=None, price_model=None, price_type=None, rateplan_name_cn=None, rateplan_name_en=None, rateplan_description_cn=None, rateplan_description_en=None, min_advance_booking_days=None, max_advance_booking_days=None, start_date=None, end_date=None, min_stay_days=None, max_stay_days=None, is_limit_time_sale=None, min_checkin_rooms=None, inventory_limit=None, status=None, date_type=None, expected_confirm_time=None, add_value_infos=None, vouch_infos=None, prepay_infos=None, is_special_breakfast=None, add_breakfast_info_of_days=None, add_breakfast_policy_infos=None, additions=None, max_checkin_rooms=None,):
    self.rateplan_id = rateplan_id
    self.booking_channel = booking_channel
    self.sell_channel = sell_channel
    self.product_type = product_type
    self.customer_level = customer_level
    self.settlement_type = settlement_type
    self.price_model = price_model
    self.price_type = price_type
    self.rateplan_name_cn = rateplan_name_cn
    self.rateplan_name_en = rateplan_name_en
    self.rateplan_description_cn = rateplan_description_cn
    self.rateplan_description_en = rateplan_description_en
    self.min_advance_booking_days = min_advance_booking_days
    self.max_advance_booking_days = max_advance_booking_days
    self.start_date = start_date
    self.end_date = end_date
    self.min_stay_days = min_stay_days
    self.max_stay_days = max_stay_days
    self.is_limit_time_sale = is_limit_time_sale
    self.min_checkin_rooms = min_checkin_rooms
    self.inventory_limit = inventory_limit
    self.status = status
    self.date_type = date_type
    self.expected_confirm_time = expected_confirm_time
    self.add_value_infos = add_value_infos
    self.vouch_infos = vouch_infos
    self.prepay_infos = prepay_infos
    self.is_special_breakfast = is_special_breakfast
    self.add_breakfast_info_of_days = add_breakfast_info_of_days
    self.add_breakfast_policy_infos = add_breakfast_policy_infos
    self.additions = additions
    self.max_checkin_rooms = max_checkin_rooms

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.booking_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sell_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.customer_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.settlement_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price_model = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.price_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.rateplan_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.rateplan_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.rateplan_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.rateplan_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.min_advance_booking_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.max_advance_booking_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.min_stay_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.max_stay_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_limit_time_sale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.min_checkin_rooms = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.inventory_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.expected_confirm_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.LIST:
          self.add_value_infos = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = AddValueInfo()
            _elem47.read(iprot)
            self.add_value_infos.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.vouch_infos = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = VouchInfo()
            _elem53.read(iprot)
            self.vouch_infos.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.prepay_infos = []
          (_etype57, _size54) = iprot.readListBegin()
          for _i58 in xrange(_size54):
            _elem59 = PrePayInfo()
            _elem59.read(iprot)
            self.prepay_infos.append(_elem59)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.is_special_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.LIST:
          self.add_breakfast_info_of_days = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = AddBreakfastInfoOfDay()
            _elem65.read(iprot)
            self.add_breakfast_info_of_days.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.LIST:
          self.add_breakfast_policy_infos = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = AddBreakfasePolicyInfo()
            _elem71.read(iprot)
            self.add_breakfast_policy_infos.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.additions = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = RatePlanAddtion()
            _elem77.read(iprot)
            self.additions.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.max_checkin_rooms = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RPRatePlan')
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 1)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.booking_channel is not None:
      oprot.writeFieldBegin('booking_channel', TType.I32, 2)
      oprot.writeI32(self.booking_channel)
      oprot.writeFieldEnd()
    if self.sell_channel is not None:
      oprot.writeFieldBegin('sell_channel', TType.I32, 3)
      oprot.writeI32(self.sell_channel)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I32, 4)
      oprot.writeI32(self.product_type)
      oprot.writeFieldEnd()
    if self.customer_level is not None:
      oprot.writeFieldBegin('customer_level', TType.I32, 5)
      oprot.writeI32(self.customer_level)
      oprot.writeFieldEnd()
    if self.settlement_type is not None:
      oprot.writeFieldBegin('settlement_type', TType.I32, 6)
      oprot.writeI32(self.settlement_type)
      oprot.writeFieldEnd()
    if self.price_model is not None:
      oprot.writeFieldBegin('price_model', TType.I32, 7)
      oprot.writeI32(self.price_model)
      oprot.writeFieldEnd()
    if self.price_type is not None:
      oprot.writeFieldBegin('price_type', TType.I32, 8)
      oprot.writeI32(self.price_type)
      oprot.writeFieldEnd()
    if self.rateplan_name_cn is not None:
      oprot.writeFieldBegin('rateplan_name_cn', TType.STRING, 9)
      oprot.writeString(self.rateplan_name_cn)
      oprot.writeFieldEnd()
    if self.rateplan_name_en is not None:
      oprot.writeFieldBegin('rateplan_name_en', TType.STRING, 10)
      oprot.writeString(self.rateplan_name_en)
      oprot.writeFieldEnd()
    if self.rateplan_description_cn is not None:
      oprot.writeFieldBegin('rateplan_description_cn', TType.STRING, 11)
      oprot.writeString(self.rateplan_description_cn)
      oprot.writeFieldEnd()
    if self.rateplan_description_en is not None:
      oprot.writeFieldBegin('rateplan_description_en', TType.STRING, 12)
      oprot.writeString(self.rateplan_description_en)
      oprot.writeFieldEnd()
    if self.min_advance_booking_days is not None:
      oprot.writeFieldBegin('min_advance_booking_days', TType.I32, 13)
      oprot.writeI32(self.min_advance_booking_days)
      oprot.writeFieldEnd()
    if self.max_advance_booking_days is not None:
      oprot.writeFieldBegin('max_advance_booking_days', TType.I32, 14)
      oprot.writeI32(self.max_advance_booking_days)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 15)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 16)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.min_stay_days is not None:
      oprot.writeFieldBegin('min_stay_days', TType.I32, 17)
      oprot.writeI32(self.min_stay_days)
      oprot.writeFieldEnd()
    if self.max_stay_days is not None:
      oprot.writeFieldBegin('max_stay_days', TType.I32, 18)
      oprot.writeI32(self.max_stay_days)
      oprot.writeFieldEnd()
    if self.is_limit_time_sale is not None:
      oprot.writeFieldBegin('is_limit_time_sale', TType.BOOL, 19)
      oprot.writeBool(self.is_limit_time_sale)
      oprot.writeFieldEnd()
    if self.min_checkin_rooms is not None:
      oprot.writeFieldBegin('min_checkin_rooms', TType.I32, 20)
      oprot.writeI32(self.min_checkin_rooms)
      oprot.writeFieldEnd()
    if self.inventory_limit is not None:
      oprot.writeFieldBegin('inventory_limit', TType.I32, 21)
      oprot.writeI32(self.inventory_limit)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 22)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 23)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.expected_confirm_time is not None:
      oprot.writeFieldBegin('expected_confirm_time', TType.STRING, 25)
      oprot.writeString(self.expected_confirm_time)
      oprot.writeFieldEnd()
    if self.add_value_infos is not None:
      oprot.writeFieldBegin('add_value_infos', TType.LIST, 26)
      oprot.writeListBegin(TType.STRUCT, len(self.add_value_infos))
      for iter78 in self.add_value_infos:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.vouch_infos is not None:
      oprot.writeFieldBegin('vouch_infos', TType.LIST, 27)
      oprot.writeListBegin(TType.STRUCT, len(self.vouch_infos))
      for iter79 in self.vouch_infos:
        iter79.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.prepay_infos is not None:
      oprot.writeFieldBegin('prepay_infos', TType.LIST, 28)
      oprot.writeListBegin(TType.STRUCT, len(self.prepay_infos))
      for iter80 in self.prepay_infos:
        iter80.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_special_breakfast is not None:
      oprot.writeFieldBegin('is_special_breakfast', TType.BOOL, 29)
      oprot.writeBool(self.is_special_breakfast)
      oprot.writeFieldEnd()
    if self.add_breakfast_info_of_days is not None:
      oprot.writeFieldBegin('add_breakfast_info_of_days', TType.LIST, 30)
      oprot.writeListBegin(TType.STRUCT, len(self.add_breakfast_info_of_days))
      for iter81 in self.add_breakfast_info_of_days:
        iter81.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.add_breakfast_policy_infos is not None:
      oprot.writeFieldBegin('add_breakfast_policy_infos', TType.LIST, 31)
      oprot.writeListBegin(TType.STRUCT, len(self.add_breakfast_policy_infos))
      for iter82 in self.add_breakfast_policy_infos:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.additions is not None:
      oprot.writeFieldBegin('additions', TType.LIST, 32)
      oprot.writeListBegin(TType.STRUCT, len(self.additions))
      for iter83 in self.additions:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_checkin_rooms is not None:
      oprot.writeFieldBegin('max_checkin_rooms', TType.I32, 33)
      oprot.writeI32(self.max_checkin_rooms)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.rateplan_id is None:
      raise TProtocol.TProtocolException(message='Required field rateplan_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.booking_channel)
    value = (value * 31) ^ hash(self.sell_channel)
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.customer_level)
    value = (value * 31) ^ hash(self.settlement_type)
    value = (value * 31) ^ hash(self.price_model)
    value = (value * 31) ^ hash(self.price_type)
    value = (value * 31) ^ hash(self.rateplan_name_cn)
    value = (value * 31) ^ hash(self.rateplan_name_en)
    value = (value * 31) ^ hash(self.rateplan_description_cn)
    value = (value * 31) ^ hash(self.rateplan_description_en)
    value = (value * 31) ^ hash(self.min_advance_booking_days)
    value = (value * 31) ^ hash(self.max_advance_booking_days)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.min_stay_days)
    value = (value * 31) ^ hash(self.max_stay_days)
    value = (value * 31) ^ hash(self.is_limit_time_sale)
    value = (value * 31) ^ hash(self.min_checkin_rooms)
    value = (value * 31) ^ hash(self.inventory_limit)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.expected_confirm_time)
    value = (value * 31) ^ hash(self.add_value_infos)
    value = (value * 31) ^ hash(self.vouch_infos)
    value = (value * 31) ^ hash(self.prepay_infos)
    value = (value * 31) ^ hash(self.is_special_breakfast)
    value = (value * 31) ^ hash(self.add_breakfast_info_of_days)
    value = (value * 31) ^ hash(self.add_breakfast_policy_infos)
    value = (value * 31) ^ hash(self.additions)
    value = (value * 31) ^ hash(self.max_checkin_rooms)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionDescription:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionDescription')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityChannel:
  """
  Attributes:
   - type
   - order_from_ids
   - proxy_ids
   - promotion_channel_codes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'order_from_ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'proxy_ids', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'promotion_channel_codes', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, type=None, order_from_ids=None, proxy_ids=None, promotion_channel_codes=None,):
    self.type = type
    self.order_from_ids = order_from_ids
    self.proxy_ids = proxy_ids
    self.promotion_channel_codes = promotion_channel_codes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.order_from_ids = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = iprot.readI64()
            self.order_from_ids.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.proxy_ids = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = iprot.readString()
            self.proxy_ids.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.promotion_channel_codes = []
          (_etype99, _size96) = iprot.readListBegin()
          for _i100 in xrange(_size96):
            _elem101 = iprot.readString()
            self.promotion_channel_codes.append(_elem101)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityChannel')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.order_from_ids is not None:
      oprot.writeFieldBegin('order_from_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.order_from_ids))
      for iter102 in self.order_from_ids:
        oprot.writeI64(iter102)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.proxy_ids is not None:
      oprot.writeFieldBegin('proxy_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.proxy_ids))
      for iter103 in self.proxy_ids:
        oprot.writeString(iter103)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion_channel_codes is not None:
      oprot.writeFieldBegin('promotion_channel_codes', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.promotion_channel_codes))
      for iter104 in self.promotion_channel_codes:
        oprot.writeString(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.order_from_ids)
    value = (value * 31) ^ hash(self.proxy_ids)
    value = (value * 31) ^ hash(self.promotion_channel_codes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongbaoFullBackRule:
  """
  Attributes:
   - full_amount
   - back_amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'full_amount', None, None, ), # 1
    (2, TType.DOUBLE, 'back_amount', None, None, ), # 2
  )

  def __init__(self, full_amount=None, back_amount=None,):
    self.full_amount = full_amount
    self.back_amount = back_amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.full_amount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.back_amount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongbaoFullBackRule')
    if self.full_amount is not None:
      oprot.writeFieldBegin('full_amount', TType.DOUBLE, 1)
      oprot.writeDouble(self.full_amount)
      oprot.writeFieldEnd()
    if self.back_amount is not None:
      oprot.writeFieldBegin('back_amount', TType.DOUBLE, 2)
      oprot.writeDouble(self.back_amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.full_amount)
    value = (value * 31) ^ hash(self.back_amount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongbaoRecord:
  """
  Attributes:
   - record_id
   - recharge_type
   - tag
   - face_value
   - income_id
   - valid_date
   - activity_id
   - status
   - order_time_from
   - order_time_to
   - is_order_valid
   - check_in_abs_date_from
   - check_in_abs_date_to
   - is_check_in_abs_valid
   - order_relative_days_from
   - order_relative_days_to
   - is_check_in_relative_valid
   - activity_channel
   - pay_types
   - hongbao_full_back_rule
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'record_id', None, None, ), # 1
    (2, TType.I32, 'recharge_type', None, None, ), # 2
    (3, TType.I32, 'tag', None, None, ), # 3
    (4, TType.DOUBLE, 'face_value', None, None, ), # 4
    (5, TType.I64, 'income_id', None, None, ), # 5
    (6, TType.STRING, 'valid_date', None, None, ), # 6
    (7, TType.I32, 'activity_id', None, None, ), # 7
    None, # 8
    (9, TType.I32, 'status', None, None, ), # 9
    None, # 10
    (11, TType.STRING, 'order_time_from', None, None, ), # 11
    (12, TType.STRING, 'order_time_to', None, None, ), # 12
    (13, TType.BOOL, 'is_order_valid', None, None, ), # 13
    (14, TType.STRING, 'check_in_abs_date_from', None, None, ), # 14
    (15, TType.STRING, 'check_in_abs_date_to', None, None, ), # 15
    (16, TType.BOOL, 'is_check_in_abs_valid', None, None, ), # 16
    (17, TType.I32, 'order_relative_days_from', None, None, ), # 17
    (18, TType.I32, 'order_relative_days_to', None, None, ), # 18
    (19, TType.BOOL, 'is_check_in_relative_valid', None, None, ), # 19
    (20, TType.LIST, 'activity_channel', (TType.STRUCT,(ActivityChannel, ActivityChannel.thrift_spec)), None, ), # 20
    (21, TType.LIST, 'pay_types', (TType.STRING,None), None, ), # 21
    (22, TType.STRUCT, 'hongbao_full_back_rule', (HongbaoFullBackRule, HongbaoFullBackRule.thrift_spec), None, ), # 22
  )

  def __init__(self, record_id=None, recharge_type=None, tag=None, face_value=None, income_id=None, valid_date=None, activity_id=None, status=None, order_time_from=None, order_time_to=None, is_order_valid=None, check_in_abs_date_from=None, check_in_abs_date_to=None, is_check_in_abs_valid=None, order_relative_days_from=None, order_relative_days_to=None, is_check_in_relative_valid=None, activity_channel=None, pay_types=None, hongbao_full_back_rule=None,):
    self.record_id = record_id
    self.recharge_type = recharge_type
    self.tag = tag
    self.face_value = face_value
    self.income_id = income_id
    self.valid_date = valid_date
    self.activity_id = activity_id
    self.status = status
    self.order_time_from = order_time_from
    self.order_time_to = order_time_to
    self.is_order_valid = is_order_valid
    self.check_in_abs_date_from = check_in_abs_date_from
    self.check_in_abs_date_to = check_in_abs_date_to
    self.is_check_in_abs_valid = is_check_in_abs_valid
    self.order_relative_days_from = order_relative_days_from
    self.order_relative_days_to = order_relative_days_to
    self.is_check_in_relative_valid = is_check_in_relative_valid
    self.activity_channel = activity_channel
    self.pay_types = pay_types
    self.hongbao_full_back_rule = hongbao_full_back_rule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.record_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.recharge_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tag = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.face_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.income_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.valid_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.activity_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.order_time_from = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.order_time_to = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.is_order_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.check_in_abs_date_from = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.check_in_abs_date_to = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.is_check_in_abs_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.order_relative_days_from = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.order_relative_days_to = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_check_in_relative_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.activity_channel = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = ActivityChannel()
            _elem110.read(iprot)
            self.activity_channel.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.pay_types = []
          (_etype114, _size111) = iprot.readListBegin()
          for _i115 in xrange(_size111):
            _elem116 = iprot.readString()
            self.pay_types.append(_elem116)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.hongbao_full_back_rule = HongbaoFullBackRule()
          self.hongbao_full_back_rule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongbaoRecord')
    if self.record_id is not None:
      oprot.writeFieldBegin('record_id', TType.I32, 1)
      oprot.writeI32(self.record_id)
      oprot.writeFieldEnd()
    if self.recharge_type is not None:
      oprot.writeFieldBegin('recharge_type', TType.I32, 2)
      oprot.writeI32(self.recharge_type)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.I32, 3)
      oprot.writeI32(self.tag)
      oprot.writeFieldEnd()
    if self.face_value is not None:
      oprot.writeFieldBegin('face_value', TType.DOUBLE, 4)
      oprot.writeDouble(self.face_value)
      oprot.writeFieldEnd()
    if self.income_id is not None:
      oprot.writeFieldBegin('income_id', TType.I64, 5)
      oprot.writeI64(self.income_id)
      oprot.writeFieldEnd()
    if self.valid_date is not None:
      oprot.writeFieldBegin('valid_date', TType.STRING, 6)
      oprot.writeString(self.valid_date)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I32, 7)
      oprot.writeI32(self.activity_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.order_time_from is not None:
      oprot.writeFieldBegin('order_time_from', TType.STRING, 11)
      oprot.writeString(self.order_time_from)
      oprot.writeFieldEnd()
    if self.order_time_to is not None:
      oprot.writeFieldBegin('order_time_to', TType.STRING, 12)
      oprot.writeString(self.order_time_to)
      oprot.writeFieldEnd()
    if self.is_order_valid is not None:
      oprot.writeFieldBegin('is_order_valid', TType.BOOL, 13)
      oprot.writeBool(self.is_order_valid)
      oprot.writeFieldEnd()
    if self.check_in_abs_date_from is not None:
      oprot.writeFieldBegin('check_in_abs_date_from', TType.STRING, 14)
      oprot.writeString(self.check_in_abs_date_from)
      oprot.writeFieldEnd()
    if self.check_in_abs_date_to is not None:
      oprot.writeFieldBegin('check_in_abs_date_to', TType.STRING, 15)
      oprot.writeString(self.check_in_abs_date_to)
      oprot.writeFieldEnd()
    if self.is_check_in_abs_valid is not None:
      oprot.writeFieldBegin('is_check_in_abs_valid', TType.BOOL, 16)
      oprot.writeBool(self.is_check_in_abs_valid)
      oprot.writeFieldEnd()
    if self.order_relative_days_from is not None:
      oprot.writeFieldBegin('order_relative_days_from', TType.I32, 17)
      oprot.writeI32(self.order_relative_days_from)
      oprot.writeFieldEnd()
    if self.order_relative_days_to is not None:
      oprot.writeFieldBegin('order_relative_days_to', TType.I32, 18)
      oprot.writeI32(self.order_relative_days_to)
      oprot.writeFieldEnd()
    if self.is_check_in_relative_valid is not None:
      oprot.writeFieldBegin('is_check_in_relative_valid', TType.BOOL, 19)
      oprot.writeBool(self.is_check_in_relative_valid)
      oprot.writeFieldEnd()
    if self.activity_channel is not None:
      oprot.writeFieldBegin('activity_channel', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.activity_channel))
      for iter117 in self.activity_channel:
        iter117.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pay_types is not None:
      oprot.writeFieldBegin('pay_types', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.pay_types))
      for iter118 in self.pay_types:
        oprot.writeString(iter118)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hongbao_full_back_rule is not None:
      oprot.writeFieldBegin('hongbao_full_back_rule', TType.STRUCT, 22)
      self.hongbao_full_back_rule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record_id)
    value = (value * 31) ^ hash(self.recharge_type)
    value = (value * 31) ^ hash(self.tag)
    value = (value * 31) ^ hash(self.face_value)
    value = (value * 31) ^ hash(self.income_id)
    value = (value * 31) ^ hash(self.valid_date)
    value = (value * 31) ^ hash(self.activity_id)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.order_time_from)
    value = (value * 31) ^ hash(self.order_time_to)
    value = (value * 31) ^ hash(self.is_order_valid)
    value = (value * 31) ^ hash(self.check_in_abs_date_from)
    value = (value * 31) ^ hash(self.check_in_abs_date_to)
    value = (value * 31) ^ hash(self.is_check_in_abs_valid)
    value = (value * 31) ^ hash(self.order_relative_days_from)
    value = (value * 31) ^ hash(self.order_relative_days_to)
    value = (value * 31) ^ hash(self.is_check_in_relative_valid)
    value = (value * 31) ^ hash(self.activity_channel)
    value = (value * 31) ^ hash(self.pay_types)
    value = (value * 31) ^ hash(self.hongbao_full_back_rule)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarketingPromotion:
  """
  Attributes:
   - id
   - promotion_type
   - description
   - upper_limit
   - offer_desc
   - exclusive_type
   - actiontype
   - short_struct
   - short_struct_eng
   - short_struct_big5
   - pro_hotel_product_id
   - promotion_description
   - has_inv_limit
   - inv_left
   - priority
   - hongbao_records
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'promotion_type', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.DOUBLE, 'upper_limit', None, None, ), # 4
    (5, TType.STRING, 'offer_desc', None, None, ), # 5
    (6, TType.I32, 'exclusive_type', None, None, ), # 6
    (7, TType.I32, 'actiontype', None, None, ), # 7
    (8, TType.STRING, 'short_struct', None, None, ), # 8
    (9, TType.STRING, 'short_struct_eng', None, None, ), # 9
    (10, TType.STRING, 'short_struct_big5', None, None, ), # 10
    (11, TType.I64, 'pro_hotel_product_id', None, None, ), # 11
    (12, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 12
    (13, TType.BOOL, 'has_inv_limit', None, None, ), # 13
    (14, TType.I32, 'inv_left', None, None, ), # 14
    (15, TType.I32, 'priority', None, None, ), # 15
    (16, TType.LIST, 'hongbao_records', (TType.STRUCT,(HongbaoRecord, HongbaoRecord.thrift_spec)), None, ), # 16
  )

  def __init__(self, id=None, promotion_type=None, description=None, upper_limit=None, offer_desc=None, exclusive_type=None, actiontype=None, short_struct=None, short_struct_eng=None, short_struct_big5=None, pro_hotel_product_id=None, promotion_description=None, has_inv_limit=None, inv_left=None, priority=None, hongbao_records=None,):
    self.id = id
    self.promotion_type = promotion_type
    self.description = description
    self.upper_limit = upper_limit
    self.offer_desc = offer_desc
    self.exclusive_type = exclusive_type
    self.actiontype = actiontype
    self.short_struct = short_struct
    self.short_struct_eng = short_struct_eng
    self.short_struct_big5 = short_struct_big5
    self.pro_hotel_product_id = pro_hotel_product_id
    self.promotion_description = promotion_description
    self.has_inv_limit = has_inv_limit
    self.inv_left = inv_left
    self.priority = priority
    self.hongbao_records = hongbao_records

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.offer_desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exclusive_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.actiontype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.short_struct = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.short_struct_eng = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.short_struct_big5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.pro_hotel_product_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = PromotionDescription()
            _elem124.read(iprot)
            self.promotion_description.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.has_inv_limit = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.inv_left = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.hongbao_records = []
          (_etype128, _size125) = iprot.readListBegin()
          for _i129 in xrange(_size125):
            _elem130 = HongbaoRecord()
            _elem130.read(iprot)
            self.hongbao_records.append(_elem130)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarketingPromotion')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 2)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 4)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.offer_desc is not None:
      oprot.writeFieldBegin('offer_desc', TType.STRING, 5)
      oprot.writeString(self.offer_desc)
      oprot.writeFieldEnd()
    if self.exclusive_type is not None:
      oprot.writeFieldBegin('exclusive_type', TType.I32, 6)
      oprot.writeI32(self.exclusive_type)
      oprot.writeFieldEnd()
    if self.actiontype is not None:
      oprot.writeFieldBegin('actiontype', TType.I32, 7)
      oprot.writeI32(self.actiontype)
      oprot.writeFieldEnd()
    if self.short_struct is not None:
      oprot.writeFieldBegin('short_struct', TType.STRING, 8)
      oprot.writeString(self.short_struct)
      oprot.writeFieldEnd()
    if self.short_struct_eng is not None:
      oprot.writeFieldBegin('short_struct_eng', TType.STRING, 9)
      oprot.writeString(self.short_struct_eng)
      oprot.writeFieldEnd()
    if self.short_struct_big5 is not None:
      oprot.writeFieldBegin('short_struct_big5', TType.STRING, 10)
      oprot.writeString(self.short_struct_big5)
      oprot.writeFieldEnd()
    if self.pro_hotel_product_id is not None:
      oprot.writeFieldBegin('pro_hotel_product_id', TType.I64, 11)
      oprot.writeI64(self.pro_hotel_product_id)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter131 in self.promotion_description:
        iter131.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_inv_limit is not None:
      oprot.writeFieldBegin('has_inv_limit', TType.BOOL, 13)
      oprot.writeBool(self.has_inv_limit)
      oprot.writeFieldEnd()
    if self.inv_left is not None:
      oprot.writeFieldBegin('inv_left', TType.I32, 14)
      oprot.writeI32(self.inv_left)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 15)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.hongbao_records is not None:
      oprot.writeFieldBegin('hongbao_records', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.hongbao_records))
      for iter132 in self.hongbao_records:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.offer_desc)
    value = (value * 31) ^ hash(self.exclusive_type)
    value = (value * 31) ^ hash(self.actiontype)
    value = (value * 31) ^ hash(self.short_struct)
    value = (value * 31) ^ hash(self.short_struct_eng)
    value = (value * 31) ^ hash(self.short_struct_big5)
    value = (value * 31) ^ hash(self.pro_hotel_product_id)
    value = (value * 31) ^ hash(self.promotion_description)
    value = (value * 31) ^ hash(self.has_inv_limit)
    value = (value * 31) ^ hash(self.inv_left)
    value = (value * 31) ^ hash(self.priority)
    value = (value * 31) ^ hash(self.hongbao_records)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Inventory:
  """
  Attributes:
   - date
   - amount
   - status
   - is_over_booking
   - allbuyroom_amount
   - over_sold_limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'amount', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I32, 'is_over_booking', None, None, ), # 4
    (5, TType.I32, 'allbuyroom_amount', None, None, ), # 5
    (6, TType.I32, 'over_sold_limit', None, None, ), # 6
  )

  def __init__(self, date=None, amount=None, status=None, is_over_booking=None, allbuyroom_amount=None, over_sold_limit=None,):
    self.date = date
    self.amount = amount
    self.status = status
    self.is_over_booking = is_over_booking
    self.allbuyroom_amount = allbuyroom_amount
    self.over_sold_limit = over_sold_limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.is_over_booking = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.allbuyroom_amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.over_sold_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Inventory')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 2)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.is_over_booking is not None:
      oprot.writeFieldBegin('is_over_booking', TType.I32, 4)
      oprot.writeI32(self.is_over_booking)
      oprot.writeFieldEnd()
    if self.allbuyroom_amount is not None:
      oprot.writeFieldBegin('allbuyroom_amount', TType.I32, 5)
      oprot.writeI32(self.allbuyroom_amount)
      oprot.writeFieldEnd()
    if self.over_sold_limit is not None:
      oprot.writeFieldBegin('over_sold_limit', TType.I32, 6)
      oprot.writeI32(self.over_sold_limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.is_over_booking)
    value = (value * 31) ^ hash(self.allbuyroom_amount)
    value = (value * 31) ^ hash(self.over_sold_limit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceDays:
  """
  Attributes:
   - status
   - date
   - add_bed_price
   - currency
   - gen_sale_cost_origin
   - gen_sale_price
   - is_add_bed
   - is_hotel_weekend
   - is_price_promotion
   - real_cost_origin
   - sale_cost_origin
   - sale_price
   - sale_price_with_drr
   - weekend_sale_cost_origin
   - weekend_sale_price
   - weekend_price_origin
   - general_price_origin
   - sale_price_with_drr_origin
   - add_bed_price_origin
   - sale_price_with_drr_sub_coupon
   - sale_cost
   - sale_price_with_drr_d_before
   - sale_price_with_drr_origin_d_before
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'date', None, None, ), # 2
    (3, TType.I32, 'add_bed_price', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.DOUBLE, 'gen_sale_cost_origin', None, None, ), # 5
    (6, TType.DOUBLE, 'gen_sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_add_bed', None, None, ), # 7
    (8, TType.BOOL, 'is_hotel_weekend', None, None, ), # 8
    (9, TType.BOOL, 'is_price_promotion', None, None, ), # 9
    (10, TType.DOUBLE, 'real_cost_origin', None, None, ), # 10
    (11, TType.DOUBLE, 'sale_cost_origin', None, None, ), # 11
    (12, TType.DOUBLE, 'sale_price', None, None, ), # 12
    (13, TType.DOUBLE, 'sale_price_with_drr', None, None, ), # 13
    None, # 14
    (15, TType.DOUBLE, 'weekend_sale_cost_origin', None, None, ), # 15
    (16, TType.DOUBLE, 'weekend_sale_price', None, None, ), # 16
    (17, TType.DOUBLE, 'weekend_price_origin', None, None, ), # 17
    (18, TType.DOUBLE, 'general_price_origin', None, None, ), # 18
    (19, TType.DOUBLE, 'sale_price_with_drr_origin', None, None, ), # 19
    (20, TType.DOUBLE, 'add_bed_price_origin', None, None, ), # 20
    (21, TType.DOUBLE, 'sale_price_with_drr_sub_coupon', None, None, ), # 21
    (22, TType.DOUBLE, 'sale_cost', None, 22, ), # 22
    (23, TType.DOUBLE, 'sale_price_with_drr_d_before', None, None, ), # 23
    (24, TType.DOUBLE, 'sale_price_with_drr_origin_d_before', None, None, ), # 24
  )

  def __init__(self, status=None, date=None, add_bed_price=None, currency=None, gen_sale_cost_origin=None, gen_sale_price=None, is_add_bed=None, is_hotel_weekend=None, is_price_promotion=None, real_cost_origin=None, sale_cost_origin=None, sale_price=None, sale_price_with_drr=None, weekend_sale_cost_origin=None, weekend_sale_price=None, weekend_price_origin=None, general_price_origin=None, sale_price_with_drr_origin=None, add_bed_price_origin=None, sale_price_with_drr_sub_coupon=None, sale_cost=thrift_spec[22][4], sale_price_with_drr_d_before=None, sale_price_with_drr_origin_d_before=None,):
    self.status = status
    self.date = date
    self.add_bed_price = add_bed_price
    self.currency = currency
    self.gen_sale_cost_origin = gen_sale_cost_origin
    self.gen_sale_price = gen_sale_price
    self.is_add_bed = is_add_bed
    self.is_hotel_weekend = is_hotel_weekend
    self.is_price_promotion = is_price_promotion
    self.real_cost_origin = real_cost_origin
    self.sale_cost_origin = sale_cost_origin
    self.sale_price = sale_price
    self.sale_price_with_drr = sale_price_with_drr
    self.weekend_sale_cost_origin = weekend_sale_cost_origin
    self.weekend_sale_price = weekend_sale_price
    self.weekend_price_origin = weekend_price_origin
    self.general_price_origin = general_price_origin
    self.sale_price_with_drr_origin = sale_price_with_drr_origin
    self.add_bed_price_origin = add_bed_price_origin
    self.sale_price_with_drr_sub_coupon = sale_price_with_drr_sub_coupon
    self.sale_cost = sale_cost
    self.sale_price_with_drr_d_before = sale_price_with_drr_d_before
    self.sale_price_with_drr_origin_d_before = sale_price_with_drr_origin_d_before

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.add_bed_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.gen_sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.gen_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_add_bed = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hotel_weekend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_price_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.real_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.weekend_sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.weekend_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.weekend_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.general_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.add_bed_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_sub_coupon = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_d_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin_d_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceDays')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 2)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.add_bed_price is not None:
      oprot.writeFieldBegin('add_bed_price', TType.I32, 3)
      oprot.writeI32(self.add_bed_price)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.gen_sale_cost_origin is not None:
      oprot.writeFieldBegin('gen_sale_cost_origin', TType.DOUBLE, 5)
      oprot.writeDouble(self.gen_sale_cost_origin)
      oprot.writeFieldEnd()
    if self.gen_sale_price is not None:
      oprot.writeFieldBegin('gen_sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.gen_sale_price)
      oprot.writeFieldEnd()
    if self.is_add_bed is not None:
      oprot.writeFieldBegin('is_add_bed', TType.BOOL, 7)
      oprot.writeBool(self.is_add_bed)
      oprot.writeFieldEnd()
    if self.is_hotel_weekend is not None:
      oprot.writeFieldBegin('is_hotel_weekend', TType.BOOL, 8)
      oprot.writeBool(self.is_hotel_weekend)
      oprot.writeFieldEnd()
    if self.is_price_promotion is not None:
      oprot.writeFieldBegin('is_price_promotion', TType.BOOL, 9)
      oprot.writeBool(self.is_price_promotion)
      oprot.writeFieldEnd()
    if self.real_cost_origin is not None:
      oprot.writeFieldBegin('real_cost_origin', TType.DOUBLE, 10)
      oprot.writeDouble(self.real_cost_origin)
      oprot.writeFieldEnd()
    if self.sale_cost_origin is not None:
      oprot.writeFieldBegin('sale_cost_origin', TType.DOUBLE, 11)
      oprot.writeDouble(self.sale_cost_origin)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 12)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr is not None:
      oprot.writeFieldBegin('sale_price_with_drr', TType.DOUBLE, 13)
      oprot.writeDouble(self.sale_price_with_drr)
      oprot.writeFieldEnd()
    if self.weekend_sale_cost_origin is not None:
      oprot.writeFieldBegin('weekend_sale_cost_origin', TType.DOUBLE, 15)
      oprot.writeDouble(self.weekend_sale_cost_origin)
      oprot.writeFieldEnd()
    if self.weekend_sale_price is not None:
      oprot.writeFieldBegin('weekend_sale_price', TType.DOUBLE, 16)
      oprot.writeDouble(self.weekend_sale_price)
      oprot.writeFieldEnd()
    if self.weekend_price_origin is not None:
      oprot.writeFieldBegin('weekend_price_origin', TType.DOUBLE, 17)
      oprot.writeDouble(self.weekend_price_origin)
      oprot.writeFieldEnd()
    if self.general_price_origin is not None:
      oprot.writeFieldBegin('general_price_origin', TType.DOUBLE, 18)
      oprot.writeDouble(self.general_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin', TType.DOUBLE, 19)
      oprot.writeDouble(self.sale_price_with_drr_origin)
      oprot.writeFieldEnd()
    if self.add_bed_price_origin is not None:
      oprot.writeFieldBegin('add_bed_price_origin', TType.DOUBLE, 20)
      oprot.writeDouble(self.add_bed_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_sub_coupon is not None:
      oprot.writeFieldBegin('sale_price_with_drr_sub_coupon', TType.DOUBLE, 21)
      oprot.writeDouble(self.sale_price_with_drr_sub_coupon)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 22)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_d_before is not None:
      oprot.writeFieldBegin('sale_price_with_drr_d_before', TType.DOUBLE, 23)
      oprot.writeDouble(self.sale_price_with_drr_d_before)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin_d_before is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin_d_before', TType.DOUBLE, 24)
      oprot.writeDouble(self.sale_price_with_drr_origin_d_before)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.add_bed_price)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.gen_sale_cost_origin)
    value = (value * 31) ^ hash(self.gen_sale_price)
    value = (value * 31) ^ hash(self.is_add_bed)
    value = (value * 31) ^ hash(self.is_hotel_weekend)
    value = (value * 31) ^ hash(self.is_price_promotion)
    value = (value * 31) ^ hash(self.real_cost_origin)
    value = (value * 31) ^ hash(self.sale_cost_origin)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.sale_price_with_drr)
    value = (value * 31) ^ hash(self.weekend_sale_cost_origin)
    value = (value * 31) ^ hash(self.weekend_sale_price)
    value = (value * 31) ^ hash(self.weekend_price_origin)
    value = (value * 31) ^ hash(self.general_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin)
    value = (value * 31) ^ hash(self.add_bed_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_sub_coupon)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price_with_drr_d_before)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin_d_before)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Price:
  """
  Attributes:
   - audit_status
   - is_effective
   - day_prices
   - price_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'audit_status', None, None, ), # 1
    (2, TType.BOOL, 'is_effective', None, None, ), # 2
    None, # 3
    (4, TType.LIST, 'day_prices', (TType.STRUCT,(PriceDays, PriceDays.thrift_spec)), None, ), # 4
    (5, TType.I32, 'price_status', None, None, ), # 5
  )

  def __init__(self, audit_status=None, is_effective=None, day_prices=None, price_status=None,):
    self.audit_status = audit_status
    self.is_effective = is_effective
    self.day_prices = day_prices
    self.price_status = price_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.audit_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_effective = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.day_prices = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = PriceDays()
            _elem138.read(iprot)
            self.day_prices.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.price_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Price')
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.I32, 1)
      oprot.writeI32(self.audit_status)
      oprot.writeFieldEnd()
    if self.is_effective is not None:
      oprot.writeFieldBegin('is_effective', TType.BOOL, 2)
      oprot.writeBool(self.is_effective)
      oprot.writeFieldEnd()
    if self.day_prices is not None:
      oprot.writeFieldBegin('day_prices', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.day_prices))
      for iter139 in self.day_prices:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_status is not None:
      oprot.writeFieldBegin('price_status', TType.I32, 5)
      oprot.writeI32(self.price_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.is_effective)
    value = (value * 31) ^ hash(self.day_prices)
    value = (value * 31) ^ hash(self.price_status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelProductRelation:
  """
  Attributes:
   - product_id
   - sroom_id
   - rp_id
   - relation_type
   - relation_product_price
   - mroom_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_id', None, None, ), # 1
    (2, TType.I32, 'sroom_id', None, None, ), # 2
    (3, TType.I32, 'rp_id', None, None, ), # 3
    (4, TType.I32, 'relation_type', None, None, ), # 4
    (5, TType.DOUBLE, 'relation_product_price', None, None, ), # 5
    (6, TType.I32, 'mroom_id', None, None, ), # 6
  )

  def __init__(self, product_id=None, sroom_id=None, rp_id=None, relation_type=None, relation_product_price=None, mroom_id=None,):
    self.product_id = product_id
    self.sroom_id = sroom_id
    self.rp_id = rp_id
    self.relation_type = relation_type
    self.relation_product_price = relation_product_price
    self.mroom_id = mroom_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.relation_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.relation_product_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelProductRelation')
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 1)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 2)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 3)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.relation_type is not None:
      oprot.writeFieldBegin('relation_type', TType.I32, 4)
      oprot.writeI32(self.relation_type)
      oprot.writeFieldEnd()
    if self.relation_product_price is not None:
      oprot.writeFieldBegin('relation_product_price', TType.DOUBLE, 5)
      oprot.writeDouble(self.relation_product_price)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 6)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.relation_type is None:
      raise TProtocol.TProtocolException(message='Required field relation_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.relation_type)
    value = (value * 31) ^ hash(self.relation_product_price)
    value = (value * 31) ^ hash(self.mroom_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrrAttr:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrrAttr')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrrMsg:
  """
  Attributes:
   - id
   - drrAttr
   - date_type
   - start_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.LIST, 'drrAttr', (TType.STRUCT,(DrrAttr, DrrAttr.thrift_spec)), None, ), # 2
    (3, TType.I32, 'date_type', None, None, ), # 3
    (4, TType.I64, 'start_date', None, None, ), # 4
    (5, TType.I64, 'end_date', None, None, ), # 5
  )

  def __init__(self, id=None, drrAttr=None, date_type=None, start_date=None, end_date=None,):
    self.id = id
    self.drrAttr = drrAttr
    self.date_type = date_type
    self.start_date = start_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.drrAttr = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = DrrAttr()
            _elem145.read(iprot)
            self.drrAttr.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.start_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrrMsg')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.drrAttr is not None:
      oprot.writeFieldBegin('drrAttr', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.drrAttr))
      for iter146 in self.drrAttr:
        iter146.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 3)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I64, 4)
      oprot.writeI64(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 5)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.date_type is None:
      raise TProtocol.TProtocolException(message='Required field date_type is unset!')
    if self.start_date is None:
      raise TProtocol.TProtocolException(message='Required field start_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.drrAttr)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DayMarketingPromotion:
  """
  Attributes:
   - date
   - day_marketing_promotion
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.LIST, 'day_marketing_promotion', (TType.STRUCT,(MarketingPromotion, MarketingPromotion.thrift_spec)), None, ), # 2
  )

  def __init__(self, date=None, day_marketing_promotion=None,):
    self.date = date
    self.day_marketing_promotion = day_marketing_promotion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.day_marketing_promotion = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = MarketingPromotion()
            _elem152.read(iprot)
            self.day_marketing_promotion.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DayMarketingPromotion')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.day_marketing_promotion is not None:
      oprot.writeFieldBegin('day_marketing_promotion', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.day_marketing_promotion))
      for iter153 in self.day_marketing_promotion:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.day_marketing_promotion)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TicketInfoes:
  """
  Attributes:
   - resource_id
   - resource_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'resource_id', None, None, ), # 1
    (2, TType.I32, 'resource_count', None, None, ), # 2
  )

  def __init__(self, resource_id=None, resource_count=None,):
    self.resource_id = resource_id
    self.resource_count = resource_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.resource_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.resource_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TicketInfoes')
    if self.resource_id is not None:
      oprot.writeFieldBegin('resource_id', TType.I64, 1)
      oprot.writeI64(self.resource_id)
      oprot.writeFieldEnd()
    if self.resource_count is not None:
      oprot.writeFieldBegin('resource_count', TType.I32, 2)
      oprot.writeI32(self.resource_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resource_id)
    value = (value * 31) ^ hash(self.resource_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Product:
  """
  Attributes:
   - sroomtype_id
   - shotel_id
   - supplier_id
   - online_search_type
   - sroomtype_status
   - has_breakfast
   - rateplan
   - rp_code
   - room_inventory_days
   - room_num_status
   - price
   - marketing_promotions
   - gifts
   - relations
   - supplier_type
   - shotel_booking_rules
   - is_freesale
   - firstnight_has_discount
   - firstnight_discount
   - firstnight_discount_upper
   - freesale_num
   - cooperation_type
   - supplier_name
   - supplier_short_name
   - supplier_alias
   - supplier_telphone
   - confirm_way
   - shotel_contacter
   - hours_room_info
   - supplier_fax
   - drrMsg
   - weekend_start
   - weekend_end
   - day_marketing_promotions
   - price_origin
   - price_sub_coupon
   - is_min_price_product
   - weight
   - id
   - cvr
   - supplier_confirm_avg_time
   - rateplan_structure_name_cn
   - is_resale_product
   - order_id
   - sign_type
   - cost_point
   - hotel_service_point
   - total_point
   - commission_value
   - is_majia
   - majia_id
   - derivative_type
   - is_hotel_ticket_product
   - force_show
   - ticket_resource_infoes
   - is_support_flash_live
   - is_support_credit_live
   - is_dc_product
   - extras
   - resale_product_original_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sroomtype_id', None, None, ), # 1
    (2, TType.I64, 'shotel_id', None, None, ), # 2
    (3, TType.I64, 'supplier_id', None, None, ), # 3
    (4, TType.I32, 'online_search_type', None, None, ), # 4
    (5, TType.BOOL, 'sroomtype_status', None, None, ), # 5
    (6, TType.BOOL, 'has_breakfast', None, None, ), # 6
    (7, TType.STRUCT, 'rateplan', (RPRatePlan, RPRatePlan.thrift_spec), None, ), # 7
    (8, TType.STRING, 'rp_code', None, None, ), # 8
    (9, TType.LIST, 'room_inventory_days', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 9
    (10, TType.I32, 'room_num_status', None, None, ), # 10
    (11, TType.STRUCT, 'price', (Price, Price.thrift_spec), None, ), # 11
    (12, TType.LIST, 'marketing_promotions', (TType.STRUCT,(MarketingPromotion, MarketingPromotion.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'gifts', (TType.STRUCT,(Gift, Gift.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'relations', (HotelProductRelation, HotelProductRelation.thrift_spec), None, ), # 14
    (15, TType.I64, 'supplier_type', None, None, ), # 15
    (16, TType.LIST, 'shotel_booking_rules', (TType.STRUCT,(SHotelBookingRule, SHotelBookingRule.thrift_spec)), None, ), # 16
    (17, TType.BOOL, 'is_freesale', None, None, ), # 17
    (18, TType.BOOL, 'firstnight_has_discount', None, None, ), # 18
    (19, TType.DOUBLE, 'firstnight_discount', None, None, ), # 19
    (20, TType.I32, 'firstnight_discount_upper', None, None, ), # 20
    (21, TType.I32, 'freesale_num', None, None, ), # 21
    (22, TType.I32, 'cooperation_type', None, None, ), # 22
    (23, TType.STRING, 'supplier_name', None, None, ), # 23
    (24, TType.STRING, 'supplier_short_name', None, None, ), # 24
    (25, TType.STRING, 'supplier_alias', None, None, ), # 25
    (26, TType.STRING, 'supplier_telphone', None, None, ), # 26
    (27, TType.I64, 'confirm_way', None, None, ), # 27
    (28, TType.STRING, 'shotel_contacter', None, None, ), # 28
    (29, TType.STRUCT, 'hours_room_info', (HoursRoomInfo, HoursRoomInfo.thrift_spec), None, ), # 29
    (30, TType.STRING, 'supplier_fax', None, None, ), # 30
    None, # 31
    (32, TType.STRUCT, 'drrMsg', (DrrMsg, DrrMsg.thrift_spec), None, ), # 32
    (33, TType.I32, 'weekend_start', None, None, ), # 33
    (34, TType.I32, 'weekend_end', None, None, ), # 34
    (35, TType.LIST, 'day_marketing_promotions', (TType.STRUCT,(DayMarketingPromotion, DayMarketingPromotion.thrift_spec)), None, ), # 35
    (36, TType.I32, 'price_origin', None, None, ), # 36
    (37, TType.I32, 'price_sub_coupon', None, None, ), # 37
    (38, TType.BOOL, 'is_min_price_product', None, None, ), # 38
    (39, TType.DOUBLE, 'weight', None, None, ), # 39
    (40, TType.I32, 'id', None, None, ), # 40
    (41, TType.DOUBLE, 'cvr', None, None, ), # 41
    (42, TType.I64, 'supplier_confirm_avg_time', None, None, ), # 42
    (43, TType.STRING, 'rateplan_structure_name_cn', None, None, ), # 43
    (44, TType.BOOL, 'is_resale_product', None, None, ), # 44
    (45, TType.I64, 'order_id', None, None, ), # 45
    (46, TType.I32, 'sign_type', None, None, ), # 46
    (47, TType.DOUBLE, 'cost_point', None, None, ), # 47
    (48, TType.DOUBLE, 'hotel_service_point', None, None, ), # 48
    (49, TType.DOUBLE, 'total_point', None, None, ), # 49
    (50, TType.DOUBLE, 'commission_value', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    (134, TType.BOOL, 'is_majia', None, None, ), # 134
    (135, TType.STRING, 'majia_id', None, None, ), # 135
    (136, TType.I32, 'derivative_type', None, None, ), # 136
    (137, TType.BOOL, 'is_hotel_ticket_product', None, None, ), # 137
    (138, TType.BYTE, 'force_show', None, None, ), # 138
    (139, TType.LIST, 'ticket_resource_infoes', (TType.STRUCT,(TicketInfoes, TicketInfoes.thrift_spec)), None, ), # 139
    (140, TType.BOOL, 'is_support_flash_live', None, None, ), # 140
    (141, TType.BOOL, 'is_support_credit_live', None, None, ), # 141
    (142, TType.BOOL, 'is_dc_product', None, None, ), # 142
    (143, TType.DOUBLE, 'extras', None, None, ), # 143
    (144, TType.I32, 'resale_product_original_price', None, None, ), # 144
  )

  def __init__(self, sroomtype_id=None, shotel_id=None, supplier_id=None, online_search_type=None, sroomtype_status=None, has_breakfast=None, rateplan=None, rp_code=None, room_inventory_days=None, room_num_status=None, price=None, marketing_promotions=None, gifts=None, relations=None, supplier_type=None, shotel_booking_rules=None, is_freesale=None, firstnight_has_discount=None, firstnight_discount=None, firstnight_discount_upper=None, freesale_num=None, cooperation_type=None, supplier_name=None, supplier_short_name=None, supplier_alias=None, supplier_telphone=None, confirm_way=None, shotel_contacter=None, hours_room_info=None, supplier_fax=None, drrMsg=None, weekend_start=None, weekend_end=None, day_marketing_promotions=None, price_origin=None, price_sub_coupon=None, is_min_price_product=None, weight=None, id=None, cvr=None, supplier_confirm_avg_time=None, rateplan_structure_name_cn=None, is_resale_product=None, order_id=None, sign_type=None, cost_point=None, hotel_service_point=None, total_point=None, commission_value=None, is_majia=None, majia_id=None, derivative_type=None, is_hotel_ticket_product=None, force_show=None, ticket_resource_infoes=None, is_support_flash_live=None, is_support_credit_live=None, is_dc_product=None, extras=None, resale_product_original_price=None,):
    self.sroomtype_id = sroomtype_id
    self.shotel_id = shotel_id
    self.supplier_id = supplier_id
    self.online_search_type = online_search_type
    self.sroomtype_status = sroomtype_status
    self.has_breakfast = has_breakfast
    self.rateplan = rateplan
    self.rp_code = rp_code
    self.room_inventory_days = room_inventory_days
    self.room_num_status = room_num_status
    self.price = price
    self.marketing_promotions = marketing_promotions
    self.gifts = gifts
    self.relations = relations
    self.supplier_type = supplier_type
    self.shotel_booking_rules = shotel_booking_rules
    self.is_freesale = is_freesale
    self.firstnight_has_discount = firstnight_has_discount
    self.firstnight_discount = firstnight_discount
    self.firstnight_discount_upper = firstnight_discount_upper
    self.freesale_num = freesale_num
    self.cooperation_type = cooperation_type
    self.supplier_name = supplier_name
    self.supplier_short_name = supplier_short_name
    self.supplier_alias = supplier_alias
    self.supplier_telphone = supplier_telphone
    self.confirm_way = confirm_way
    self.shotel_contacter = shotel_contacter
    self.hours_room_info = hours_room_info
    self.supplier_fax = supplier_fax
    self.drrMsg = drrMsg
    self.weekend_start = weekend_start
    self.weekend_end = weekend_end
    self.day_marketing_promotions = day_marketing_promotions
    self.price_origin = price_origin
    self.price_sub_coupon = price_sub_coupon
    self.is_min_price_product = is_min_price_product
    self.weight = weight
    self.id = id
    self.cvr = cvr
    self.supplier_confirm_avg_time = supplier_confirm_avg_time
    self.rateplan_structure_name_cn = rateplan_structure_name_cn
    self.is_resale_product = is_resale_product
    self.order_id = order_id
    self.sign_type = sign_type
    self.cost_point = cost_point
    self.hotel_service_point = hotel_service_point
    self.total_point = total_point
    self.commission_value = commission_value
    self.is_majia = is_majia
    self.majia_id = majia_id
    self.derivative_type = derivative_type
    self.is_hotel_ticket_product = is_hotel_ticket_product
    self.force_show = force_show
    self.ticket_resource_infoes = ticket_resource_infoes
    self.is_support_flash_live = is_support_flash_live
    self.is_support_credit_live = is_support_credit_live
    self.is_dc_product = is_dc_product
    self.extras = extras
    self.resale_product_original_price = resale_product_original_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sroomtype_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.supplier_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.online_search_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.sroomtype_status = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.has_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.rateplan = RPRatePlan()
          self.rateplan.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.rp_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.room_inventory_days = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = Inventory()
            _elem159.read(iprot)
            self.room_inventory_days.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.room_num_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.price = Price()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.marketing_promotions = []
          (_etype163, _size160) = iprot.readListBegin()
          for _i164 in xrange(_size160):
            _elem165 = MarketingPromotion()
            _elem165.read(iprot)
            self.marketing_promotions.append(_elem165)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.gifts = []
          (_etype169, _size166) = iprot.readListBegin()
          for _i170 in xrange(_size166):
            _elem171 = Gift()
            _elem171.read(iprot)
            self.gifts.append(_elem171)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.relations = HotelProductRelation()
          self.relations.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.supplier_type = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.shotel_booking_rules = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = SHotelBookingRule()
            _elem177.read(iprot)
            self.shotel_booking_rules.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.is_freesale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.firstnight_has_discount = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.firstnight_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.firstnight_discount_upper = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.freesale_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.cooperation_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.supplier_short_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.supplier_alias = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.supplier_telphone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          self.confirm_way = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.shotel_contacter = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.hours_room_info = HoursRoomInfo()
          self.hours_room_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.supplier_fax = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRUCT:
          self.drrMsg = DrrMsg()
          self.drrMsg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.weekend_start = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.weekend_end = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.LIST:
          self.day_marketing_promotions = []
          (_etype181, _size178) = iprot.readListBegin()
          for _i182 in xrange(_size178):
            _elem183 = DayMarketingPromotion()
            _elem183.read(iprot)
            self.day_marketing_promotions.append(_elem183)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.price_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.BOOL:
          self.is_min_price_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.DOUBLE:
          self.cvr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I64:
          self.supplier_confirm_avg_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.rateplan_structure_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.BOOL:
          self.is_resale_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.sign_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.DOUBLE:
          self.cost_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.DOUBLE:
          self.hotel_service_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.DOUBLE:
          self.total_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.DOUBLE:
          self.commission_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 134:
        if ftype == TType.BOOL:
          self.is_majia = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 135:
        if ftype == TType.STRING:
          self.majia_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 136:
        if ftype == TType.I32:
          self.derivative_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 137:
        if ftype == TType.BOOL:
          self.is_hotel_ticket_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 138:
        if ftype == TType.BYTE:
          self.force_show = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 139:
        if ftype == TType.LIST:
          self.ticket_resource_infoes = []
          (_etype187, _size184) = iprot.readListBegin()
          for _i188 in xrange(_size184):
            _elem189 = TicketInfoes()
            _elem189.read(iprot)
            self.ticket_resource_infoes.append(_elem189)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 140:
        if ftype == TType.BOOL:
          self.is_support_flash_live = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 141:
        if ftype == TType.BOOL:
          self.is_support_credit_live = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 142:
        if ftype == TType.BOOL:
          self.is_dc_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 143:
        if ftype == TType.DOUBLE:
          self.extras = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 144:
        if ftype == TType.I32:
          self.resale_product_original_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Product')
    if self.sroomtype_id is not None:
      oprot.writeFieldBegin('sroomtype_id', TType.I64, 1)
      oprot.writeI64(self.sroomtype_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 2)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I64, 3)
      oprot.writeI64(self.supplier_id)
      oprot.writeFieldEnd()
    if self.online_search_type is not None:
      oprot.writeFieldBegin('online_search_type', TType.I32, 4)
      oprot.writeI32(self.online_search_type)
      oprot.writeFieldEnd()
    if self.sroomtype_status is not None:
      oprot.writeFieldBegin('sroomtype_status', TType.BOOL, 5)
      oprot.writeBool(self.sroomtype_status)
      oprot.writeFieldEnd()
    if self.has_breakfast is not None:
      oprot.writeFieldBegin('has_breakfast', TType.BOOL, 6)
      oprot.writeBool(self.has_breakfast)
      oprot.writeFieldEnd()
    if self.rateplan is not None:
      oprot.writeFieldBegin('rateplan', TType.STRUCT, 7)
      self.rateplan.write(oprot)
      oprot.writeFieldEnd()
    if self.rp_code is not None:
      oprot.writeFieldBegin('rp_code', TType.STRING, 8)
      oprot.writeString(self.rp_code)
      oprot.writeFieldEnd()
    if self.room_inventory_days is not None:
      oprot.writeFieldBegin('room_inventory_days', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.room_inventory_days))
      for iter190 in self.room_inventory_days:
        iter190.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.room_num_status is not None:
      oprot.writeFieldBegin('room_num_status', TType.I32, 10)
      oprot.writeI32(self.room_num_status)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 11)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.marketing_promotions is not None:
      oprot.writeFieldBegin('marketing_promotions', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.marketing_promotions))
      for iter191 in self.marketing_promotions:
        iter191.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gifts is not None:
      oprot.writeFieldBegin('gifts', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.gifts))
      for iter192 in self.gifts:
        iter192.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relations is not None:
      oprot.writeFieldBegin('relations', TType.STRUCT, 14)
      self.relations.write(oprot)
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.I64, 15)
      oprot.writeI64(self.supplier_type)
      oprot.writeFieldEnd()
    if self.shotel_booking_rules is not None:
      oprot.writeFieldBegin('shotel_booking_rules', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_booking_rules))
      for iter193 in self.shotel_booking_rules:
        iter193.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_freesale is not None:
      oprot.writeFieldBegin('is_freesale', TType.BOOL, 17)
      oprot.writeBool(self.is_freesale)
      oprot.writeFieldEnd()
    if self.firstnight_has_discount is not None:
      oprot.writeFieldBegin('firstnight_has_discount', TType.BOOL, 18)
      oprot.writeBool(self.firstnight_has_discount)
      oprot.writeFieldEnd()
    if self.firstnight_discount is not None:
      oprot.writeFieldBegin('firstnight_discount', TType.DOUBLE, 19)
      oprot.writeDouble(self.firstnight_discount)
      oprot.writeFieldEnd()
    if self.firstnight_discount_upper is not None:
      oprot.writeFieldBegin('firstnight_discount_upper', TType.I32, 20)
      oprot.writeI32(self.firstnight_discount_upper)
      oprot.writeFieldEnd()
    if self.freesale_num is not None:
      oprot.writeFieldBegin('freesale_num', TType.I32, 21)
      oprot.writeI32(self.freesale_num)
      oprot.writeFieldEnd()
    if self.cooperation_type is not None:
      oprot.writeFieldBegin('cooperation_type', TType.I32, 22)
      oprot.writeI32(self.cooperation_type)
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 23)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.supplier_short_name is not None:
      oprot.writeFieldBegin('supplier_short_name', TType.STRING, 24)
      oprot.writeString(self.supplier_short_name)
      oprot.writeFieldEnd()
    if self.supplier_alias is not None:
      oprot.writeFieldBegin('supplier_alias', TType.STRING, 25)
      oprot.writeString(self.supplier_alias)
      oprot.writeFieldEnd()
    if self.supplier_telphone is not None:
      oprot.writeFieldBegin('supplier_telphone', TType.STRING, 26)
      oprot.writeString(self.supplier_telphone)
      oprot.writeFieldEnd()
    if self.confirm_way is not None:
      oprot.writeFieldBegin('confirm_way', TType.I64, 27)
      oprot.writeI64(self.confirm_way)
      oprot.writeFieldEnd()
    if self.shotel_contacter is not None:
      oprot.writeFieldBegin('shotel_contacter', TType.STRING, 28)
      oprot.writeString(self.shotel_contacter)
      oprot.writeFieldEnd()
    if self.hours_room_info is not None:
      oprot.writeFieldBegin('hours_room_info', TType.STRUCT, 29)
      self.hours_room_info.write(oprot)
      oprot.writeFieldEnd()
    if self.supplier_fax is not None:
      oprot.writeFieldBegin('supplier_fax', TType.STRING, 30)
      oprot.writeString(self.supplier_fax)
      oprot.writeFieldEnd()
    if self.drrMsg is not None:
      oprot.writeFieldBegin('drrMsg', TType.STRUCT, 32)
      self.drrMsg.write(oprot)
      oprot.writeFieldEnd()
    if self.weekend_start is not None:
      oprot.writeFieldBegin('weekend_start', TType.I32, 33)
      oprot.writeI32(self.weekend_start)
      oprot.writeFieldEnd()
    if self.weekend_end is not None:
      oprot.writeFieldBegin('weekend_end', TType.I32, 34)
      oprot.writeI32(self.weekend_end)
      oprot.writeFieldEnd()
    if self.day_marketing_promotions is not None:
      oprot.writeFieldBegin('day_marketing_promotions', TType.LIST, 35)
      oprot.writeListBegin(TType.STRUCT, len(self.day_marketing_promotions))
      for iter194 in self.day_marketing_promotions:
        iter194.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_origin is not None:
      oprot.writeFieldBegin('price_origin', TType.I32, 36)
      oprot.writeI32(self.price_origin)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.I32, 37)
      oprot.writeI32(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.is_min_price_product is not None:
      oprot.writeFieldBegin('is_min_price_product', TType.BOOL, 38)
      oprot.writeBool(self.is_min_price_product)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 39)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 40)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.cvr is not None:
      oprot.writeFieldBegin('cvr', TType.DOUBLE, 41)
      oprot.writeDouble(self.cvr)
      oprot.writeFieldEnd()
    if self.supplier_confirm_avg_time is not None:
      oprot.writeFieldBegin('supplier_confirm_avg_time', TType.I64, 42)
      oprot.writeI64(self.supplier_confirm_avg_time)
      oprot.writeFieldEnd()
    if self.rateplan_structure_name_cn is not None:
      oprot.writeFieldBegin('rateplan_structure_name_cn', TType.STRING, 43)
      oprot.writeString(self.rateplan_structure_name_cn)
      oprot.writeFieldEnd()
    if self.is_resale_product is not None:
      oprot.writeFieldBegin('is_resale_product', TType.BOOL, 44)
      oprot.writeBool(self.is_resale_product)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 45)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.sign_type is not None:
      oprot.writeFieldBegin('sign_type', TType.I32, 46)
      oprot.writeI32(self.sign_type)
      oprot.writeFieldEnd()
    if self.cost_point is not None:
      oprot.writeFieldBegin('cost_point', TType.DOUBLE, 47)
      oprot.writeDouble(self.cost_point)
      oprot.writeFieldEnd()
    if self.hotel_service_point is not None:
      oprot.writeFieldBegin('hotel_service_point', TType.DOUBLE, 48)
      oprot.writeDouble(self.hotel_service_point)
      oprot.writeFieldEnd()
    if self.total_point is not None:
      oprot.writeFieldBegin('total_point', TType.DOUBLE, 49)
      oprot.writeDouble(self.total_point)
      oprot.writeFieldEnd()
    if self.commission_value is not None:
      oprot.writeFieldBegin('commission_value', TType.DOUBLE, 50)
      oprot.writeDouble(self.commission_value)
      oprot.writeFieldEnd()
    if self.is_majia is not None:
      oprot.writeFieldBegin('is_majia', TType.BOOL, 134)
      oprot.writeBool(self.is_majia)
      oprot.writeFieldEnd()
    if self.majia_id is not None:
      oprot.writeFieldBegin('majia_id', TType.STRING, 135)
      oprot.writeString(self.majia_id)
      oprot.writeFieldEnd()
    if self.derivative_type is not None:
      oprot.writeFieldBegin('derivative_type', TType.I32, 136)
      oprot.writeI32(self.derivative_type)
      oprot.writeFieldEnd()
    if self.is_hotel_ticket_product is not None:
      oprot.writeFieldBegin('is_hotel_ticket_product', TType.BOOL, 137)
      oprot.writeBool(self.is_hotel_ticket_product)
      oprot.writeFieldEnd()
    if self.force_show is not None:
      oprot.writeFieldBegin('force_show', TType.BYTE, 138)
      oprot.writeByte(self.force_show)
      oprot.writeFieldEnd()
    if self.ticket_resource_infoes is not None:
      oprot.writeFieldBegin('ticket_resource_infoes', TType.LIST, 139)
      oprot.writeListBegin(TType.STRUCT, len(self.ticket_resource_infoes))
      for iter195 in self.ticket_resource_infoes:
        iter195.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_support_flash_live is not None:
      oprot.writeFieldBegin('is_support_flash_live', TType.BOOL, 140)
      oprot.writeBool(self.is_support_flash_live)
      oprot.writeFieldEnd()
    if self.is_support_credit_live is not None:
      oprot.writeFieldBegin('is_support_credit_live', TType.BOOL, 141)
      oprot.writeBool(self.is_support_credit_live)
      oprot.writeFieldEnd()
    if self.is_dc_product is not None:
      oprot.writeFieldBegin('is_dc_product', TType.BOOL, 142)
      oprot.writeBool(self.is_dc_product)
      oprot.writeFieldEnd()
    if self.extras is not None:
      oprot.writeFieldBegin('extras', TType.DOUBLE, 143)
      oprot.writeDouble(self.extras)
      oprot.writeFieldEnd()
    if self.resale_product_original_price is not None:
      oprot.writeFieldBegin('resale_product_original_price', TType.I32, 144)
      oprot.writeI32(self.resale_product_original_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroomtype_id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.online_search_type)
    value = (value * 31) ^ hash(self.sroomtype_status)
    value = (value * 31) ^ hash(self.has_breakfast)
    value = (value * 31) ^ hash(self.rateplan)
    value = (value * 31) ^ hash(self.rp_code)
    value = (value * 31) ^ hash(self.room_inventory_days)
    value = (value * 31) ^ hash(self.room_num_status)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.marketing_promotions)
    value = (value * 31) ^ hash(self.gifts)
    value = (value * 31) ^ hash(self.relations)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.shotel_booking_rules)
    value = (value * 31) ^ hash(self.is_freesale)
    value = (value * 31) ^ hash(self.firstnight_has_discount)
    value = (value * 31) ^ hash(self.firstnight_discount)
    value = (value * 31) ^ hash(self.firstnight_discount_upper)
    value = (value * 31) ^ hash(self.freesale_num)
    value = (value * 31) ^ hash(self.cooperation_type)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.supplier_short_name)
    value = (value * 31) ^ hash(self.supplier_alias)
    value = (value * 31) ^ hash(self.supplier_telphone)
    value = (value * 31) ^ hash(self.confirm_way)
    value = (value * 31) ^ hash(self.shotel_contacter)
    value = (value * 31) ^ hash(self.hours_room_info)
    value = (value * 31) ^ hash(self.supplier_fax)
    value = (value * 31) ^ hash(self.drrMsg)
    value = (value * 31) ^ hash(self.weekend_start)
    value = (value * 31) ^ hash(self.weekend_end)
    value = (value * 31) ^ hash(self.day_marketing_promotions)
    value = (value * 31) ^ hash(self.price_origin)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.is_min_price_product)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.cvr)
    value = (value * 31) ^ hash(self.supplier_confirm_avg_time)
    value = (value * 31) ^ hash(self.rateplan_structure_name_cn)
    value = (value * 31) ^ hash(self.is_resale_product)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.sign_type)
    value = (value * 31) ^ hash(self.cost_point)
    value = (value * 31) ^ hash(self.hotel_service_point)
    value = (value * 31) ^ hash(self.total_point)
    value = (value * 31) ^ hash(self.commission_value)
    value = (value * 31) ^ hash(self.is_majia)
    value = (value * 31) ^ hash(self.majia_id)
    value = (value * 31) ^ hash(self.derivative_type)
    value = (value * 31) ^ hash(self.is_hotel_ticket_product)
    value = (value * 31) ^ hash(self.force_show)
    value = (value * 31) ^ hash(self.ticket_resource_infoes)
    value = (value * 31) ^ hash(self.is_support_flash_live)
    value = (value * 31) ^ hash(self.is_support_credit_live)
    value = (value * 31) ^ hash(self.is_dc_product)
    value = (value * 31) ^ hash(self.extras)
    value = (value * 31) ^ hash(self.resale_product_original_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectedProduct:
  """
  Attributes:
   - shotel_id
   - sroom_id
   - rate_plan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'sroom_id', None, None, ), # 2
    (3, TType.I32, 'rate_plan_id', None, None, ), # 3
  )

  def __init__(self, shotel_id=None, sroom_id=None, rate_plan_id=None,):
    self.shotel_id = shotel_id
    self.sroom_id = sroom_id
    self.rate_plan_id = rate_plan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.rate_plan_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectedProduct')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 2)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I32, 3)
      oprot.writeI32(self.rate_plan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.rate_plan_id is None:
      raise TProtocol.TProtocolException(message='Required field rate_plan_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rate_plan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MHotelAttr:
  """
  Attributes:
   - mhotel_id
   - mroom_filter
   - selected_mroom_ids
   - selected_product_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mhotel_id', None, None, ), # 1
    (2, TType.BOOL, 'mroom_filter', None, None, ), # 2
    (3, TType.LIST, 'selected_mroom_ids', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'selected_product_ids', (TType.STRUCT,(SelectedProduct, SelectedProduct.thrift_spec)), None, ), # 4
  )

  def __init__(self, mhotel_id=None, mroom_filter=None, selected_mroom_ids=None, selected_product_ids=None,):
    self.mhotel_id = mhotel_id
    self.mroom_filter = mroom_filter
    self.selected_mroom_ids = selected_mroom_ids
    self.selected_product_ids = selected_product_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mhotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.mroom_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.selected_mroom_ids = []
          (_etype199, _size196) = iprot.readListBegin()
          for _i200 in xrange(_size196):
            _elem201 = iprot.readI32()
            self.selected_mroom_ids.append(_elem201)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.selected_product_ids = []
          (_etype205, _size202) = iprot.readListBegin()
          for _i206 in xrange(_size202):
            _elem207 = SelectedProduct()
            _elem207.read(iprot)
            self.selected_product_ids.append(_elem207)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MHotelAttr')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I64, 1)
      oprot.writeI64(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.mroom_filter is not None:
      oprot.writeFieldBegin('mroom_filter', TType.BOOL, 2)
      oprot.writeBool(self.mroom_filter)
      oprot.writeFieldEnd()
    if self.selected_mroom_ids is not None:
      oprot.writeFieldBegin('selected_mroom_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.selected_mroom_ids))
      for iter208 in self.selected_mroom_ids:
        oprot.writeI32(iter208)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.selected_product_ids is not None:
      oprot.writeFieldBegin('selected_product_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.selected_product_ids))
      for iter209 in self.selected_product_ids:
        iter209.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.mroom_filter)
    value = (value * 31) ^ hash(self.selected_mroom_ids)
    value = (value * 31) ^ hash(self.selected_product_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MRoomTypes:
  """
  Attributes:
   - mroomtype_id
   - mroom_name
   - products
   - bed_type
   - priority
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mroomtype_id', None, None, ), # 1
    (2, TType.STRING, 'mroom_name', None, None, ), # 2
    (3, TType.LIST, 'products', (TType.STRUCT,(Product, Product.thrift_spec)), None, ), # 3
    (4, TType.I32, 'bed_type', None, None, ), # 4
    (5, TType.I32, 'priority', None, None, ), # 5
  )

  def __init__(self, mroomtype_id=None, mroom_name=None, products=None, bed_type=None, priority=None,):
    self.mroomtype_id = mroomtype_id
    self.mroom_name = mroom_name
    self.products = products
    self.bed_type = bed_type
    self.priority = priority

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mroomtype_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.products = []
          (_etype213, _size210) = iprot.readListBegin()
          for _i214 in xrange(_size210):
            _elem215 = Product()
            _elem215.read(iprot)
            self.products.append(_elem215)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bed_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MRoomTypes')
    if self.mroomtype_id is not None:
      oprot.writeFieldBegin('mroomtype_id', TType.I64, 1)
      oprot.writeI64(self.mroomtype_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 2)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.products is not None:
      oprot.writeFieldBegin('products', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.products))
      for iter216 in self.products:
        iter216.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bed_type is not None:
      oprot.writeFieldBegin('bed_type', TType.I32, 4)
      oprot.writeI32(self.bed_type)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 5)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mroomtype_id is None:
      raise TProtocol.TProtocolException(message='Required field mroomtype_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mroomtype_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.products)
    value = (value * 31) ^ hash(self.bed_type)
    value = (value * 31) ^ hash(self.priority)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Longcuistruct:
  """
  Attributes:
   - has_longcuionly
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_longcuionly', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_longcuionly=None, type=None,):
    self.has_longcuionly = has_longcuionly
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_longcuionly = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Longcuistruct')
    if self.has_longcuionly is not None:
      oprot.writeFieldBegin('has_longcuionly', TType.BOOL, 1)
      oprot.writeBool(self.has_longcuionly)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_longcuionly)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tejiastruct:
  """
  Attributes:
   - has_weifang
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_weifang', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_weifang=None, type=None,):
    self.has_weifang = has_weifang
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_weifang = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tejiastruct')
    if self.has_weifang is not None:
      oprot.writeFieldBegin('has_weifang', TType.BOOL, 1)
      oprot.writeBool(self.has_weifang)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_weifang)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ManJianstruct:
  """
  Attributes:
   - has_manjian
   - type
   - promotion_description
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_manjian', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 3
  )

  def __init__(self, has_manjian=None, type=None, promotion_description=None,):
    self.has_manjian = has_manjian
    self.type = type
    self.promotion_description = promotion_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_manjian = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype220, _size217) = iprot.readListBegin()
          for _i221 in xrange(_size217):
            _elem222 = PromotionDescription()
            _elem222.read(iprot)
            self.promotion_description.append(_elem222)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ManJianstruct')
    if self.has_manjian is not None:
      oprot.writeFieldBegin('has_manjian', TType.BOOL, 1)
      oprot.writeBool(self.has_manjian)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter223 in self.promotion_description:
        iter223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_manjian)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.promotion_description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Confirmstruct:
  """
  Attributes:
   - has_confirm
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_confirm', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_confirm=None, type=None,):
    self.has_confirm = has_confirm
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Confirmstruct')
    if self.has_confirm is not None:
      oprot.writeFieldBegin('has_confirm', TType.BOOL, 1)
      oprot.writeBool(self.has_confirm)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_confirm)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Danbaostruct:
  """
  Attributes:
   - need_guarantee
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'need_guarantee', None, None, ), # 1
    None, # 2
    (3, TType.I32, 'type', None, None, ), # 3
  )

  def __init__(self, need_guarantee=None, type=None,):
    self.need_guarantee = need_guarantee
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.need_guarantee = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Danbaostruct')
    if self.need_guarantee is not None:
      oprot.writeFieldBegin('need_guarantee', TType.BOOL, 1)
      oprot.writeBool(self.need_guarantee)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.need_guarantee)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MobileOnlystruct:
  """
  Attributes:
   - has_mobileonly
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_mobileonly', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_mobileonly=None, type=None,):
    self.has_mobileonly = has_mobileonly
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_mobileonly = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MobileOnlystruct')
    if self.has_mobileonly is not None:
      oprot.writeFieldBegin('has_mobileonly', TType.BOOL, 1)
      oprot.writeBool(self.has_mobileonly)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_mobileonly)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Couponstruct:
  """
  Attributes:
   - has_coupon
   - upper_limit
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_coupon', None, None, ), # 1
    (2, TType.DOUBLE, 'upper_limit', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
  )

  def __init__(self, has_coupon=None, upper_limit=None, type=None,):
    self.has_coupon = has_coupon
    self.upper_limit = upper_limit
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_coupon = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Couponstruct')
    if self.has_coupon is not None:
      oprot.writeFieldBegin('has_coupon', TType.BOOL, 1)
      oprot.writeBool(self.has_coupon)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 2)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_coupon)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongBaostruct:
  """
  Attributes:
   - has_hongbao
   - upper_limit
   - type
   - promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_hongbao', None, None, ), # 1
    (2, TType.DOUBLE, 'upper_limit', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I32, 'promotion_type', None, None, ), # 4
  )

  def __init__(self, has_hongbao=None, upper_limit=None, type=None, promotion_type=None,):
    self.has_hongbao = has_hongbao
    self.upper_limit = upper_limit
    self.type = type
    self.promotion_type = promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_hongbao = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongBaostruct')
    if self.has_hongbao is not None:
      oprot.writeFieldBegin('has_hongbao', TType.BOOL, 1)
      oprot.writeBool(self.has_hongbao)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 2)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 4)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_hongbao)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ZhoubianProduct:
  """
  Attributes:
   - has_zhoubian_pro
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_zhoubian_pro', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_zhoubian_pro=None, type=None,):
    self.has_zhoubian_pro = has_zhoubian_pro
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_zhoubian_pro = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ZhoubianProduct')
    if self.has_zhoubian_pro is not None:
      oprot.writeFieldBegin('has_zhoubian_pro', TType.BOOL, 1)
      oprot.writeBool(self.has_zhoubian_pro)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_zhoubian_pro)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckInPersonForOneRoom:
  """
  Attributes:
   - min_checkin_person_for_oneroom
   - max_checkin_person_for_oneroom
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'min_checkin_person_for_oneroom', None, None, ), # 1
    (2, TType.I32, 'max_checkin_person_for_oneroom', None, None, ), # 2
  )

  def __init__(self, min_checkin_person_for_oneroom=None, max_checkin_person_for_oneroom=None,):
    self.min_checkin_person_for_oneroom = min_checkin_person_for_oneroom
    self.max_checkin_person_for_oneroom = max_checkin_person_for_oneroom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.min_checkin_person_for_oneroom = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.max_checkin_person_for_oneroom = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckInPersonForOneRoom')
    if self.min_checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('min_checkin_person_for_oneroom', TType.I32, 1)
      oprot.writeI32(self.min_checkin_person_for_oneroom)
      oprot.writeFieldEnd()
    if self.max_checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('max_checkin_person_for_oneroom', TType.I32, 2)
      oprot.writeI32(self.max_checkin_person_for_oneroom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_checkin_person_for_oneroom)
    value = (value * 31) ^ hash(self.max_checkin_person_for_oneroom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AllBuyRoomstruct:
  """
  Attributes:
   - has_allbuyroom_pro
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_allbuyroom_pro', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_allbuyroom_pro=None, type=None,):
    self.has_allbuyroom_pro = has_allbuyroom_pro
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_allbuyroom_pro = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AllBuyRoomstruct')
    if self.has_allbuyroom_pro is not None:
      oprot.writeFieldBegin('has_allbuyroom_pro', TType.BOOL, 1)
      oprot.writeBool(self.has_allbuyroom_pro)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_allbuyroom_pro)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionCount:
  """
  Attributes:
   - promotion_type
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotion_type', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, promotion_type=None, count=None,):
    self.promotion_type = promotion_type
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionCount')
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 1)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionTypeMsg:
  """
  Attributes:
   - id
   - is_effective_price
   - priority_level
   - is_special
   - promotion_cities
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.BOOL, 'is_effective_price', None, None, ), # 2
    (3, TType.I32, 'priority_level', None, None, ), # 3
    (4, TType.I32, 'is_special', None, None, ), # 4
    (5, TType.MAP, 'promotion_cities', (TType.I32,None,TType.I32,None), None, ), # 5
  )

  def __init__(self, id=None, is_effective_price=None, priority_level=None, is_special=None, promotion_cities=None,):
    self.id = id
    self.is_effective_price = is_effective_price
    self.priority_level = priority_level
    self.is_special = is_special
    self.promotion_cities = promotion_cities

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_effective_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priority_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.is_special = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.promotion_cities = {}
          (_ktype225, _vtype226, _size224 ) = iprot.readMapBegin()
          for _i228 in xrange(_size224):
            _key229 = iprot.readI32()
            _val230 = iprot.readI32()
            self.promotion_cities[_key229] = _val230
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionTypeMsg')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.is_effective_price is not None:
      oprot.writeFieldBegin('is_effective_price', TType.BOOL, 2)
      oprot.writeBool(self.is_effective_price)
      oprot.writeFieldEnd()
    if self.priority_level is not None:
      oprot.writeFieldBegin('priority_level', TType.I32, 3)
      oprot.writeI32(self.priority_level)
      oprot.writeFieldEnd()
    if self.is_special is not None:
      oprot.writeFieldBegin('is_special', TType.I32, 4)
      oprot.writeI32(self.is_special)
      oprot.writeFieldEnd()
    if self.promotion_cities is not None:
      oprot.writeFieldBegin('promotion_cities', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.promotion_cities))
      for kiter231,viter232 in self.promotion_cities.items():
        oprot.writeI32(kiter231)
        oprot.writeI32(viter232)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.is_effective_price is None:
      raise TProtocol.TProtocolException(message='Required field is_effective_price is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.is_effective_price)
    value = (value * 31) ^ hash(self.priority_level)
    value = (value * 31) ^ hash(self.is_special)
    value = (value * 31) ^ hash(self.promotion_cities)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroup:
  """
  Attributes:
   - group_id
   - promotion_type
   - type_list
   - businessType
   - orderFromGroupId
   - group_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.LIST, 'promotion_type', (TType.I32,None), None, ), # 2
    (3, TType.LIST, 'type_list', (TType.STRUCT,(PromotionTypeMsg, PromotionTypeMsg.thrift_spec)), None, ), # 3
    (4, TType.I32, 'businessType', None, None, ), # 4
    (5, TType.I32, 'orderFromGroupId', None, None, ), # 5
    (6, TType.I32, 'group_type', None, None, ), # 6
  )

  def __init__(self, group_id=None, promotion_type=None, type_list=None, businessType=None, orderFromGroupId=None, group_type=None,):
    self.group_id = group_id
    self.promotion_type = promotion_type
    self.type_list = type_list
    self.businessType = businessType
    self.orderFromGroupId = orderFromGroupId
    self.group_type = group_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_type = []
          (_etype236, _size233) = iprot.readListBegin()
          for _i237 in xrange(_size233):
            _elem238 = iprot.readI32()
            self.promotion_type.append(_elem238)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype242, _size239) = iprot.readListBegin()
          for _i243 in xrange(_size239):
            _elem244 = PromotionTypeMsg()
            _elem244.read(iprot)
            self.type_list.append(_elem244)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.businessType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.orderFromGroupId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.group_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroup')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.promotion_type))
      for iter245 in self.promotion_type:
        oprot.writeI32(iter245)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.type_list))
      for iter246 in self.type_list:
        iter246.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.businessType is not None:
      oprot.writeFieldBegin('businessType', TType.I32, 4)
      oprot.writeI32(self.businessType)
      oprot.writeFieldEnd()
    if self.orderFromGroupId is not None:
      oprot.writeFieldBegin('orderFromGroupId', TType.I32, 5)
      oprot.writeI32(self.orderFromGroupId)
      oprot.writeFieldEnd()
    if self.group_type is not None:
      oprot.writeFieldBegin('group_type', TType.I32, 6)
      oprot.writeI32(self.group_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.type_list)
    value = (value * 31) ^ hash(self.businessType)
    value = (value * 31) ^ hash(self.orderFromGroupId)
    value = (value * 31) ^ hash(self.group_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTag:
  """
  Attributes:
   - tag_id
   - tag_name
   - priority_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'tag_id', None, None, ), # 1
    (2, TType.STRING, 'tag_name', None, None, ), # 2
    (3, TType.I32, 'priority_level', None, None, ), # 3
  )

  def __init__(self, tag_id=None, tag_name=None, priority_level=None,):
    self.tag_id = tag_id
    self.tag_name = tag_name
    self.priority_level = priority_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.tag_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tag_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priority_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTag')
    if self.tag_id is not None:
      oprot.writeFieldBegin('tag_id', TType.I32, 1)
      oprot.writeI32(self.tag_id)
      oprot.writeFieldEnd()
    if self.tag_name is not None:
      oprot.writeFieldBegin('tag_name', TType.STRING, 2)
      oprot.writeString(self.tag_name)
      oprot.writeFieldEnd()
    if self.priority_level is not None:
      oprot.writeFieldBegin('priority_level', TType.I32, 3)
      oprot.writeI32(self.priority_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tag_id)
    value = (value * 31) ^ hash(self.tag_name)
    value = (value * 31) ^ hash(self.priority_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFlag:
  """
  Attributes:
   - flag_type
   - effective
   - object
   - upper_limit
   - promotion_type
   - promotion_description
   - price
   - discount_rates
   - low_discount_rate
   - high_sub
   - activity_tags
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flag_type', None, None, ), # 1
    (2, TType.BOOL, 'effective', None, None, ), # 2
    (3, TType.I32, 'object', None, None, ), # 3
    (4, TType.DOUBLE, 'upper_limit', None, None, ), # 4
    (5, TType.I32, 'promotion_type', None, None, ), # 5
    (6, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 6
    (7, TType.I32, 'price', None, None, ), # 7
    (8, TType.LIST, 'discount_rates', (TType.DOUBLE,None), None, ), # 8
    (9, TType.DOUBLE, 'low_discount_rate', None, None, ), # 9
    (10, TType.I32, 'high_sub', None, None, ), # 10
    (11, TType.LIST, 'activity_tags', (TType.STRUCT,(ActivityTag, ActivityTag.thrift_spec)), None, ), # 11
  )

  def __init__(self, flag_type=None, effective=None, object=None, upper_limit=None, promotion_type=None, promotion_description=None, price=None, discount_rates=None, low_discount_rate=None, high_sub=None, activity_tags=None,):
    self.flag_type = flag_type
    self.effective = effective
    self.object = object
    self.upper_limit = upper_limit
    self.promotion_type = promotion_type
    self.promotion_description = promotion_description
    self.price = price
    self.discount_rates = discount_rates
    self.low_discount_rate = low_discount_rate
    self.high_sub = high_sub
    self.activity_tags = activity_tags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flag_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.effective = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.object = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype250, _size247) = iprot.readListBegin()
          for _i251 in xrange(_size247):
            _elem252 = PromotionDescription()
            _elem252.read(iprot)
            self.promotion_description.append(_elem252)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.discount_rates = []
          (_etype256, _size253) = iprot.readListBegin()
          for _i257 in xrange(_size253):
            _elem258 = iprot.readDouble()
            self.discount_rates.append(_elem258)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.low_discount_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.high_sub = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.activity_tags = []
          (_etype262, _size259) = iprot.readListBegin()
          for _i263 in xrange(_size259):
            _elem264 = ActivityTag()
            _elem264.read(iprot)
            self.activity_tags.append(_elem264)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFlag')
    if self.flag_type is not None:
      oprot.writeFieldBegin('flag_type', TType.I32, 1)
      oprot.writeI32(self.flag_type)
      oprot.writeFieldEnd()
    if self.effective is not None:
      oprot.writeFieldBegin('effective', TType.BOOL, 2)
      oprot.writeBool(self.effective)
      oprot.writeFieldEnd()
    if self.object is not None:
      oprot.writeFieldBegin('object', TType.I32, 3)
      oprot.writeI32(self.object)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 4)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 5)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter265 in self.promotion_description:
        iter265.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 7)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.discount_rates is not None:
      oprot.writeFieldBegin('discount_rates', TType.LIST, 8)
      oprot.writeListBegin(TType.DOUBLE, len(self.discount_rates))
      for iter266 in self.discount_rates:
        oprot.writeDouble(iter266)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.low_discount_rate is not None:
      oprot.writeFieldBegin('low_discount_rate', TType.DOUBLE, 9)
      oprot.writeDouble(self.low_discount_rate)
      oprot.writeFieldEnd()
    if self.high_sub is not None:
      oprot.writeFieldBegin('high_sub', TType.I32, 10)
      oprot.writeI32(self.high_sub)
      oprot.writeFieldEnd()
    if self.activity_tags is not None:
      oprot.writeFieldBegin('activity_tags', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.activity_tags))
      for iter267 in self.activity_tags:
        iter267.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.flag_type is None:
      raise TProtocol.TProtocolException(message='Required field flag_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flag_type)
    value = (value * 31) ^ hash(self.effective)
    value = (value * 31) ^ hash(self.object)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.promotion_description)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.discount_rates)
    value = (value * 31) ^ hash(self.low_discount_rate)
    value = (value * 31) ^ hash(self.high_sub)
    value = (value * 31) ^ hash(self.activity_tags)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomizedProductInfo:
  """
  Attributes:
   - type
   - price
   - price_sub_coupon
   - roomtypeid
   - rateplan_id
   - mroom_id
   - shotel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'price', None, None, ), # 2
    (3, TType.I32, 'price_sub_coupon', None, None, ), # 3
    (4, TType.I64, 'roomtypeid', None, None, ), # 4
    (5, TType.I64, 'rateplan_id', None, None, ), # 5
    (6, TType.I64, 'mroom_id', None, None, ), # 6
    (7, TType.I32, 'shotel_id', None, None, ), # 7
  )

  def __init__(self, type=None, price=None, price_sub_coupon=None, roomtypeid=None, rateplan_id=None, mroom_id=None, shotel_id=None,):
    self.type = type
    self.price = price
    self.price_sub_coupon = price_sub_coupon
    self.roomtypeid = roomtypeid
    self.rateplan_id = rateplan_id
    self.mroom_id = mroom_id
    self.shotel_id = shotel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.mroom_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomizedProductInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 2)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.I32, 3)
      oprot.writeI32(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.roomtypeid is not None:
      oprot.writeFieldBegin('roomtypeid', TType.I64, 4)
      oprot.writeI64(self.roomtypeid)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 5)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I64, 6)
      oprot.writeI64(self.mroom_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 7)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.roomtypeid)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.shotel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MinPriceInfo:
  """
  Attributes:
   - type
   - min_price
   - min_price_rpid
   - min_price_sroomid
   - min_price_mroomid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'min_price', None, None, ), # 2
    (3, TType.I64, 'min_price_rpid', None, None, ), # 3
    (4, TType.I32, 'min_price_sroomid', None, None, ), # 4
    (5, TType.I32, 'min_price_mroomid', None, None, ), # 5
  )

  def __init__(self, type=None, min_price=None, min_price_rpid=None, min_price_sroomid=None, min_price_mroomid=None,):
    self.type = type
    self.min_price = min_price
    self.min_price_rpid = min_price_rpid
    self.min_price_sroomid = min_price_sroomid
    self.min_price_mroomid = min_price_mroomid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.min_price_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.min_price_sroomid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.min_price_mroomid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MinPriceInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.min_price is not None:
      oprot.writeFieldBegin('min_price', TType.I32, 2)
      oprot.writeI32(self.min_price)
      oprot.writeFieldEnd()
    if self.min_price_rpid is not None:
      oprot.writeFieldBegin('min_price_rpid', TType.I64, 3)
      oprot.writeI64(self.min_price_rpid)
      oprot.writeFieldEnd()
    if self.min_price_sroomid is not None:
      oprot.writeFieldBegin('min_price_sroomid', TType.I32, 4)
      oprot.writeI32(self.min_price_sroomid)
      oprot.writeFieldEnd()
    if self.min_price_mroomid is not None:
      oprot.writeFieldBegin('min_price_mroomid', TType.I32, 5)
      oprot.writeI32(self.min_price_mroomid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.min_price)
    value = (value * 31) ^ hash(self.min_price_rpid)
    value = (value * 31) ^ hash(self.min_price_sroomid)
    value = (value * 31) ^ hash(self.min_price_mroomid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncidentalPriceInfo:
  """
  Attributes:
   - min_price_cansale_sub_coupon_origin
   - min_price_cansale_sub_coupon
   - min_price_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'min_price_cansale_sub_coupon_origin', None, None, ), # 1
    (2, TType.I32, 'min_price_cansale_sub_coupon', None, None, ), # 2
    (3, TType.LIST, 'min_price_info', (TType.STRUCT,(MinPriceInfo, MinPriceInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, min_price_cansale_sub_coupon_origin=None, min_price_cansale_sub_coupon=None, min_price_info=None,):
    self.min_price_cansale_sub_coupon_origin = min_price_cansale_sub_coupon_origin
    self.min_price_cansale_sub_coupon = min_price_cansale_sub_coupon
    self.min_price_info = min_price_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.min_price_cansale_sub_coupon_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_price_cansale_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.min_price_info = []
          (_etype271, _size268) = iprot.readListBegin()
          for _i272 in xrange(_size268):
            _elem273 = MinPriceInfo()
            _elem273.read(iprot)
            self.min_price_info.append(_elem273)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncidentalPriceInfo')
    if self.min_price_cansale_sub_coupon_origin is not None:
      oprot.writeFieldBegin('min_price_cansale_sub_coupon_origin', TType.I32, 1)
      oprot.writeI32(self.min_price_cansale_sub_coupon_origin)
      oprot.writeFieldEnd()
    if self.min_price_cansale_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_cansale_sub_coupon', TType.I32, 2)
      oprot.writeI32(self.min_price_cansale_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_info is not None:
      oprot.writeFieldBegin('min_price_info', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_info))
      for iter274 in self.min_price_info:
        iter274.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_price_cansale_sub_coupon_origin)
    value = (value * 31) ^ hash(self.min_price_cansale_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatisticsInfo:
  """
  Attributes:
   - type
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, type=None, count=None,):
    self.type = type
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatisticsInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionRange:
  """
  Attributes:
   - promotionStatsType
   - minPromotion
   - maxPromotion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotionStatsType', None, None, ), # 1
    (2, TType.DOUBLE, 'minPromotion', None, None, ), # 2
    (3, TType.DOUBLE, 'maxPromotion', None, None, ), # 3
  )

  def __init__(self, promotionStatsType=None, minPromotion=None, maxPromotion=None,):
    self.promotionStatsType = promotionStatsType
    self.minPromotion = minPromotion
    self.maxPromotion = maxPromotion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotionStatsType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.minPromotion = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.maxPromotion = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionRange')
    if self.promotionStatsType is not None:
      oprot.writeFieldBegin('promotionStatsType', TType.I32, 1)
      oprot.writeI32(self.promotionStatsType)
      oprot.writeFieldEnd()
    if self.minPromotion is not None:
      oprot.writeFieldBegin('minPromotion', TType.DOUBLE, 2)
      oprot.writeDouble(self.minPromotion)
      oprot.writeFieldEnd()
    if self.maxPromotion is not None:
      oprot.writeFieldBegin('maxPromotion', TType.DOUBLE, 3)
      oprot.writeDouble(self.maxPromotion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotionStatsType)
    value = (value * 31) ^ hash(self.minPromotion)
    value = (value * 31) ^ hash(self.maxPromotion)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MHotelDetail:
  """
  Attributes:
   - mhotel_id
   - has_drr
   - longcui_info
   - weifang_info
   - has_tuan
   - inventory_type
   - min_price
   - min_price_rpid
   - min_price_roomtypeid
   - need_guarantee
   - product_count
   - product_can_be_showed
   - promotion_type_count
   - room_types
   - shotel_helpfultips
   - shotel_booking_rules
   - shotel_invoice_info
   - mobileonly_struct
   - has_yufu
   - product_count_reason
   - coupon_struct
   - hongbao_struct
   - has_timerush_product
   - min_price_pro_relation_price
   - mroom_count
   - is_hotel_inventory_full
   - min_price_mroomtypeid
   - zhoubian_struct
   - has_buy5send1_promotion
   - has_halfdiscount_promotion
   - min_price_sub_coupon
   - min_price_sub_coupon_rpid
   - min_price_sub_coupon_roomtypeid
   - min_price_sub_coupon_mroomtypeid
   - firstnight_has_discount
   - has_danbao_product
   - allbuyroom_struct
   - promotion_count
   - manjian_struct
   - min_price_sub_coupon_origin
   - confirm_struct
   - hotel_flag
   - has_moremember_products
   - cp_info
   - incidental_price_info
   - statistics_info
   - hotel_service_status
   - min_price_sale_cost
   - min_price_sub_coupon_sale_cost
   - min_weifang_price
   - hours_room_min_price_cansale
   - simple_mrooms
   - min_price_inventories
   - min_price_sub_coupon_inventories
   - star_type
   - star
   - is_economic
   - promotionStats
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mhotel_id', None, None, ), # 1
    (2, TType.BOOL, 'has_drr', None, None, ), # 2
    (3, TType.STRUCT, 'longcui_info', (Longcuistruct, Longcuistruct.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'weifang_info', (Tejiastruct, Tejiastruct.thrift_spec), None, ), # 4
    (5, TType.BOOL, 'has_tuan', None, None, ), # 5
    (6, TType.I32, 'inventory_type', None, None, ), # 6
    (7, TType.I32, 'min_price', None, None, ), # 7
    None, # 8
    (9, TType.I64, 'min_price_rpid', None, None, ), # 9
    (10, TType.I64, 'min_price_roomtypeid', None, None, ), # 10
    (11, TType.STRUCT, 'need_guarantee', (Danbaostruct, Danbaostruct.thrift_spec), None, ), # 11
    (12, TType.I32, 'product_count', None, None, ), # 12
    (13, TType.I32, 'promotion_type_count', None, None, ), # 13
    (14, TType.LIST, 'room_types', (TType.STRUCT,(MRoomTypes, MRoomTypes.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'shotel_helpfultips', (TType.STRUCT,(SHotelHelpfulTips, SHotelHelpfulTips.thrift_spec)), None, ), # 15
    (16, TType.LIST, 'shotel_booking_rules', (TType.STRUCT,(SHotelBookingRule, SHotelBookingRule.thrift_spec)), None, ), # 16
    (17, TType.LIST, 'shotel_invoice_info', (TType.STRUCT,(SHotelInvoiceInfo, SHotelInvoiceInfo.thrift_spec)), None, ), # 17
    (18, TType.STRUCT, 'mobileonly_struct', (MobileOnlystruct, MobileOnlystruct.thrift_spec), None, ), # 18
    (19, TType.BOOL, 'has_yufu', None, None, ), # 19
    (20, TType.I32, 'product_count_reason', None, None, ), # 20
    (21, TType.STRUCT, 'coupon_struct', (Couponstruct, Couponstruct.thrift_spec), None, ), # 21
    (22, TType.I32, 'product_can_be_showed', None, None, ), # 22
    (23, TType.BOOL, 'has_timerush_product', None, None, ), # 23
    (24, TType.I32, 'min_price_pro_relation_price', None, None, ), # 24
    (25, TType.I32, 'mroom_count', None, None, ), # 25
    (26, TType.BOOL, 'is_hotel_inventory_full', None, None, ), # 26
    (27, TType.I32, 'min_price_mroomtypeid', None, None, ), # 27
    (28, TType.STRUCT, 'hongbao_struct', (HongBaostruct, HongBaostruct.thrift_spec), None, ), # 28
    (29, TType.STRUCT, 'zhoubian_struct', (ZhoubianProduct, ZhoubianProduct.thrift_spec), None, ), # 29
    (30, TType.BOOL, 'has_buy5send1_promotion', None, None, ), # 30
    (31, TType.BOOL, 'has_halfdiscount_promotion', None, None, ), # 31
    (32, TType.I32, 'min_price_sub_coupon', None, None, ), # 32
    (33, TType.I64, 'min_price_sub_coupon_rpid', None, None, ), # 33
    (34, TType.I64, 'min_price_sub_coupon_roomtypeid', None, None, ), # 34
    (35, TType.I32, 'min_price_sub_coupon_mroomtypeid', None, None, ), # 35
    (36, TType.BOOL, 'firstnight_has_discount', None, None, ), # 36
    (37, TType.BOOL, 'has_danbao_product', None, None, ), # 37
    (38, TType.STRUCT, 'allbuyroom_struct', (AllBuyRoomstruct, AllBuyRoomstruct.thrift_spec), None, ), # 38
    (39, TType.LIST, 'promotion_count', (TType.STRUCT,(PromotionCount, PromotionCount.thrift_spec)), None, ), # 39
    (40, TType.STRUCT, 'manjian_struct', (ManJianstruct, ManJianstruct.thrift_spec), None, ), # 40
    (41, TType.I32, 'min_price_sub_coupon_origin', None, None, ), # 41
    (42, TType.STRUCT, 'confirm_struct', (Confirmstruct, Confirmstruct.thrift_spec), None, ), # 42
    (43, TType.LIST, 'hotel_flag', (TType.STRUCT,(HotelFlag, HotelFlag.thrift_spec)), None, ), # 43
    (44, TType.BOOL, 'has_moremember_products', None, None, ), # 44
    (45, TType.LIST, 'cp_info', (TType.STRUCT,(CustomizedProductInfo, CustomizedProductInfo.thrift_spec)), None, ), # 45
    (46, TType.STRUCT, 'incidental_price_info', (IncidentalPriceInfo, IncidentalPriceInfo.thrift_spec), None, ), # 46
    (47, TType.LIST, 'statistics_info', (TType.STRUCT,(StatisticsInfo, StatisticsInfo.thrift_spec)), None, ), # 47
    (48, TType.I32, 'hotel_service_status', None, None, ), # 48
    (49, TType.I32, 'min_price_sale_cost', None, None, ), # 49
    (50, TType.I32, 'min_price_sub_coupon_sale_cost', None, None, ), # 50
    (51, TType.I32, 'min_weifang_price', None, None, ), # 51
    (52, TType.LIST, 'hours_room_min_price_cansale', (TType.STRUCT,(MinPriceInfo, MinPriceInfo.thrift_spec)), None, ), # 52
    (53, TType.STRING, 'simple_mrooms', None, None, ), # 53
    (54, TType.LIST, 'min_price_inventories', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 54
    (55, TType.LIST, 'min_price_sub_coupon_inventories', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 55
    (56, TType.I32, 'star_type', None, None, ), # 56
    (57, TType.I32, 'star', None, None, ), # 57
    (58, TType.BOOL, 'is_economic', None, None, ), # 58
    (59, TType.LIST, 'promotionStats', (TType.STRUCT,(PromotionRange, PromotionRange.thrift_spec)), None, ), # 59
  )

  def __init__(self, mhotel_id=None, has_drr=None, longcui_info=None, weifang_info=None, has_tuan=None, inventory_type=None, min_price=None, min_price_rpid=None, min_price_roomtypeid=None, need_guarantee=None, product_count=None, product_can_be_showed=None, promotion_type_count=None, room_types=None, shotel_helpfultips=None, shotel_booking_rules=None, shotel_invoice_info=None, mobileonly_struct=None, has_yufu=None, product_count_reason=None, coupon_struct=None, hongbao_struct=None, has_timerush_product=None, min_price_pro_relation_price=None, mroom_count=None, is_hotel_inventory_full=None, min_price_mroomtypeid=None, zhoubian_struct=None, has_buy5send1_promotion=None, has_halfdiscount_promotion=None, min_price_sub_coupon=None, min_price_sub_coupon_rpid=None, min_price_sub_coupon_roomtypeid=None, min_price_sub_coupon_mroomtypeid=None, firstnight_has_discount=None, has_danbao_product=None, allbuyroom_struct=None, promotion_count=None, manjian_struct=None, min_price_sub_coupon_origin=None, confirm_struct=None, hotel_flag=None, has_moremember_products=None, cp_info=None, incidental_price_info=None, statistics_info=None, hotel_service_status=None, min_price_sale_cost=None, min_price_sub_coupon_sale_cost=None, min_weifang_price=None, hours_room_min_price_cansale=None, simple_mrooms=None, min_price_inventories=None, min_price_sub_coupon_inventories=None, star_type=None, star=None, is_economic=None, promotionStats=None,):
    self.mhotel_id = mhotel_id
    self.has_drr = has_drr
    self.longcui_info = longcui_info
    self.weifang_info = weifang_info
    self.has_tuan = has_tuan
    self.inventory_type = inventory_type
    self.min_price = min_price
    self.min_price_rpid = min_price_rpid
    self.min_price_roomtypeid = min_price_roomtypeid
    self.need_guarantee = need_guarantee
    self.product_count = product_count
    self.product_can_be_showed = product_can_be_showed
    self.promotion_type_count = promotion_type_count
    self.room_types = room_types
    self.shotel_helpfultips = shotel_helpfultips
    self.shotel_booking_rules = shotel_booking_rules
    self.shotel_invoice_info = shotel_invoice_info
    self.mobileonly_struct = mobileonly_struct
    self.has_yufu = has_yufu
    self.product_count_reason = product_count_reason
    self.coupon_struct = coupon_struct
    self.hongbao_struct = hongbao_struct
    self.has_timerush_product = has_timerush_product
    self.min_price_pro_relation_price = min_price_pro_relation_price
    self.mroom_count = mroom_count
    self.is_hotel_inventory_full = is_hotel_inventory_full
    self.min_price_mroomtypeid = min_price_mroomtypeid
    self.zhoubian_struct = zhoubian_struct
    self.has_buy5send1_promotion = has_buy5send1_promotion
    self.has_halfdiscount_promotion = has_halfdiscount_promotion
    self.min_price_sub_coupon = min_price_sub_coupon
    self.min_price_sub_coupon_rpid = min_price_sub_coupon_rpid
    self.min_price_sub_coupon_roomtypeid = min_price_sub_coupon_roomtypeid
    self.min_price_sub_coupon_mroomtypeid = min_price_sub_coupon_mroomtypeid
    self.firstnight_has_discount = firstnight_has_discount
    self.has_danbao_product = has_danbao_product
    self.allbuyroom_struct = allbuyroom_struct
    self.promotion_count = promotion_count
    self.manjian_struct = manjian_struct
    self.min_price_sub_coupon_origin = min_price_sub_coupon_origin
    self.confirm_struct = confirm_struct
    self.hotel_flag = hotel_flag
    self.has_moremember_products = has_moremember_products
    self.cp_info = cp_info
    self.incidental_price_info = incidental_price_info
    self.statistics_info = statistics_info
    self.hotel_service_status = hotel_service_status
    self.min_price_sale_cost = min_price_sale_cost
    self.min_price_sub_coupon_sale_cost = min_price_sub_coupon_sale_cost
    self.min_weifang_price = min_weifang_price
    self.hours_room_min_price_cansale = hours_room_min_price_cansale
    self.simple_mrooms = simple_mrooms
    self.min_price_inventories = min_price_inventories
    self.min_price_sub_coupon_inventories = min_price_sub_coupon_inventories
    self.star_type = star_type
    self.star = star
    self.is_economic = is_economic
    self.promotionStats = promotionStats

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mhotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_drr = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.longcui_info = Longcuistruct()
          self.longcui_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.weifang_info = Tejiastruct()
          self.weifang_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.has_tuan = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.inventory_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.min_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.min_price_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.min_price_roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.need_guarantee = Danbaostruct()
          self.need_guarantee.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.product_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.product_can_be_showed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.promotion_type_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.room_types = []
          (_etype278, _size275) = iprot.readListBegin()
          for _i279 in xrange(_size275):
            _elem280 = MRoomTypes()
            _elem280.read(iprot)
            self.room_types.append(_elem280)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.shotel_helpfultips = []
          (_etype284, _size281) = iprot.readListBegin()
          for _i285 in xrange(_size281):
            _elem286 = SHotelHelpfulTips()
            _elem286.read(iprot)
            self.shotel_helpfultips.append(_elem286)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.shotel_booking_rules = []
          (_etype290, _size287) = iprot.readListBegin()
          for _i291 in xrange(_size287):
            _elem292 = SHotelBookingRule()
            _elem292.read(iprot)
            self.shotel_booking_rules.append(_elem292)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.shotel_invoice_info = []
          (_etype296, _size293) = iprot.readListBegin()
          for _i297 in xrange(_size293):
            _elem298 = SHotelInvoiceInfo()
            _elem298.read(iprot)
            self.shotel_invoice_info.append(_elem298)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.mobileonly_struct = MobileOnlystruct()
          self.mobileonly_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.has_yufu = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.product_count_reason = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.coupon_struct = Couponstruct()
          self.coupon_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRUCT:
          self.hongbao_struct = HongBaostruct()
          self.hongbao_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.has_timerush_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.min_price_pro_relation_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.mroom_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.is_hotel_inventory_full = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.min_price_mroomtypeid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.zhoubian_struct = ZhoubianProduct()
          self.zhoubian_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.has_buy5send1_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.has_halfdiscount_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.min_price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.min_price_sub_coupon_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I64:
          self.min_price_sub_coupon_roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.min_price_sub_coupon_mroomtypeid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.BOOL:
          self.firstnight_has_discount = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.BOOL:
          self.has_danbao_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRUCT:
          self.allbuyroom_struct = AllBuyRoomstruct()
          self.allbuyroom_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.LIST:
          self.promotion_count = []
          (_etype302, _size299) = iprot.readListBegin()
          for _i303 in xrange(_size299):
            _elem304 = PromotionCount()
            _elem304.read(iprot)
            self.promotion_count.append(_elem304)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.manjian_struct = ManJianstruct()
          self.manjian_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I32:
          self.min_price_sub_coupon_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRUCT:
          self.confirm_struct = Confirmstruct()
          self.confirm_struct.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.LIST:
          self.hotel_flag = []
          (_etype308, _size305) = iprot.readListBegin()
          for _i309 in xrange(_size305):
            _elem310 = HotelFlag()
            _elem310.read(iprot)
            self.hotel_flag.append(_elem310)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.BOOL:
          self.has_moremember_products = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.LIST:
          self.cp_info = []
          (_etype314, _size311) = iprot.readListBegin()
          for _i315 in xrange(_size311):
            _elem316 = CustomizedProductInfo()
            _elem316.read(iprot)
            self.cp_info.append(_elem316)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.STRUCT:
          self.incidental_price_info = IncidentalPriceInfo()
          self.incidental_price_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.LIST:
          self.statistics_info = []
          (_etype320, _size317) = iprot.readListBegin()
          for _i321 in xrange(_size317):
            _elem322 = StatisticsInfo()
            _elem322.read(iprot)
            self.statistics_info.append(_elem322)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.hotel_service_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.min_price_sale_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.min_price_sub_coupon_sale_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I32:
          self.min_weifang_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.LIST:
          self.hours_room_min_price_cansale = []
          (_etype326, _size323) = iprot.readListBegin()
          for _i327 in xrange(_size323):
            _elem328 = MinPriceInfo()
            _elem328.read(iprot)
            self.hours_room_min_price_cansale.append(_elem328)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.simple_mrooms = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.LIST:
          self.min_price_inventories = []
          (_etype332, _size329) = iprot.readListBegin()
          for _i333 in xrange(_size329):
            _elem334 = Inventory()
            _elem334.read(iprot)
            self.min_price_inventories.append(_elem334)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.LIST:
          self.min_price_sub_coupon_inventories = []
          (_etype338, _size335) = iprot.readListBegin()
          for _i339 in xrange(_size335):
            _elem340 = Inventory()
            _elem340.read(iprot)
            self.min_price_sub_coupon_inventories.append(_elem340)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.I32:
          self.star_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.I32:
          self.star = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.BOOL:
          self.is_economic = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.LIST:
          self.promotionStats = []
          (_etype344, _size341) = iprot.readListBegin()
          for _i345 in xrange(_size341):
            _elem346 = PromotionRange()
            _elem346.read(iprot)
            self.promotionStats.append(_elem346)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MHotelDetail')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I64, 1)
      oprot.writeI64(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.has_drr is not None:
      oprot.writeFieldBegin('has_drr', TType.BOOL, 2)
      oprot.writeBool(self.has_drr)
      oprot.writeFieldEnd()
    if self.longcui_info is not None:
      oprot.writeFieldBegin('longcui_info', TType.STRUCT, 3)
      self.longcui_info.write(oprot)
      oprot.writeFieldEnd()
    if self.weifang_info is not None:
      oprot.writeFieldBegin('weifang_info', TType.STRUCT, 4)
      self.weifang_info.write(oprot)
      oprot.writeFieldEnd()
    if self.has_tuan is not None:
      oprot.writeFieldBegin('has_tuan', TType.BOOL, 5)
      oprot.writeBool(self.has_tuan)
      oprot.writeFieldEnd()
    if self.inventory_type is not None:
      oprot.writeFieldBegin('inventory_type', TType.I32, 6)
      oprot.writeI32(self.inventory_type)
      oprot.writeFieldEnd()
    if self.min_price is not None:
      oprot.writeFieldBegin('min_price', TType.I32, 7)
      oprot.writeI32(self.min_price)
      oprot.writeFieldEnd()
    if self.min_price_rpid is not None:
      oprot.writeFieldBegin('min_price_rpid', TType.I64, 9)
      oprot.writeI64(self.min_price_rpid)
      oprot.writeFieldEnd()
    if self.min_price_roomtypeid is not None:
      oprot.writeFieldBegin('min_price_roomtypeid', TType.I64, 10)
      oprot.writeI64(self.min_price_roomtypeid)
      oprot.writeFieldEnd()
    if self.need_guarantee is not None:
      oprot.writeFieldBegin('need_guarantee', TType.STRUCT, 11)
      self.need_guarantee.write(oprot)
      oprot.writeFieldEnd()
    if self.product_count is not None:
      oprot.writeFieldBegin('product_count', TType.I32, 12)
      oprot.writeI32(self.product_count)
      oprot.writeFieldEnd()
    if self.promotion_type_count is not None:
      oprot.writeFieldBegin('promotion_type_count', TType.I32, 13)
      oprot.writeI32(self.promotion_type_count)
      oprot.writeFieldEnd()
    if self.room_types is not None:
      oprot.writeFieldBegin('room_types', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.room_types))
      for iter347 in self.room_types:
        iter347.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_helpfultips is not None:
      oprot.writeFieldBegin('shotel_helpfultips', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_helpfultips))
      for iter348 in self.shotel_helpfultips:
        iter348.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_booking_rules is not None:
      oprot.writeFieldBegin('shotel_booking_rules', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_booking_rules))
      for iter349 in self.shotel_booking_rules:
        iter349.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_invoice_info is not None:
      oprot.writeFieldBegin('shotel_invoice_info', TType.LIST, 17)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_invoice_info))
      for iter350 in self.shotel_invoice_info:
        iter350.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mobileonly_struct is not None:
      oprot.writeFieldBegin('mobileonly_struct', TType.STRUCT, 18)
      self.mobileonly_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.has_yufu is not None:
      oprot.writeFieldBegin('has_yufu', TType.BOOL, 19)
      oprot.writeBool(self.has_yufu)
      oprot.writeFieldEnd()
    if self.product_count_reason is not None:
      oprot.writeFieldBegin('product_count_reason', TType.I32, 20)
      oprot.writeI32(self.product_count_reason)
      oprot.writeFieldEnd()
    if self.coupon_struct is not None:
      oprot.writeFieldBegin('coupon_struct', TType.STRUCT, 21)
      self.coupon_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.product_can_be_showed is not None:
      oprot.writeFieldBegin('product_can_be_showed', TType.I32, 22)
      oprot.writeI32(self.product_can_be_showed)
      oprot.writeFieldEnd()
    if self.has_timerush_product is not None:
      oprot.writeFieldBegin('has_timerush_product', TType.BOOL, 23)
      oprot.writeBool(self.has_timerush_product)
      oprot.writeFieldEnd()
    if self.min_price_pro_relation_price is not None:
      oprot.writeFieldBegin('min_price_pro_relation_price', TType.I32, 24)
      oprot.writeI32(self.min_price_pro_relation_price)
      oprot.writeFieldEnd()
    if self.mroom_count is not None:
      oprot.writeFieldBegin('mroom_count', TType.I32, 25)
      oprot.writeI32(self.mroom_count)
      oprot.writeFieldEnd()
    if self.is_hotel_inventory_full is not None:
      oprot.writeFieldBegin('is_hotel_inventory_full', TType.BOOL, 26)
      oprot.writeBool(self.is_hotel_inventory_full)
      oprot.writeFieldEnd()
    if self.min_price_mroomtypeid is not None:
      oprot.writeFieldBegin('min_price_mroomtypeid', TType.I32, 27)
      oprot.writeI32(self.min_price_mroomtypeid)
      oprot.writeFieldEnd()
    if self.hongbao_struct is not None:
      oprot.writeFieldBegin('hongbao_struct', TType.STRUCT, 28)
      self.hongbao_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.zhoubian_struct is not None:
      oprot.writeFieldBegin('zhoubian_struct', TType.STRUCT, 29)
      self.zhoubian_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.has_buy5send1_promotion is not None:
      oprot.writeFieldBegin('has_buy5send1_promotion', TType.BOOL, 30)
      oprot.writeBool(self.has_buy5send1_promotion)
      oprot.writeFieldEnd()
    if self.has_halfdiscount_promotion is not None:
      oprot.writeFieldBegin('has_halfdiscount_promotion', TType.BOOL, 31)
      oprot.writeBool(self.has_halfdiscount_promotion)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_sub_coupon', TType.I32, 32)
      oprot.writeI32(self.min_price_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_rpid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_rpid', TType.I64, 33)
      oprot.writeI64(self.min_price_sub_coupon_rpid)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_roomtypeid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_roomtypeid', TType.I64, 34)
      oprot.writeI64(self.min_price_sub_coupon_roomtypeid)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_mroomtypeid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_mroomtypeid', TType.I32, 35)
      oprot.writeI32(self.min_price_sub_coupon_mroomtypeid)
      oprot.writeFieldEnd()
    if self.firstnight_has_discount is not None:
      oprot.writeFieldBegin('firstnight_has_discount', TType.BOOL, 36)
      oprot.writeBool(self.firstnight_has_discount)
      oprot.writeFieldEnd()
    if self.has_danbao_product is not None:
      oprot.writeFieldBegin('has_danbao_product', TType.BOOL, 37)
      oprot.writeBool(self.has_danbao_product)
      oprot.writeFieldEnd()
    if self.allbuyroom_struct is not None:
      oprot.writeFieldBegin('allbuyroom_struct', TType.STRUCT, 38)
      self.allbuyroom_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.promotion_count is not None:
      oprot.writeFieldBegin('promotion_count', TType.LIST, 39)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_count))
      for iter351 in self.promotion_count:
        iter351.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.manjian_struct is not None:
      oprot.writeFieldBegin('manjian_struct', TType.STRUCT, 40)
      self.manjian_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_origin is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_origin', TType.I32, 41)
      oprot.writeI32(self.min_price_sub_coupon_origin)
      oprot.writeFieldEnd()
    if self.confirm_struct is not None:
      oprot.writeFieldBegin('confirm_struct', TType.STRUCT, 42)
      self.confirm_struct.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_flag is not None:
      oprot.writeFieldBegin('hotel_flag', TType.LIST, 43)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_flag))
      for iter352 in self.hotel_flag:
        iter352.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_moremember_products is not None:
      oprot.writeFieldBegin('has_moremember_products', TType.BOOL, 44)
      oprot.writeBool(self.has_moremember_products)
      oprot.writeFieldEnd()
    if self.cp_info is not None:
      oprot.writeFieldBegin('cp_info', TType.LIST, 45)
      oprot.writeListBegin(TType.STRUCT, len(self.cp_info))
      for iter353 in self.cp_info:
        iter353.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.incidental_price_info is not None:
      oprot.writeFieldBegin('incidental_price_info', TType.STRUCT, 46)
      self.incidental_price_info.write(oprot)
      oprot.writeFieldEnd()
    if self.statistics_info is not None:
      oprot.writeFieldBegin('statistics_info', TType.LIST, 47)
      oprot.writeListBegin(TType.STRUCT, len(self.statistics_info))
      for iter354 in self.statistics_info:
        iter354.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_service_status is not None:
      oprot.writeFieldBegin('hotel_service_status', TType.I32, 48)
      oprot.writeI32(self.hotel_service_status)
      oprot.writeFieldEnd()
    if self.min_price_sale_cost is not None:
      oprot.writeFieldBegin('min_price_sale_cost', TType.I32, 49)
      oprot.writeI32(self.min_price_sale_cost)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_sale_cost is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_sale_cost', TType.I32, 50)
      oprot.writeI32(self.min_price_sub_coupon_sale_cost)
      oprot.writeFieldEnd()
    if self.min_weifang_price is not None:
      oprot.writeFieldBegin('min_weifang_price', TType.I32, 51)
      oprot.writeI32(self.min_weifang_price)
      oprot.writeFieldEnd()
    if self.hours_room_min_price_cansale is not None:
      oprot.writeFieldBegin('hours_room_min_price_cansale', TType.LIST, 52)
      oprot.writeListBegin(TType.STRUCT, len(self.hours_room_min_price_cansale))
      for iter355 in self.hours_room_min_price_cansale:
        iter355.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.simple_mrooms is not None:
      oprot.writeFieldBegin('simple_mrooms', TType.STRING, 53)
      oprot.writeString(self.simple_mrooms)
      oprot.writeFieldEnd()
    if self.min_price_inventories is not None:
      oprot.writeFieldBegin('min_price_inventories', TType.LIST, 54)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_inventories))
      for iter356 in self.min_price_inventories:
        iter356.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_inventories is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_inventories', TType.LIST, 55)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_sub_coupon_inventories))
      for iter357 in self.min_price_sub_coupon_inventories:
        iter357.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.star_type is not None:
      oprot.writeFieldBegin('star_type', TType.I32, 56)
      oprot.writeI32(self.star_type)
      oprot.writeFieldEnd()
    if self.star is not None:
      oprot.writeFieldBegin('star', TType.I32, 57)
      oprot.writeI32(self.star)
      oprot.writeFieldEnd()
    if self.is_economic is not None:
      oprot.writeFieldBegin('is_economic', TType.BOOL, 58)
      oprot.writeBool(self.is_economic)
      oprot.writeFieldEnd()
    if self.promotionStats is not None:
      oprot.writeFieldBegin('promotionStats', TType.LIST, 59)
      oprot.writeListBegin(TType.STRUCT, len(self.promotionStats))
      for iter358 in self.promotionStats:
        iter358.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.has_drr)
    value = (value * 31) ^ hash(self.longcui_info)
    value = (value * 31) ^ hash(self.weifang_info)
    value = (value * 31) ^ hash(self.has_tuan)
    value = (value * 31) ^ hash(self.inventory_type)
    value = (value * 31) ^ hash(self.min_price)
    value = (value * 31) ^ hash(self.min_price_rpid)
    value = (value * 31) ^ hash(self.min_price_roomtypeid)
    value = (value * 31) ^ hash(self.need_guarantee)
    value = (value * 31) ^ hash(self.product_count)
    value = (value * 31) ^ hash(self.product_can_be_showed)
    value = (value * 31) ^ hash(self.promotion_type_count)
    value = (value * 31) ^ hash(self.room_types)
    value = (value * 31) ^ hash(self.shotel_helpfultips)
    value = (value * 31) ^ hash(self.shotel_booking_rules)
    value = (value * 31) ^ hash(self.shotel_invoice_info)
    value = (value * 31) ^ hash(self.mobileonly_struct)
    value = (value * 31) ^ hash(self.has_yufu)
    value = (value * 31) ^ hash(self.product_count_reason)
    value = (value * 31) ^ hash(self.coupon_struct)
    value = (value * 31) ^ hash(self.hongbao_struct)
    value = (value * 31) ^ hash(self.has_timerush_product)
    value = (value * 31) ^ hash(self.min_price_pro_relation_price)
    value = (value * 31) ^ hash(self.mroom_count)
    value = (value * 31) ^ hash(self.is_hotel_inventory_full)
    value = (value * 31) ^ hash(self.min_price_mroomtypeid)
    value = (value * 31) ^ hash(self.zhoubian_struct)
    value = (value * 31) ^ hash(self.has_buy5send1_promotion)
    value = (value * 31) ^ hash(self.has_halfdiscount_promotion)
    value = (value * 31) ^ hash(self.min_price_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_rpid)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_roomtypeid)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_mroomtypeid)
    value = (value * 31) ^ hash(self.firstnight_has_discount)
    value = (value * 31) ^ hash(self.has_danbao_product)
    value = (value * 31) ^ hash(self.allbuyroom_struct)
    value = (value * 31) ^ hash(self.promotion_count)
    value = (value * 31) ^ hash(self.manjian_struct)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_origin)
    value = (value * 31) ^ hash(self.confirm_struct)
    value = (value * 31) ^ hash(self.hotel_flag)
    value = (value * 31) ^ hash(self.has_moremember_products)
    value = (value * 31) ^ hash(self.cp_info)
    value = (value * 31) ^ hash(self.incidental_price_info)
    value = (value * 31) ^ hash(self.statistics_info)
    value = (value * 31) ^ hash(self.hotel_service_status)
    value = (value * 31) ^ hash(self.min_price_sale_cost)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_sale_cost)
    value = (value * 31) ^ hash(self.min_weifang_price)
    value = (value * 31) ^ hash(self.hours_room_min_price_cansale)
    value = (value * 31) ^ hash(self.simple_mrooms)
    value = (value * 31) ^ hash(self.min_price_inventories)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_inventories)
    value = (value * 31) ^ hash(self.star_type)
    value = (value * 31) ^ hash(self.star)
    value = (value * 31) ^ hash(self.is_economic)
    value = (value * 31) ^ hash(self.promotionStats)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimplePromotion:
  """
  Attributes:
   - promotion_id
   - uper_limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotion_id', None, None, ), # 1
    (2, TType.I32, 'uper_limit', None, None, ), # 2
  )

  def __init__(self, promotion_id=None, uper_limit=None,):
    self.promotion_id = promotion_id
    self.uper_limit = uper_limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotion_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uper_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimplePromotion')
    if self.promotion_id is not None:
      oprot.writeFieldBegin('promotion_id', TType.I32, 1)
      oprot.writeI32(self.promotion_id)
      oprot.writeFieldEnd()
    if self.uper_limit is not None:
      oprot.writeFieldBegin('uper_limit', TType.I32, 2)
      oprot.writeI32(self.uper_limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_id)
    value = (value * 31) ^ hash(self.uper_limit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleProduct:
  """
  Attributes:
   - sale_cost
   - sale_price
   - promotion_type
   - inventorys
   - sroom_id
   - rp_id
   - shotel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sale_cost', None, None, ), # 1
    (2, TType.I32, 'sale_price', None, None, ), # 2
    (3, TType.LIST, 'promotion_type', (TType.STRUCT,(SimplePromotion, SimplePromotion.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'inventorys', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 4
    (5, TType.I32, 'sroom_id', None, None, ), # 5
    (6, TType.I32, 'rp_id', None, None, ), # 6
    (7, TType.I32, 'shotel_id', None, None, ), # 7
  )

  def __init__(self, sale_cost=None, sale_price=None, promotion_type=None, inventorys=None, sroom_id=None, rp_id=None, shotel_id=None,):
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.promotion_type = promotion_type
    self.inventorys = inventorys
    self.sroom_id = sroom_id
    self.rp_id = rp_id
    self.shotel_id = shotel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sale_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sale_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.promotion_type = []
          (_etype362, _size359) = iprot.readListBegin()
          for _i363 in xrange(_size359):
            _elem364 = SimplePromotion()
            _elem364.read(iprot)
            self.promotion_type.append(_elem364)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.inventorys = []
          (_etype368, _size365) = iprot.readListBegin()
          for _i369 in xrange(_size365):
            _elem370 = Inventory()
            _elem370.read(iprot)
            self.inventorys.append(_elem370)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleProduct')
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.I32, 1)
      oprot.writeI32(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.I32, 2)
      oprot.writeI32(self.sale_price)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_type))
      for iter371 in self.promotion_type:
        iter371.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inventorys is not None:
      oprot.writeFieldBegin('inventorys', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.inventorys))
      for iter372 in self.inventorys:
        iter372.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 5)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 6)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 7)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.inventorys)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.shotel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleMRoom:
  """
  Attributes:
   - mroom_id
   - products
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mroom_id', None, None, ), # 1
    (2, TType.LIST, 'products', (TType.STRUCT,(SimpleProduct, SimpleProduct.thrift_spec)), None, ), # 2
  )

  def __init__(self, mroom_id=None, products=None,):
    self.mroom_id = mroom_id
    self.products = products

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.products = []
          (_etype376, _size373) = iprot.readListBegin()
          for _i377 in xrange(_size373):
            _elem378 = SimpleProduct()
            _elem378.read(iprot)
            self.products.append(_elem378)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleMRoom')
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 1)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.products is not None:
      oprot.writeFieldBegin('products', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.products))
      for iter379 in self.products:
        iter379.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.products)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListProductInfo:
  """
  Attributes:
   - return_min_price_product
   - need_sorted_top_product
   - top_product_num
   - sort_types
   - return_min_stay_product
   - return_min_ac_price_simple_product
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'return_min_price_product', None, None, ), # 1
    (2, TType.BOOL, 'need_sorted_top_product', None, None, ), # 2
    (3, TType.I32, 'top_product_num', None, None, ), # 3
    (4, TType.I32, 'sort_types', None, None, ), # 4
    (5, TType.BOOL, 'return_min_stay_product', None, None, ), # 5
    (6, TType.BOOL, 'return_min_ac_price_simple_product', None, None, ), # 6
  )

  def __init__(self, return_min_price_product=None, need_sorted_top_product=None, top_product_num=None, sort_types=None, return_min_stay_product=None, return_min_ac_price_simple_product=None,):
    self.return_min_price_product = return_min_price_product
    self.need_sorted_top_product = need_sorted_top_product
    self.top_product_num = top_product_num
    self.sort_types = sort_types
    self.return_min_stay_product = return_min_stay_product
    self.return_min_ac_price_simple_product = return_min_ac_price_simple_product

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.return_min_price_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.need_sorted_top_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.top_product_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sort_types = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.return_min_stay_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.return_min_ac_price_simple_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListProductInfo')
    if self.return_min_price_product is not None:
      oprot.writeFieldBegin('return_min_price_product', TType.BOOL, 1)
      oprot.writeBool(self.return_min_price_product)
      oprot.writeFieldEnd()
    if self.need_sorted_top_product is not None:
      oprot.writeFieldBegin('need_sorted_top_product', TType.BOOL, 2)
      oprot.writeBool(self.need_sorted_top_product)
      oprot.writeFieldEnd()
    if self.top_product_num is not None:
      oprot.writeFieldBegin('top_product_num', TType.I32, 3)
      oprot.writeI32(self.top_product_num)
      oprot.writeFieldEnd()
    if self.sort_types is not None:
      oprot.writeFieldBegin('sort_types', TType.I32, 4)
      oprot.writeI32(self.sort_types)
      oprot.writeFieldEnd()
    if self.return_min_stay_product is not None:
      oprot.writeFieldBegin('return_min_stay_product', TType.BOOL, 5)
      oprot.writeBool(self.return_min_stay_product)
      oprot.writeFieldEnd()
    if self.return_min_ac_price_simple_product is not None:
      oprot.writeFieldBegin('return_min_ac_price_simple_product', TType.BOOL, 6)
      oprot.writeBool(self.return_min_ac_price_simple_product)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.return_min_price_product)
    value = (value * 31) ^ hash(self.need_sorted_top_product)
    value = (value * 31) ^ hash(self.top_product_num)
    value = (value * 31) ^ hash(self.sort_types)
    value = (value * 31) ^ hash(self.return_min_stay_product)
    value = (value * 31) ^ hash(self.return_min_ac_price_simple_product)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionBlackList:
  """
  Attributes:
   - method_type
   - promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'method_type', None, None, ), # 1
    (2, TType.I32, 'promotion_type', None, None, ), # 2
  )

  def __init__(self, method_type=None, promotion_type=None,):
    self.method_type = method_type
    self.promotion_type = promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.method_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionBlackList')
    if self.method_type is not None:
      oprot.writeFieldBegin('method_type', TType.I32, 1)
      oprot.writeI32(self.method_type)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 2)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.method_type)
    value = (value * 31) ^ hash(self.promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductTypeBlackList:
  """
  Attributes:
   - product_type
   - supplier_ids
   - partial_match
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_type', None, None, ), # 1
    (2, TType.LIST, 'supplier_ids', (TType.I64,None), None, ), # 2
    (3, TType.BOOL, 'partial_match', None, None, ), # 3
  )

  def __init__(self, product_type=None, supplier_ids=None, partial_match=None,):
    self.product_type = product_type
    self.supplier_ids = supplier_ids
    self.partial_match = partial_match

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.supplier_ids = []
          (_etype383, _size380) = iprot.readListBegin()
          for _i384 in xrange(_size380):
            _elem385 = iprot.readI64()
            self.supplier_ids.append(_elem385)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.partial_match = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductTypeBlackList')
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I32, 1)
      oprot.writeI32(self.product_type)
      oprot.writeFieldEnd()
    if self.supplier_ids is not None:
      oprot.writeFieldBegin('supplier_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.supplier_ids))
      for iter386 in self.supplier_ids:
        oprot.writeI64(iter386)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partial_match is not None:
      oprot.writeFieldBegin('partial_match', TType.BOOL, 3)
      oprot.writeBool(self.partial_match)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.supplier_ids)
    value = (value * 31) ^ hash(self.partial_match)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterCondition:
  """
  Attributes:
   - type
   - use_or_not
   - filter_value
   - apply_level
   - exclude_value_array
   - partial_match
   - ptb_array
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'use_or_not', None, None, ), # 2
    (3, TType.I32, 'filter_value', None, None, ), # 3
    (4, TType.I32, 'apply_level', None, None, ), # 4
    (5, TType.LIST, 'exclude_value_array', (TType.I64,None), None, ), # 5
    (6, TType.BOOL, 'partial_match', None, None, ), # 6
    (7, TType.LIST, 'ptb_array', (TType.STRUCT,(ProductTypeBlackList, ProductTypeBlackList.thrift_spec)), None, ), # 7
  )

  def __init__(self, type=None, use_or_not=None, filter_value=None, apply_level=None, exclude_value_array=None, partial_match=None, ptb_array=None,):
    self.type = type
    self.use_or_not = use_or_not
    self.filter_value = filter_value
    self.apply_level = apply_level
    self.exclude_value_array = exclude_value_array
    self.partial_match = partial_match
    self.ptb_array = ptb_array

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.use_or_not = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.filter_value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.apply_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.exclude_value_array = []
          (_etype390, _size387) = iprot.readListBegin()
          for _i391 in xrange(_size387):
            _elem392 = iprot.readI64()
            self.exclude_value_array.append(_elem392)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.partial_match = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.ptb_array = []
          (_etype396, _size393) = iprot.readListBegin()
          for _i397 in xrange(_size393):
            _elem398 = ProductTypeBlackList()
            _elem398.read(iprot)
            self.ptb_array.append(_elem398)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterCondition')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.use_or_not is not None:
      oprot.writeFieldBegin('use_or_not', TType.I32, 2)
      oprot.writeI32(self.use_or_not)
      oprot.writeFieldEnd()
    if self.filter_value is not None:
      oprot.writeFieldBegin('filter_value', TType.I32, 3)
      oprot.writeI32(self.filter_value)
      oprot.writeFieldEnd()
    if self.apply_level is not None:
      oprot.writeFieldBegin('apply_level', TType.I32, 4)
      oprot.writeI32(self.apply_level)
      oprot.writeFieldEnd()
    if self.exclude_value_array is not None:
      oprot.writeFieldBegin('exclude_value_array', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.exclude_value_array))
      for iter399 in self.exclude_value_array:
        oprot.writeI64(iter399)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partial_match is not None:
      oprot.writeFieldBegin('partial_match', TType.BOOL, 6)
      oprot.writeBool(self.partial_match)
      oprot.writeFieldEnd()
    if self.ptb_array is not None:
      oprot.writeFieldBegin('ptb_array', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.ptb_array))
      for iter400 in self.ptb_array:
        iter400.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.use_or_not)
    value = (value * 31) ^ hash(self.filter_value)
    value = (value * 31) ^ hash(self.apply_level)
    value = (value * 31) ^ hash(self.exclude_value_array)
    value = (value * 31) ^ hash(self.partial_match)
    value = (value * 31) ^ hash(self.ptb_array)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Grandson:
  """
  Attributes:
   - codes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'codes', (TType.I32,None), None, ), # 1
  )

  def __init__(self, codes=None,):
    self.codes = codes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.codes = []
          (_etype404, _size401) = iprot.readListBegin()
          for _i405 in xrange(_size401):
            _elem406 = iprot.readI32()
            self.codes.append(_elem406)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Grandson')
    if self.codes is not None:
      oprot.writeFieldBegin('codes', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.codes))
      for iter407 in self.codes:
        oprot.writeI32(iter407)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.codes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomerTraitUnit:
  """
  Attributes:
   - code
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.LIST, 'values', (TType.I32,None), None, ), # 2
  )

  def __init__(self, code=None, values=None,):
    self.code = code
    self.values = values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.values = []
          (_etype411, _size408) = iprot.readListBegin()
          for _i412 in xrange(_size408):
            _elem413 = iprot.readI32()
            self.values.append(_elem413)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomerTraitUnit')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.values))
      for iter414 in self.values:
        oprot.writeI32(iter414)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.values)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomerTrait:
  """
  Attributes:
   - trait_units
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'trait_units', (TType.STRUCT,(CustomerTraitUnit, CustomerTraitUnit.thrift_spec)), None, ), # 1
  )

  def __init__(self, trait_units=None,):
    self.trait_units = trait_units

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.trait_units = []
          (_etype418, _size415) = iprot.readListBegin()
          for _i419 in xrange(_size415):
            _elem420 = CustomerTraitUnit()
            _elem420.read(iprot)
            self.trait_units.append(_elem420)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomerTrait')
    if self.trait_units is not None:
      oprot.writeFieldBegin('trait_units', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.trait_units))
      for iter421 in self.trait_units:
        iter421.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.trait_units)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GroupInfo:
  """
  Attributes:
   - group_id
   - elong_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.I32, 'elong_level', None, None, ), # 2
  )

  def __init__(self, group_id=None, elong_level=None,):
    self.group_id = group_id
    self.elong_level = elong_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.elong_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GroupInfo')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.elong_level is not None:
      oprot.writeFieldBegin('elong_level', TType.I32, 2)
      oprot.writeI32(self.elong_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.elong_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupRelation:
  """
  Attributes:
   - group_id
   - type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.LIST, 'type_list', (TType.STRUCT,(PromotionTypeMsg, PromotionTypeMsg.thrift_spec)), None, ), # 2
  )

  def __init__(self, group_id=None, type_list=None,):
    self.group_id = group_id
    self.type_list = type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype425, _size422) = iprot.readListBegin()
          for _i426 in xrange(_size422):
            _elem427 = PromotionTypeMsg()
            _elem427.read(iprot)
            self.type_list.append(_elem427)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupRelation')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.type_list))
      for iter428 in self.type_list:
        iter428.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.type_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupType:
  """
  Attributes:
   - group_type_type
   - promotion_group_relation
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_type_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_group_relation', (TType.STRUCT,(PromotionGroupRelation, PromotionGroupRelation.thrift_spec)), None, ), # 2
  )

  def __init__(self, group_type_type=None, promotion_group_relation=None,):
    self.group_type_type = group_type_type
    self.promotion_group_relation = promotion_group_relation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_type_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_group_relation = []
          (_etype432, _size429) = iprot.readListBegin()
          for _i433 in xrange(_size429):
            _elem434 = PromotionGroupRelation()
            _elem434.read(iprot)
            self.promotion_group_relation.append(_elem434)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupType')
    if self.group_type_type is not None:
      oprot.writeFieldBegin('group_type_type', TType.I32, 1)
      oprot.writeI32(self.group_type_type)
      oprot.writeFieldEnd()
    if self.promotion_group_relation is not None:
      oprot.writeFieldBegin('promotion_group_relation', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group_relation))
      for iter435 in self.promotion_group_relation:
        iter435.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_type_type is None:
      raise TProtocol.TProtocolException(message='Required field group_type_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_type_type)
    value = (value * 31) ^ hash(self.promotion_group_relation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionBusiness:
  """
  Attributes:
   - business_type
   - promotion_group_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'business_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_group_type', (TType.STRUCT,(PromotionGroupType, PromotionGroupType.thrift_spec)), None, ), # 2
  )

  def __init__(self, business_type=None, promotion_group_type=None,):
    self.business_type = business_type
    self.promotion_group_type = promotion_group_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.business_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_group_type = []
          (_etype439, _size436) = iprot.readListBegin()
          for _i440 in xrange(_size436):
            _elem441 = PromotionGroupType()
            _elem441.read(iprot)
            self.promotion_group_type.append(_elem441)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionBusiness')
    if self.business_type is not None:
      oprot.writeFieldBegin('business_type', TType.I32, 1)
      oprot.writeI32(self.business_type)
      oprot.writeFieldEnd()
    if self.promotion_group_type is not None:
      oprot.writeFieldBegin('promotion_group_type', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group_type))
      for iter442 in self.promotion_group_type:
        iter442.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.business_type is None:
      raise TProtocol.TProtocolException(message='Required field business_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.business_type)
    value = (value * 31) ^ hash(self.promotion_group_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionOrderFromLine:
  """
  Attributes:
   - order_from_type
   - promotion_business
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'order_from_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_business', (TType.STRUCT,(PromotionBusiness, PromotionBusiness.thrift_spec)), None, ), # 2
  )

  def __init__(self, order_from_type=None, promotion_business=None,):
    self.order_from_type = order_from_type
    self.promotion_business = promotion_business

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.order_from_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_business = []
          (_etype446, _size443) = iprot.readListBegin()
          for _i447 in xrange(_size443):
            _elem448 = PromotionBusiness()
            _elem448.read(iprot)
            self.promotion_business.append(_elem448)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionOrderFromLine')
    if self.order_from_type is not None:
      oprot.writeFieldBegin('order_from_type', TType.I32, 1)
      oprot.writeI32(self.order_from_type)
      oprot.writeFieldEnd()
    if self.promotion_business is not None:
      oprot.writeFieldBegin('promotion_business', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_business))
      for iter449 in self.promotion_business:
        iter449.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.order_from_type is None:
      raise TProtocol.TProtocolException(message='Required field order_from_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_from_type)
    value = (value * 31) ^ hash(self.promotion_business)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupRoot:
  """
  Attributes:
   - promotion_order_from_line
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'promotion_order_from_line', (TType.STRUCT,(PromotionOrderFromLine, PromotionOrderFromLine.thrift_spec)), None, ), # 1
  )

  def __init__(self, promotion_order_from_line=None,):
    self.promotion_order_from_line = promotion_order_from_line

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.promotion_order_from_line = []
          (_etype453, _size450) = iprot.readListBegin()
          for _i454 in xrange(_size450):
            _elem455 = PromotionOrderFromLine()
            _elem455.read(iprot)
            self.promotion_order_from_line.append(_elem455)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupRoot')
    if self.promotion_order_from_line is not None:
      oprot.writeFieldBegin('promotion_order_from_line', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_order_from_line))
      for iter456 in self.promotion_order_from_line:
        iter456.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_order_from_line)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonConf:
  """
  Attributes:
   - promotion_group_root
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'promotion_group_root', (TType.STRUCT,(PromotionGroupRoot, PromotionGroupRoot.thrift_spec)), None, ), # 1
  )

  def __init__(self, promotion_group_root=None,):
    self.promotion_group_root = promotion_group_root

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.promotion_group_root = []
          (_etype460, _size457) = iprot.readListBegin()
          for _i461 in xrange(_size457):
            _elem462 = PromotionGroupRoot()
            _elem462.read(iprot)
            self.promotion_group_root.append(_elem462)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonConf')
    if self.promotion_group_root is not None:
      oprot.writeFieldBegin('promotion_group_root', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group_root))
      for iter463 in self.promotion_group_root:
        iter463.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_group_root)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DcPriceRequest:
  """
  Attributes:
   - mhotel_id
   - shotel_id
   - sroom_type_id
   - rateplan_id
   - checkin_date
   - checkout_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.I32, 'shotel_id', None, None, ), # 2
    (3, TType.I32, 'sroom_type_id', None, None, ), # 3
    (4, TType.I32, 'rateplan_id', None, None, ), # 4
    (5, TType.STRING, 'checkin_date', None, None, ), # 5
    (6, TType.STRING, 'checkout_date', None, None, ), # 6
  )

  def __init__(self, mhotel_id=None, shotel_id=None, sroom_type_id=None, rateplan_id=None, checkin_date=None, checkout_date=None,):
    self.mhotel_id = mhotel_id
    self.shotel_id = shotel_id
    self.sroom_type_id = sroom_type_id
    self.rateplan_id = rateplan_id
    self.checkin_date = checkin_date
    self.checkout_date = checkout_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sroom_type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rateplan_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.checkin_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.checkout_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DcPriceRequest')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 2)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_type_id is not None:
      oprot.writeFieldBegin('sroom_type_id', TType.I32, 3)
      oprot.writeI32(self.sroom_type_id)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I32, 4)
      oprot.writeI32(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.checkin_date is not None:
      oprot.writeFieldBegin('checkin_date', TType.STRING, 5)
      oprot.writeString(self.checkin_date)
      oprot.writeFieldEnd()
    if self.checkout_date is not None:
      oprot.writeFieldBegin('checkout_date', TType.STRING, 6)
      oprot.writeString(self.checkout_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_type_id)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.checkin_date)
    value = (value * 31) ^ hash(self.checkout_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DcPriceResponse:
  """
  Attributes:
   - sale_price
   - return_code
   - return_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'sale_price', None, None, ), # 1
    (2, TType.I32, 'return_code', None, None, ), # 2
    (3, TType.STRING, 'return_msg', None, None, ), # 3
  )

  def __init__(self, sale_price=None, return_code=None, return_msg=None,):
    self.sale_price = sale_price
    self.return_code = return_code
    self.return_msg = return_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DcPriceResponse')
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 1)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 2)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.return_msg is not None:
      oprot.writeFieldBegin('return_msg', TType.STRING, 3)
      oprot.writeString(self.return_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.return_code is None:
      raise TProtocol.TProtocolException(message='Required field return_code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.return_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugPromotion:
  """
  Attributes:
   - date
   - promotion_id
   - promotion_type
   - use_ok
   - reason
   - upperlimit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'promotion_id', None, None, ), # 2
    (3, TType.I32, 'promotion_type', None, None, ), # 3
    (4, TType.BOOL, 'use_ok', None, None, ), # 4
    (5, TType.STRING, 'reason', None, None, ), # 5
    (6, TType.I32, 'upperlimit', None, None, ), # 6
  )

  def __init__(self, date=None, promotion_id=None, promotion_type=None, use_ok=None, reason=None, upperlimit=None,):
    self.date = date
    self.promotion_id = promotion_id
    self.promotion_type = promotion_type
    self.use_ok = use_ok
    self.reason = reason
    self.upperlimit = upperlimit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.use_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.upperlimit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugPromotion')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.promotion_id is not None:
      oprot.writeFieldBegin('promotion_id', TType.I32, 2)
      oprot.writeI32(self.promotion_id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 3)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.use_ok is not None:
      oprot.writeFieldBegin('use_ok', TType.BOOL, 4)
      oprot.writeBool(self.use_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 5)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.upperlimit is not None:
      oprot.writeFieldBegin('upperlimit', TType.I32, 6)
      oprot.writeI32(self.upperlimit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.promotion_id is None:
      raise TProtocol.TProtocolException(message='Required field promotion_id is unset!')
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    if self.use_ok is None:
      raise TProtocol.TProtocolException(message='Required field use_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.promotion_id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.use_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.upperlimit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugDrr:
  """
  Attributes:
   - type
   - drrnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.DOUBLE, 'drrnum', None, None, ), # 2
  )

  def __init__(self, type=None, drrnum=None,):
    self.type = type
    self.drrnum = drrnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.drrnum = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugDrr')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.drrnum is not None:
      oprot.writeFieldBegin('drrnum', TType.DOUBLE, 2)
      oprot.writeDouble(self.drrnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.drrnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugPrice:
  """
  Attributes:
   - date
   - status
   - add_bed_price
   - currency
   - gen_sale_cost
   - gen_sale_price
   - is_add_bed
   - is_hotel_weekend
   - is_price_promotion
   - real_cost
   - sale_cost
   - sale_price
   - sale_price_with_drr
   - weekend_sale_cost
   - weekend_sale_price
   - weekend_price_origin
   - general_price_origin
   - sale_price_with_drr_origin
   - add_bed_price_origin
   - sale_price_with_drr_sub_coupon
   - used_promotion
   - used_drr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I32, 'add_bed_price', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.DOUBLE, 'gen_sale_cost', None, None, ), # 5
    (6, TType.DOUBLE, 'gen_sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_add_bed', None, None, ), # 7
    (8, TType.BOOL, 'is_hotel_weekend', None, None, ), # 8
    (9, TType.BOOL, 'is_price_promotion', None, None, ), # 9
    (10, TType.DOUBLE, 'real_cost', None, None, ), # 10
    (11, TType.DOUBLE, 'sale_cost', None, None, ), # 11
    (12, TType.DOUBLE, 'sale_price', None, None, ), # 12
    (13, TType.DOUBLE, 'sale_price_with_drr', None, None, ), # 13
    (14, TType.DOUBLE, 'weekend_sale_cost', None, None, ), # 14
    (15, TType.DOUBLE, 'weekend_sale_price', None, None, ), # 15
    (16, TType.DOUBLE, 'weekend_price_origin', None, None, ), # 16
    (17, TType.DOUBLE, 'general_price_origin', None, None, ), # 17
    (18, TType.DOUBLE, 'sale_price_with_drr_origin', None, None, ), # 18
    (19, TType.DOUBLE, 'add_bed_price_origin', None, None, ), # 19
    (20, TType.DOUBLE, 'sale_price_with_drr_sub_coupon', None, None, ), # 20
    (21, TType.STRUCT, 'used_promotion', (DebugPromotion, DebugPromotion.thrift_spec), None, ), # 21
    (22, TType.DOUBLE, 'used_drr', None, None, ), # 22
  )

  def __init__(self, date=None, status=None, add_bed_price=None, currency=None, gen_sale_cost=None, gen_sale_price=None, is_add_bed=None, is_hotel_weekend=None, is_price_promotion=None, real_cost=None, sale_cost=None, sale_price=None, sale_price_with_drr=None, weekend_sale_cost=None, weekend_sale_price=None, weekend_price_origin=None, general_price_origin=None, sale_price_with_drr_origin=None, add_bed_price_origin=None, sale_price_with_drr_sub_coupon=None, used_promotion=None, used_drr=None,):
    self.date = date
    self.status = status
    self.add_bed_price = add_bed_price
    self.currency = currency
    self.gen_sale_cost = gen_sale_cost
    self.gen_sale_price = gen_sale_price
    self.is_add_bed = is_add_bed
    self.is_hotel_weekend = is_hotel_weekend
    self.is_price_promotion = is_price_promotion
    self.real_cost = real_cost
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.sale_price_with_drr = sale_price_with_drr
    self.weekend_sale_cost = weekend_sale_cost
    self.weekend_sale_price = weekend_sale_price
    self.weekend_price_origin = weekend_price_origin
    self.general_price_origin = general_price_origin
    self.sale_price_with_drr_origin = sale_price_with_drr_origin
    self.add_bed_price_origin = add_bed_price_origin
    self.sale_price_with_drr_sub_coupon = sale_price_with_drr_sub_coupon
    self.used_promotion = used_promotion
    self.used_drr = used_drr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.add_bed_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.gen_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.gen_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_add_bed = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hotel_weekend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_price_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.real_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.weekend_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.weekend_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.weekend_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.general_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.add_bed_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_sub_coupon = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.used_promotion = DebugPromotion()
          self.used_promotion.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.used_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugPrice')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.add_bed_price is not None:
      oprot.writeFieldBegin('add_bed_price', TType.I32, 3)
      oprot.writeI32(self.add_bed_price)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.gen_sale_cost is not None:
      oprot.writeFieldBegin('gen_sale_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.gen_sale_cost)
      oprot.writeFieldEnd()
    if self.gen_sale_price is not None:
      oprot.writeFieldBegin('gen_sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.gen_sale_price)
      oprot.writeFieldEnd()
    if self.is_add_bed is not None:
      oprot.writeFieldBegin('is_add_bed', TType.BOOL, 7)
      oprot.writeBool(self.is_add_bed)
      oprot.writeFieldEnd()
    if self.is_hotel_weekend is not None:
      oprot.writeFieldBegin('is_hotel_weekend', TType.BOOL, 8)
      oprot.writeBool(self.is_hotel_weekend)
      oprot.writeFieldEnd()
    if self.is_price_promotion is not None:
      oprot.writeFieldBegin('is_price_promotion', TType.BOOL, 9)
      oprot.writeBool(self.is_price_promotion)
      oprot.writeFieldEnd()
    if self.real_cost is not None:
      oprot.writeFieldBegin('real_cost', TType.DOUBLE, 10)
      oprot.writeDouble(self.real_cost)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 11)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 12)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr is not None:
      oprot.writeFieldBegin('sale_price_with_drr', TType.DOUBLE, 13)
      oprot.writeDouble(self.sale_price_with_drr)
      oprot.writeFieldEnd()
    if self.weekend_sale_cost is not None:
      oprot.writeFieldBegin('weekend_sale_cost', TType.DOUBLE, 14)
      oprot.writeDouble(self.weekend_sale_cost)
      oprot.writeFieldEnd()
    if self.weekend_sale_price is not None:
      oprot.writeFieldBegin('weekend_sale_price', TType.DOUBLE, 15)
      oprot.writeDouble(self.weekend_sale_price)
      oprot.writeFieldEnd()
    if self.weekend_price_origin is not None:
      oprot.writeFieldBegin('weekend_price_origin', TType.DOUBLE, 16)
      oprot.writeDouble(self.weekend_price_origin)
      oprot.writeFieldEnd()
    if self.general_price_origin is not None:
      oprot.writeFieldBegin('general_price_origin', TType.DOUBLE, 17)
      oprot.writeDouble(self.general_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin', TType.DOUBLE, 18)
      oprot.writeDouble(self.sale_price_with_drr_origin)
      oprot.writeFieldEnd()
    if self.add_bed_price_origin is not None:
      oprot.writeFieldBegin('add_bed_price_origin', TType.DOUBLE, 19)
      oprot.writeDouble(self.add_bed_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_sub_coupon is not None:
      oprot.writeFieldBegin('sale_price_with_drr_sub_coupon', TType.DOUBLE, 20)
      oprot.writeDouble(self.sale_price_with_drr_sub_coupon)
      oprot.writeFieldEnd()
    if self.used_promotion is not None:
      oprot.writeFieldBegin('used_promotion', TType.STRUCT, 21)
      self.used_promotion.write(oprot)
      oprot.writeFieldEnd()
    if self.used_drr is not None:
      oprot.writeFieldBegin('used_drr', TType.DOUBLE, 22)
      oprot.writeDouble(self.used_drr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.add_bed_price)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.gen_sale_cost)
    value = (value * 31) ^ hash(self.gen_sale_price)
    value = (value * 31) ^ hash(self.is_add_bed)
    value = (value * 31) ^ hash(self.is_hotel_weekend)
    value = (value * 31) ^ hash(self.is_price_promotion)
    value = (value * 31) ^ hash(self.real_cost)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.sale_price_with_drr)
    value = (value * 31) ^ hash(self.weekend_sale_cost)
    value = (value * 31) ^ hash(self.weekend_sale_price)
    value = (value * 31) ^ hash(self.weekend_price_origin)
    value = (value * 31) ^ hash(self.general_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin)
    value = (value * 31) ^ hash(self.add_bed_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_sub_coupon)
    value = (value * 31) ^ hash(self.used_promotion)
    value = (value * 31) ^ hash(self.used_drr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugBaseMajiaStrategy:
  """
  Attributes:
   - key
   - version
   - cashbackAmount
   - cashbackMaxCmsRatio
   - cashbackMaxDiff
   - cashbackAboveQuota
   - prepayDiscount
   - prepayMinPriceRatio
   - prepayMinPriceDiff
   - prepayBelowQuota
   - majiaComfirmFlag
   - majiaAvgProcTimeDiff
   - majiaDisplayChannel
   - majiaValidDateStart
   - majiaValidDateEnd
   - updateTime
   - operator
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'key', None, None, ), # 1
    (2, TType.I32, 'version', None, None, ), # 2
    (3, TType.DOUBLE, 'cashbackAmount', None, None, ), # 3
    (4, TType.DOUBLE, 'cashbackMaxCmsRatio', None, None, ), # 4
    (5, TType.DOUBLE, 'cashbackMaxDiff', None, None, ), # 5
    (6, TType.I32, 'cashbackAboveQuota', None, None, ), # 6
    (7, TType.DOUBLE, 'prepayDiscount', None, None, ), # 7
    (8, TType.DOUBLE, 'prepayMinPriceRatio', None, None, ), # 8
    (9, TType.DOUBLE, 'prepayMinPriceDiff', None, None, ), # 9
    (10, TType.I32, 'prepayBelowQuota', None, None, ), # 10
    (11, TType.I32, 'majiaComfirmFlag', None, None, ), # 11
    (12, TType.DOUBLE, 'majiaAvgProcTimeDiff', None, None, ), # 12
    (13, TType.I32, 'majiaDisplayChannel', None, None, ), # 13
    (14, TType.I64, 'majiaValidDateStart', None, None, ), # 14
    (15, TType.I64, 'majiaValidDateEnd', None, None, ), # 15
    (16, TType.I64, 'updateTime', None, None, ), # 16
    (17, TType.STRING, 'operator', None, None, ), # 17
  )

  def __init__(self, key=None, version=None, cashbackAmount=None, cashbackMaxCmsRatio=None, cashbackMaxDiff=None, cashbackAboveQuota=None, prepayDiscount=None, prepayMinPriceRatio=None, prepayMinPriceDiff=None, prepayBelowQuota=None, majiaComfirmFlag=None, majiaAvgProcTimeDiff=None, majiaDisplayChannel=None, majiaValidDateStart=None, majiaValidDateEnd=None, updateTime=None, operator=None,):
    self.key = key
    self.version = version
    self.cashbackAmount = cashbackAmount
    self.cashbackMaxCmsRatio = cashbackMaxCmsRatio
    self.cashbackMaxDiff = cashbackMaxDiff
    self.cashbackAboveQuota = cashbackAboveQuota
    self.prepayDiscount = prepayDiscount
    self.prepayMinPriceRatio = prepayMinPriceRatio
    self.prepayMinPriceDiff = prepayMinPriceDiff
    self.prepayBelowQuota = prepayBelowQuota
    self.majiaComfirmFlag = majiaComfirmFlag
    self.majiaAvgProcTimeDiff = majiaAvgProcTimeDiff
    self.majiaDisplayChannel = majiaDisplayChannel
    self.majiaValidDateStart = majiaValidDateStart
    self.majiaValidDateEnd = majiaValidDateEnd
    self.updateTime = updateTime
    self.operator = operator

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.key = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.version = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.cashbackAmount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.cashbackMaxCmsRatio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.cashbackMaxDiff = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cashbackAboveQuota = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.prepayDiscount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.prepayMinPriceRatio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.prepayMinPriceDiff = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.prepayBelowQuota = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.majiaComfirmFlag = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.majiaAvgProcTimeDiff = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.majiaDisplayChannel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.majiaValidDateStart = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.majiaValidDateEnd = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.operator = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugBaseMajiaStrategy')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.I32, 1)
      oprot.writeI32(self.key)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 2)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.cashbackAmount is not None:
      oprot.writeFieldBegin('cashbackAmount', TType.DOUBLE, 3)
      oprot.writeDouble(self.cashbackAmount)
      oprot.writeFieldEnd()
    if self.cashbackMaxCmsRatio is not None:
      oprot.writeFieldBegin('cashbackMaxCmsRatio', TType.DOUBLE, 4)
      oprot.writeDouble(self.cashbackMaxCmsRatio)
      oprot.writeFieldEnd()
    if self.cashbackMaxDiff is not None:
      oprot.writeFieldBegin('cashbackMaxDiff', TType.DOUBLE, 5)
      oprot.writeDouble(self.cashbackMaxDiff)
      oprot.writeFieldEnd()
    if self.cashbackAboveQuota is not None:
      oprot.writeFieldBegin('cashbackAboveQuota', TType.I32, 6)
      oprot.writeI32(self.cashbackAboveQuota)
      oprot.writeFieldEnd()
    if self.prepayDiscount is not None:
      oprot.writeFieldBegin('prepayDiscount', TType.DOUBLE, 7)
      oprot.writeDouble(self.prepayDiscount)
      oprot.writeFieldEnd()
    if self.prepayMinPriceRatio is not None:
      oprot.writeFieldBegin('prepayMinPriceRatio', TType.DOUBLE, 8)
      oprot.writeDouble(self.prepayMinPriceRatio)
      oprot.writeFieldEnd()
    if self.prepayMinPriceDiff is not None:
      oprot.writeFieldBegin('prepayMinPriceDiff', TType.DOUBLE, 9)
      oprot.writeDouble(self.prepayMinPriceDiff)
      oprot.writeFieldEnd()
    if self.prepayBelowQuota is not None:
      oprot.writeFieldBegin('prepayBelowQuota', TType.I32, 10)
      oprot.writeI32(self.prepayBelowQuota)
      oprot.writeFieldEnd()
    if self.majiaComfirmFlag is not None:
      oprot.writeFieldBegin('majiaComfirmFlag', TType.I32, 11)
      oprot.writeI32(self.majiaComfirmFlag)
      oprot.writeFieldEnd()
    if self.majiaAvgProcTimeDiff is not None:
      oprot.writeFieldBegin('majiaAvgProcTimeDiff', TType.DOUBLE, 12)
      oprot.writeDouble(self.majiaAvgProcTimeDiff)
      oprot.writeFieldEnd()
    if self.majiaDisplayChannel is not None:
      oprot.writeFieldBegin('majiaDisplayChannel', TType.I32, 13)
      oprot.writeI32(self.majiaDisplayChannel)
      oprot.writeFieldEnd()
    if self.majiaValidDateStart is not None:
      oprot.writeFieldBegin('majiaValidDateStart', TType.I64, 14)
      oprot.writeI64(self.majiaValidDateStart)
      oprot.writeFieldEnd()
    if self.majiaValidDateEnd is not None:
      oprot.writeFieldBegin('majiaValidDateEnd', TType.I64, 15)
      oprot.writeI64(self.majiaValidDateEnd)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 16)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.STRING, 17)
      oprot.writeString(self.operator)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.cashbackAmount)
    value = (value * 31) ^ hash(self.cashbackMaxCmsRatio)
    value = (value * 31) ^ hash(self.cashbackMaxDiff)
    value = (value * 31) ^ hash(self.cashbackAboveQuota)
    value = (value * 31) ^ hash(self.prepayDiscount)
    value = (value * 31) ^ hash(self.prepayMinPriceRatio)
    value = (value * 31) ^ hash(self.prepayMinPriceDiff)
    value = (value * 31) ^ hash(self.prepayBelowQuota)
    value = (value * 31) ^ hash(self.majiaComfirmFlag)
    value = (value * 31) ^ hash(self.majiaAvgProcTimeDiff)
    value = (value * 31) ^ hash(self.majiaDisplayChannel)
    value = (value * 31) ^ hash(self.majiaValidDateStart)
    value = (value * 31) ^ hash(self.majiaValidDateEnd)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.operator)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMajiaProductDescription:
  """
  Attributes:
   - MajiaProductType
   - filteredProductType
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'MajiaProductType', None, None, ), # 1
    (2, TType.I32, 'filteredProductType', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
  )

  def __init__(self, MajiaProductType=None, filteredProductType=None, description=None,):
    self.MajiaProductType = MajiaProductType
    self.filteredProductType = filteredProductType
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.MajiaProductType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.filteredProductType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMajiaProductDescription')
    if self.MajiaProductType is not None:
      oprot.writeFieldBegin('MajiaProductType', TType.I32, 1)
      oprot.writeI32(self.MajiaProductType)
      oprot.writeFieldEnd()
    if self.filteredProductType is not None:
      oprot.writeFieldBegin('filteredProductType', TType.I32, 2)
      oprot.writeI32(self.filteredProductType)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.MajiaProductType)
    value = (value * 31) ^ hash(self.filteredProductType)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMBL:
  """
  Attributes:
   - date
   - price
   - priceFrom
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'date', None, None, ), # 1
    (2, TType.DOUBLE, 'price', None, None, ), # 2
    (3, TType.I32, 'priceFrom', None, None, ), # 3
  )

  def __init__(self, date=None, price=None, priceFrom=None,):
    self.date = date
    self.price = price
    self.priceFrom = priceFrom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priceFrom = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMBL')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 1)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.priceFrom is not None:
      oprot.writeFieldBegin('priceFrom', TType.I32, 3)
      oprot.writeI32(self.priceFrom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.priceFrom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugZYDJ:
  """
  Attributes:
   - date
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'date', None, None, ), # 1
    (2, TType.DOUBLE, 'price', None, None, ), # 2
  )

  def __init__(self, date=None, price=None,):
    self.date = date
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugZYDJ')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 1)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMajia:
  """
  Attributes:
   - payType
   - breakfast
   - basePrice
   - salePrice
   - majiaSalePrice
   - baseFlag
   - mbls
   - zydj
   - strategyType
   - baseMajiaStrategy
   - majia_description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'payType', None, None, ), # 1
    (2, TType.I32, 'breakfast', None, None, ), # 2
    (3, TType.DOUBLE, 'basePrice', None, None, ), # 3
    (4, TType.DOUBLE, 'salePrice', None, None, ), # 4
    (5, TType.DOUBLE, 'majiaSalePrice', None, None, ), # 5
    (6, TType.BOOL, 'baseFlag', None, None, ), # 6
    (7, TType.LIST, 'mbls', (TType.STRUCT,(DebugMBL, DebugMBL.thrift_spec)), None, ), # 7
    (8, TType.STRUCT, 'zydj', (DebugZYDJ, DebugZYDJ.thrift_spec), None, ), # 8
    (9, TType.STRING, 'strategyType', None, None, ), # 9
    (10, TType.STRUCT, 'baseMajiaStrategy', (DebugBaseMajiaStrategy, DebugBaseMajiaStrategy.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'majia_description', (DebugMajiaProductDescription, DebugMajiaProductDescription.thrift_spec), None, ), # 11
  )

  def __init__(self, payType=None, breakfast=None, basePrice=None, salePrice=None, majiaSalePrice=None, baseFlag=None, mbls=None, zydj=None, strategyType=None, baseMajiaStrategy=None, majia_description=None,):
    self.payType = payType
    self.breakfast = breakfast
    self.basePrice = basePrice
    self.salePrice = salePrice
    self.majiaSalePrice = majiaSalePrice
    self.baseFlag = baseFlag
    self.mbls = mbls
    self.zydj = zydj
    self.strategyType = strategyType
    self.baseMajiaStrategy = baseMajiaStrategy
    self.majia_description = majia_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.payType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.breakfast = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.basePrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.salePrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.majiaSalePrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.baseFlag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.mbls = []
          (_etype467, _size464) = iprot.readListBegin()
          for _i468 in xrange(_size464):
            _elem469 = DebugMBL()
            _elem469.read(iprot)
            self.mbls.append(_elem469)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.zydj = DebugZYDJ()
          self.zydj.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.strategyType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.baseMajiaStrategy = DebugBaseMajiaStrategy()
          self.baseMajiaStrategy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.majia_description = DebugMajiaProductDescription()
          self.majia_description.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMajia')
    if self.payType is not None:
      oprot.writeFieldBegin('payType', TType.I32, 1)
      oprot.writeI32(self.payType)
      oprot.writeFieldEnd()
    if self.breakfast is not None:
      oprot.writeFieldBegin('breakfast', TType.I32, 2)
      oprot.writeI32(self.breakfast)
      oprot.writeFieldEnd()
    if self.basePrice is not None:
      oprot.writeFieldBegin('basePrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.basePrice)
      oprot.writeFieldEnd()
    if self.salePrice is not None:
      oprot.writeFieldBegin('salePrice', TType.DOUBLE, 4)
      oprot.writeDouble(self.salePrice)
      oprot.writeFieldEnd()
    if self.majiaSalePrice is not None:
      oprot.writeFieldBegin('majiaSalePrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.majiaSalePrice)
      oprot.writeFieldEnd()
    if self.baseFlag is not None:
      oprot.writeFieldBegin('baseFlag', TType.BOOL, 6)
      oprot.writeBool(self.baseFlag)
      oprot.writeFieldEnd()
    if self.mbls is not None:
      oprot.writeFieldBegin('mbls', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.mbls))
      for iter470 in self.mbls:
        iter470.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.zydj is not None:
      oprot.writeFieldBegin('zydj', TType.STRUCT, 8)
      self.zydj.write(oprot)
      oprot.writeFieldEnd()
    if self.strategyType is not None:
      oprot.writeFieldBegin('strategyType', TType.STRING, 9)
      oprot.writeString(self.strategyType)
      oprot.writeFieldEnd()
    if self.baseMajiaStrategy is not None:
      oprot.writeFieldBegin('baseMajiaStrategy', TType.STRUCT, 10)
      self.baseMajiaStrategy.write(oprot)
      oprot.writeFieldEnd()
    if self.majia_description is not None:
      oprot.writeFieldBegin('majia_description', TType.STRUCT, 11)
      self.majia_description.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payType is None:
      raise TProtocol.TProtocolException(message='Required field payType is unset!')
    if self.breakfast is None:
      raise TProtocol.TProtocolException(message='Required field breakfast is unset!')
    if self.baseFlag is None:
      raise TProtocol.TProtocolException(message='Required field baseFlag is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payType)
    value = (value * 31) ^ hash(self.breakfast)
    value = (value * 31) ^ hash(self.basePrice)
    value = (value * 31) ^ hash(self.salePrice)
    value = (value * 31) ^ hash(self.majiaSalePrice)
    value = (value * 31) ^ hash(self.baseFlag)
    value = (value * 31) ^ hash(self.mbls)
    value = (value * 31) ^ hash(self.zydj)
    value = (value * 31) ^ hash(self.strategyType)
    value = (value * 31) ^ hash(self.baseMajiaStrategy)
    value = (value * 31) ^ hash(self.majia_description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DerivativeDesc:
  """
  Attributes:
   - type
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
  )

  def __init__(self, type=None, reason=None,):
    self.type = type
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DerivativeDesc')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.reason)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceDealStep:
  """
  Attributes:
   - main_type
   - sub_type
   - is_handle
   - avg_sale_cost_before
   - avg_sale_price_before
   - avg_sale_price_drr_before
   - avg_sale_price_sub_coupon_before
   - avg_sale_cost_after
   - avg_sale_price_after
   - avg_sale_price_drr_after
   - avg_sale_price_sub_coupon_after
   - handle_desc
   - mbls
   - zydj
   - upper_limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'main_type', None, None, ), # 1
    (2, TType.I32, 'sub_type', None, None, ), # 2
    (3, TType.BOOL, 'is_handle', None, None, ), # 3
    (4, TType.DOUBLE, 'avg_sale_cost_before', None, None, ), # 4
    (5, TType.DOUBLE, 'avg_sale_price_before', None, None, ), # 5
    (6, TType.DOUBLE, 'avg_sale_price_drr_before', None, None, ), # 6
    (7, TType.DOUBLE, 'avg_sale_price_sub_coupon_before', None, None, ), # 7
    (8, TType.DOUBLE, 'avg_sale_cost_after', None, None, ), # 8
    (9, TType.DOUBLE, 'avg_sale_price_after', None, None, ), # 9
    (10, TType.DOUBLE, 'avg_sale_price_drr_after', None, None, ), # 10
    (11, TType.DOUBLE, 'avg_sale_price_sub_coupon_after', None, None, ), # 11
    (12, TType.STRING, 'handle_desc', None, None, ), # 12
    (13, TType.LIST, 'mbls', (TType.STRUCT,(DebugMBL, DebugMBL.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'zydj', (DebugZYDJ, DebugZYDJ.thrift_spec), None, ), # 14
    (15, TType.DOUBLE, 'upper_limit', None, None, ), # 15
  )

  def __init__(self, main_type=None, sub_type=None, is_handle=None, avg_sale_cost_before=None, avg_sale_price_before=None, avg_sale_price_drr_before=None, avg_sale_price_sub_coupon_before=None, avg_sale_cost_after=None, avg_sale_price_after=None, avg_sale_price_drr_after=None, avg_sale_price_sub_coupon_after=None, handle_desc=None, mbls=None, zydj=None, upper_limit=None,):
    self.main_type = main_type
    self.sub_type = sub_type
    self.is_handle = is_handle
    self.avg_sale_cost_before = avg_sale_cost_before
    self.avg_sale_price_before = avg_sale_price_before
    self.avg_sale_price_drr_before = avg_sale_price_drr_before
    self.avg_sale_price_sub_coupon_before = avg_sale_price_sub_coupon_before
    self.avg_sale_cost_after = avg_sale_cost_after
    self.avg_sale_price_after = avg_sale_price_after
    self.avg_sale_price_drr_after = avg_sale_price_drr_after
    self.avg_sale_price_sub_coupon_after = avg_sale_price_sub_coupon_after
    self.handle_desc = handle_desc
    self.mbls = mbls
    self.zydj = zydj
    self.upper_limit = upper_limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.main_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sub_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_handle = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.avg_sale_cost_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_drr_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_sub_coupon_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.avg_sale_cost_after = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_after = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_drr_after = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.avg_sale_price_sub_coupon_after = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.handle_desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.mbls = []
          (_etype474, _size471) = iprot.readListBegin()
          for _i475 in xrange(_size471):
            _elem476 = DebugMBL()
            _elem476.read(iprot)
            self.mbls.append(_elem476)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.zydj = DebugZYDJ()
          self.zydj.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceDealStep')
    if self.main_type is not None:
      oprot.writeFieldBegin('main_type', TType.I32, 1)
      oprot.writeI32(self.main_type)
      oprot.writeFieldEnd()
    if self.sub_type is not None:
      oprot.writeFieldBegin('sub_type', TType.I32, 2)
      oprot.writeI32(self.sub_type)
      oprot.writeFieldEnd()
    if self.is_handle is not None:
      oprot.writeFieldBegin('is_handle', TType.BOOL, 3)
      oprot.writeBool(self.is_handle)
      oprot.writeFieldEnd()
    if self.avg_sale_cost_before is not None:
      oprot.writeFieldBegin('avg_sale_cost_before', TType.DOUBLE, 4)
      oprot.writeDouble(self.avg_sale_cost_before)
      oprot.writeFieldEnd()
    if self.avg_sale_price_before is not None:
      oprot.writeFieldBegin('avg_sale_price_before', TType.DOUBLE, 5)
      oprot.writeDouble(self.avg_sale_price_before)
      oprot.writeFieldEnd()
    if self.avg_sale_price_drr_before is not None:
      oprot.writeFieldBegin('avg_sale_price_drr_before', TType.DOUBLE, 6)
      oprot.writeDouble(self.avg_sale_price_drr_before)
      oprot.writeFieldEnd()
    if self.avg_sale_price_sub_coupon_before is not None:
      oprot.writeFieldBegin('avg_sale_price_sub_coupon_before', TType.DOUBLE, 7)
      oprot.writeDouble(self.avg_sale_price_sub_coupon_before)
      oprot.writeFieldEnd()
    if self.avg_sale_cost_after is not None:
      oprot.writeFieldBegin('avg_sale_cost_after', TType.DOUBLE, 8)
      oprot.writeDouble(self.avg_sale_cost_after)
      oprot.writeFieldEnd()
    if self.avg_sale_price_after is not None:
      oprot.writeFieldBegin('avg_sale_price_after', TType.DOUBLE, 9)
      oprot.writeDouble(self.avg_sale_price_after)
      oprot.writeFieldEnd()
    if self.avg_sale_price_drr_after is not None:
      oprot.writeFieldBegin('avg_sale_price_drr_after', TType.DOUBLE, 10)
      oprot.writeDouble(self.avg_sale_price_drr_after)
      oprot.writeFieldEnd()
    if self.avg_sale_price_sub_coupon_after is not None:
      oprot.writeFieldBegin('avg_sale_price_sub_coupon_after', TType.DOUBLE, 11)
      oprot.writeDouble(self.avg_sale_price_sub_coupon_after)
      oprot.writeFieldEnd()
    if self.handle_desc is not None:
      oprot.writeFieldBegin('handle_desc', TType.STRING, 12)
      oprot.writeString(self.handle_desc)
      oprot.writeFieldEnd()
    if self.mbls is not None:
      oprot.writeFieldBegin('mbls', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.mbls))
      for iter477 in self.mbls:
        iter477.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.zydj is not None:
      oprot.writeFieldBegin('zydj', TType.STRUCT, 14)
      self.zydj.write(oprot)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 15)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.main_type is None:
      raise TProtocol.TProtocolException(message='Required field main_type is unset!')
    if self.sub_type is None:
      raise TProtocol.TProtocolException(message='Required field sub_type is unset!')
    if self.is_handle is None:
      raise TProtocol.TProtocolException(message='Required field is_handle is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.main_type)
    value = (value * 31) ^ hash(self.sub_type)
    value = (value * 31) ^ hash(self.is_handle)
    value = (value * 31) ^ hash(self.avg_sale_cost_before)
    value = (value * 31) ^ hash(self.avg_sale_price_before)
    value = (value * 31) ^ hash(self.avg_sale_price_drr_before)
    value = (value * 31) ^ hash(self.avg_sale_price_sub_coupon_before)
    value = (value * 31) ^ hash(self.avg_sale_cost_after)
    value = (value * 31) ^ hash(self.avg_sale_price_after)
    value = (value * 31) ^ hash(self.avg_sale_price_drr_after)
    value = (value * 31) ^ hash(self.avg_sale_price_sub_coupon_after)
    value = (value * 31) ^ hash(self.handle_desc)
    value = (value * 31) ^ hash(self.mbls)
    value = (value * 31) ^ hash(self.zydj)
    value = (value * 31) ^ hash(self.upper_limit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugProduct:
  """
  Attributes:
   - product_id
   - rp_id
   - mroom_id
   - mroom_name
   - shotel_id
   - sroom_id
   - rp_name
   - return_ok
   - reason
   - promotion_all
   - drr
   - promotion
   - price
   - majia
   - derivative_type
   - mis_avg_sale_cost
   - mis_avg_sale_price
   - pay_type
   - price_deal_steps
   - majia_reason
   - derivative_reason
   - breakfast
   - baseFlag
   - others
   - reason_id
   - inventory_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_id', None, None, ), # 1
    (2, TType.I32, 'rp_id', None, None, ), # 2
    (3, TType.I32, 'mroom_id', None, None, ), # 3
    (4, TType.STRING, 'mroom_name', None, None, ), # 4
    (5, TType.I32, 'shotel_id', None, None, ), # 5
    (6, TType.I32, 'sroom_id', None, None, ), # 6
    (7, TType.STRING, 'rp_name', None, None, ), # 7
    (8, TType.BOOL, 'return_ok', None, None, ), # 8
    (9, TType.STRING, 'reason', None, None, ), # 9
    (10, TType.STRING, 'promotion_all', None, None, ), # 10
    (11, TType.LIST, 'drr', (TType.STRUCT,(DebugDrr, DebugDrr.thrift_spec)), None, ), # 11
    (12, TType.LIST, 'promotion', (TType.STRUCT,(DebugPromotion, DebugPromotion.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'price', (TType.STRUCT,(DebugPrice, DebugPrice.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'majia', (DebugMajia, DebugMajia.thrift_spec), None, ), # 14
    (15, TType.I32, 'derivative_type', None, None, ), # 15
    (16, TType.DOUBLE, 'mis_avg_sale_cost', None, None, ), # 16
    (17, TType.DOUBLE, 'mis_avg_sale_price', None, None, ), # 17
    (18, TType.I32, 'pay_type', None, None, ), # 18
    (19, TType.LIST, 'price_deal_steps', (TType.STRUCT,(PriceDealStep, PriceDealStep.thrift_spec)), None, ), # 19
    (20, TType.STRING, 'majia_reason', None, None, ), # 20
    (21, TType.LIST, 'derivative_reason', (TType.STRUCT,(DerivativeDesc, DerivativeDesc.thrift_spec)), None, ), # 21
    (22, TType.I32, 'breakfast', None, None, ), # 22
    (23, TType.MAP, 'baseFlag', (TType.STRING,None,TType.BOOL,None), None, ), # 23
    (24, TType.MAP, 'others', (TType.STRING,None,TType.STRING,None), None, ), # 24
    (25, TType.I32, 'reason_id', None, None, ), # 25
    (26, TType.I16, 'inventory_type', None, None, ), # 26
  )

  def __init__(self, product_id=None, rp_id=None, mroom_id=None, mroom_name=None, shotel_id=None, sroom_id=None, rp_name=None, return_ok=None, reason=None, promotion_all=None, drr=None, promotion=None, price=None, majia=None, derivative_type=None, mis_avg_sale_cost=None, mis_avg_sale_price=None, pay_type=None, price_deal_steps=None, majia_reason=None, derivative_reason=None, breakfast=None, baseFlag=None, others=None, reason_id=None, inventory_type=None,):
    self.product_id = product_id
    self.rp_id = rp_id
    self.mroom_id = mroom_id
    self.mroom_name = mroom_name
    self.shotel_id = shotel_id
    self.sroom_id = sroom_id
    self.rp_name = rp_name
    self.return_ok = return_ok
    self.reason = reason
    self.promotion_all = promotion_all
    self.drr = drr
    self.promotion = promotion
    self.price = price
    self.majia = majia
    self.derivative_type = derivative_type
    self.mis_avg_sale_cost = mis_avg_sale_cost
    self.mis_avg_sale_price = mis_avg_sale_price
    self.pay_type = pay_type
    self.price_deal_steps = price_deal_steps
    self.majia_reason = majia_reason
    self.derivative_reason = derivative_reason
    self.breakfast = breakfast
    self.baseFlag = baseFlag
    self.others = others
    self.reason_id = reason_id
    self.inventory_type = inventory_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.rp_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.promotion_all = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.drr = []
          (_etype481, _size478) = iprot.readListBegin()
          for _i482 in xrange(_size478):
            _elem483 = DebugDrr()
            _elem483.read(iprot)
            self.drr.append(_elem483)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.promotion = []
          (_etype487, _size484) = iprot.readListBegin()
          for _i488 in xrange(_size484):
            _elem489 = DebugPromotion()
            _elem489.read(iprot)
            self.promotion.append(_elem489)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.price = []
          (_etype493, _size490) = iprot.readListBegin()
          for _i494 in xrange(_size490):
            _elem495 = DebugPrice()
            _elem495.read(iprot)
            self.price.append(_elem495)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.majia = DebugMajia()
          self.majia.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.derivative_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.mis_avg_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.mis_avg_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.pay_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.price_deal_steps = []
          (_etype499, _size496) = iprot.readListBegin()
          for _i500 in xrange(_size496):
            _elem501 = PriceDealStep()
            _elem501.read(iprot)
            self.price_deal_steps.append(_elem501)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.majia_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.derivative_reason = []
          (_etype505, _size502) = iprot.readListBegin()
          for _i506 in xrange(_size502):
            _elem507 = DerivativeDesc()
            _elem507.read(iprot)
            self.derivative_reason.append(_elem507)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.breakfast = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.MAP:
          self.baseFlag = {}
          (_ktype509, _vtype510, _size508 ) = iprot.readMapBegin()
          for _i512 in xrange(_size508):
            _key513 = iprot.readString()
            _val514 = iprot.readBool()
            self.baseFlag[_key513] = _val514
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.MAP:
          self.others = {}
          (_ktype516, _vtype517, _size515 ) = iprot.readMapBegin()
          for _i519 in xrange(_size515):
            _key520 = iprot.readString()
            _val521 = iprot.readString()
            self.others[_key520] = _val521
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.reason_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I16:
          self.inventory_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugProduct')
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 1)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 2)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 3)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 4)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 5)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 6)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_name is not None:
      oprot.writeFieldBegin('rp_name', TType.STRING, 7)
      oprot.writeString(self.rp_name)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 8)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 9)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.promotion_all is not None:
      oprot.writeFieldBegin('promotion_all', TType.STRING, 10)
      oprot.writeString(self.promotion_all)
      oprot.writeFieldEnd()
    if self.drr is not None:
      oprot.writeFieldBegin('drr', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.drr))
      for iter522 in self.drr:
        iter522.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion is not None:
      oprot.writeFieldBegin('promotion', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion))
      for iter523 in self.promotion:
        iter523.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.price))
      for iter524 in self.price:
        iter524.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.majia is not None:
      oprot.writeFieldBegin('majia', TType.STRUCT, 14)
      self.majia.write(oprot)
      oprot.writeFieldEnd()
    if self.derivative_type is not None:
      oprot.writeFieldBegin('derivative_type', TType.I32, 15)
      oprot.writeI32(self.derivative_type)
      oprot.writeFieldEnd()
    if self.mis_avg_sale_cost is not None:
      oprot.writeFieldBegin('mis_avg_sale_cost', TType.DOUBLE, 16)
      oprot.writeDouble(self.mis_avg_sale_cost)
      oprot.writeFieldEnd()
    if self.mis_avg_sale_price is not None:
      oprot.writeFieldBegin('mis_avg_sale_price', TType.DOUBLE, 17)
      oprot.writeDouble(self.mis_avg_sale_price)
      oprot.writeFieldEnd()
    if self.pay_type is not None:
      oprot.writeFieldBegin('pay_type', TType.I32, 18)
      oprot.writeI32(self.pay_type)
      oprot.writeFieldEnd()
    if self.price_deal_steps is not None:
      oprot.writeFieldBegin('price_deal_steps', TType.LIST, 19)
      oprot.writeListBegin(TType.STRUCT, len(self.price_deal_steps))
      for iter525 in self.price_deal_steps:
        iter525.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.majia_reason is not None:
      oprot.writeFieldBegin('majia_reason', TType.STRING, 20)
      oprot.writeString(self.majia_reason)
      oprot.writeFieldEnd()
    if self.derivative_reason is not None:
      oprot.writeFieldBegin('derivative_reason', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.derivative_reason))
      for iter526 in self.derivative_reason:
        iter526.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.breakfast is not None:
      oprot.writeFieldBegin('breakfast', TType.I32, 22)
      oprot.writeI32(self.breakfast)
      oprot.writeFieldEnd()
    if self.baseFlag is not None:
      oprot.writeFieldBegin('baseFlag', TType.MAP, 23)
      oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.baseFlag))
      for kiter527,viter528 in self.baseFlag.items():
        oprot.writeString(kiter527)
        oprot.writeBool(viter528)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.others is not None:
      oprot.writeFieldBegin('others', TType.MAP, 24)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.others))
      for kiter529,viter530 in self.others.items():
        oprot.writeString(kiter529)
        oprot.writeString(viter530)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.reason_id is not None:
      oprot.writeFieldBegin('reason_id', TType.I32, 25)
      oprot.writeI32(self.reason_id)
      oprot.writeFieldEnd()
    if self.inventory_type is not None:
      oprot.writeFieldBegin('inventory_type', TType.I16, 26)
      oprot.writeI16(self.inventory_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.product_id is None:
      raise TProtocol.TProtocolException(message='Required field product_id is unset!')
    if self.rp_id is None:
      raise TProtocol.TProtocolException(message='Required field rp_id is unset!')
    if self.mroom_id is None:
      raise TProtocol.TProtocolException(message='Required field mroom_id is unset!')
    if self.mroom_name is None:
      raise TProtocol.TProtocolException(message='Required field mroom_name is unset!')
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.rp_name is None:
      raise TProtocol.TProtocolException(message='Required field rp_name is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_name)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.promotion_all)
    value = (value * 31) ^ hash(self.drr)
    value = (value * 31) ^ hash(self.promotion)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.majia)
    value = (value * 31) ^ hash(self.derivative_type)
    value = (value * 31) ^ hash(self.mis_avg_sale_cost)
    value = (value * 31) ^ hash(self.mis_avg_sale_price)
    value = (value * 31) ^ hash(self.pay_type)
    value = (value * 31) ^ hash(self.price_deal_steps)
    value = (value * 31) ^ hash(self.majia_reason)
    value = (value * 31) ^ hash(self.derivative_reason)
    value = (value * 31) ^ hash(self.breakfast)
    value = (value * 31) ^ hash(self.baseFlag)
    value = (value * 31) ^ hash(self.others)
    value = (value * 31) ^ hash(self.reason_id)
    value = (value * 31) ^ hash(self.inventory_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugSRoom:
  """
  Attributes:
   - sroom_id
   - return_ok
   - reason
   - product
   - inventory_type
   - majia_reason
   - derivative_reason
   - mroom_name
   - mroom_id
   - reason_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sroom_id', None, None, ), # 1
    (2, TType.BOOL, 'return_ok', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.LIST, 'product', (TType.STRUCT,(DebugProduct, DebugProduct.thrift_spec)), None, ), # 4
    (5, TType.I32, 'inventory_type', None, None, ), # 5
    (6, TType.STRING, 'majia_reason', None, None, ), # 6
    (7, TType.LIST, 'derivative_reason', (TType.STRUCT,(DerivativeDesc, DerivativeDesc.thrift_spec)), None, ), # 7
    (8, TType.STRING, 'mroom_name', None, None, ), # 8
    (9, TType.I32, 'mroom_id', None, None, ), # 9
    (10, TType.I32, 'reason_id', None, None, ), # 10
  )

  def __init__(self, sroom_id=None, return_ok=None, reason=None, product=None, inventory_type=None, majia_reason=None, derivative_reason=None, mroom_name=None, mroom_id=None, reason_id=None,):
    self.sroom_id = sroom_id
    self.return_ok = return_ok
    self.reason = reason
    self.product = product
    self.inventory_type = inventory_type
    self.majia_reason = majia_reason
    self.derivative_reason = derivative_reason
    self.mroom_name = mroom_name
    self.mroom_id = mroom_id
    self.reason_id = reason_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.product = []
          (_etype534, _size531) = iprot.readListBegin()
          for _i535 in xrange(_size531):
            _elem536 = DebugProduct()
            _elem536.read(iprot)
            self.product.append(_elem536)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.inventory_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.majia_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.derivative_reason = []
          (_etype540, _size537) = iprot.readListBegin()
          for _i541 in xrange(_size537):
            _elem542 = DerivativeDesc()
            _elem542.read(iprot)
            self.derivative_reason.append(_elem542)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.reason_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugSRoom')
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 1)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 2)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.product is not None:
      oprot.writeFieldBegin('product', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.product))
      for iter543 in self.product:
        iter543.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inventory_type is not None:
      oprot.writeFieldBegin('inventory_type', TType.I32, 5)
      oprot.writeI32(self.inventory_type)
      oprot.writeFieldEnd()
    if self.majia_reason is not None:
      oprot.writeFieldBegin('majia_reason', TType.STRING, 6)
      oprot.writeString(self.majia_reason)
      oprot.writeFieldEnd()
    if self.derivative_reason is not None:
      oprot.writeFieldBegin('derivative_reason', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.derivative_reason))
      for iter544 in self.derivative_reason:
        iter544.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 8)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 9)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.reason_id is not None:
      oprot.writeFieldBegin('reason_id', TType.I32, 10)
      oprot.writeI32(self.reason_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.product)
    value = (value * 31) ^ hash(self.inventory_type)
    value = (value * 31) ^ hash(self.majia_reason)
    value = (value * 31) ^ hash(self.derivative_reason)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.reason_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugSHotel:
  """
  Attributes:
   - shotel_id
   - return_ok
   - reason
   - promotion_all
   - sroom
   - promotion
   - supplier_name
   - supplier_id
   - majia_reason
   - derivative_reason
   - reason_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.BOOL, 'return_ok', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.STRING, 'promotion_all', None, None, ), # 4
    (5, TType.LIST, 'sroom', (TType.STRUCT,(DebugSRoom, DebugSRoom.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'promotion', (TType.STRUCT,(DebugPromotion, DebugPromotion.thrift_spec)), None, ), # 6
    (7, TType.STRING, 'supplier_name', None, None, ), # 7
    (8, TType.I32, 'supplier_id', None, None, ), # 8
    (9, TType.STRING, 'majia_reason', None, None, ), # 9
    (10, TType.LIST, 'derivative_reason', (TType.STRUCT,(DerivativeDesc, DerivativeDesc.thrift_spec)), None, ), # 10
    (11, TType.I32, 'reason_id', None, None, ), # 11
  )

  def __init__(self, shotel_id=None, return_ok=None, reason=None, promotion_all=None, sroom=None, promotion=None, supplier_name=None, supplier_id=None, majia_reason=None, derivative_reason=None, reason_id=None,):
    self.shotel_id = shotel_id
    self.return_ok = return_ok
    self.reason = reason
    self.promotion_all = promotion_all
    self.sroom = sroom
    self.promotion = promotion
    self.supplier_name = supplier_name
    self.supplier_id = supplier_id
    self.majia_reason = majia_reason
    self.derivative_reason = derivative_reason
    self.reason_id = reason_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.promotion_all = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.sroom = []
          (_etype548, _size545) = iprot.readListBegin()
          for _i549 in xrange(_size545):
            _elem550 = DebugSRoom()
            _elem550.read(iprot)
            self.sroom.append(_elem550)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.promotion = []
          (_etype554, _size551) = iprot.readListBegin()
          for _i555 in xrange(_size551):
            _elem556 = DebugPromotion()
            _elem556.read(iprot)
            self.promotion.append(_elem556)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.supplier_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.majia_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.derivative_reason = []
          (_etype560, _size557) = iprot.readListBegin()
          for _i561 in xrange(_size557):
            _elem562 = DerivativeDesc()
            _elem562.read(iprot)
            self.derivative_reason.append(_elem562)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.reason_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugSHotel')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 2)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.promotion_all is not None:
      oprot.writeFieldBegin('promotion_all', TType.STRING, 4)
      oprot.writeString(self.promotion_all)
      oprot.writeFieldEnd()
    if self.sroom is not None:
      oprot.writeFieldBegin('sroom', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.sroom))
      for iter563 in self.sroom:
        iter563.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion is not None:
      oprot.writeFieldBegin('promotion', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion))
      for iter564 in self.promotion:
        iter564.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 7)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I32, 8)
      oprot.writeI32(self.supplier_id)
      oprot.writeFieldEnd()
    if self.majia_reason is not None:
      oprot.writeFieldBegin('majia_reason', TType.STRING, 9)
      oprot.writeString(self.majia_reason)
      oprot.writeFieldEnd()
    if self.derivative_reason is not None:
      oprot.writeFieldBegin('derivative_reason', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.derivative_reason))
      for iter565 in self.derivative_reason:
        iter565.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reason_id is not None:
      oprot.writeFieldBegin('reason_id', TType.I32, 11)
      oprot.writeI32(self.reason_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.promotion_all)
    value = (value * 31) ^ hash(self.sroom)
    value = (value * 31) ^ hash(self.promotion)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.majia_reason)
    value = (value * 31) ^ hash(self.derivative_reason)
    value = (value * 31) ^ hash(self.reason_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMRoom:
  """
  Attributes:
   - mroom_id
   - majia_reason
   - return_ok
   - reason
   - derivative_reason
   - baseFlag
   - others
   - reason_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mroom_id', None, None, ), # 1
    (2, TType.STRING, 'majia_reason', None, None, ), # 2
    (3, TType.BOOL, 'return_ok', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.LIST, 'derivative_reason', (TType.STRUCT,(DerivativeDesc, DerivativeDesc.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'baseFlag', (TType.STRING,None,TType.BOOL,None), None, ), # 6
    (7, TType.MAP, 'others', (TType.STRING,None,TType.STRING,None), None, ), # 7
    (8, TType.I32, 'reason_id', None, None, ), # 8
  )

  def __init__(self, mroom_id=None, majia_reason=None, return_ok=None, reason=None, derivative_reason=None, baseFlag=None, others=None, reason_id=None,):
    self.mroom_id = mroom_id
    self.majia_reason = majia_reason
    self.return_ok = return_ok
    self.reason = reason
    self.derivative_reason = derivative_reason
    self.baseFlag = baseFlag
    self.others = others
    self.reason_id = reason_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.majia_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.derivative_reason = []
          (_etype569, _size566) = iprot.readListBegin()
          for _i570 in xrange(_size566):
            _elem571 = DerivativeDesc()
            _elem571.read(iprot)
            self.derivative_reason.append(_elem571)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.baseFlag = {}
          (_ktype573, _vtype574, _size572 ) = iprot.readMapBegin()
          for _i576 in xrange(_size572):
            _key577 = iprot.readString()
            _val578 = iprot.readBool()
            self.baseFlag[_key577] = _val578
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.others = {}
          (_ktype580, _vtype581, _size579 ) = iprot.readMapBegin()
          for _i583 in xrange(_size579):
            _key584 = iprot.readString()
            _val585 = iprot.readString()
            self.others[_key584] = _val585
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.reason_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMRoom')
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 1)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.majia_reason is not None:
      oprot.writeFieldBegin('majia_reason', TType.STRING, 2)
      oprot.writeString(self.majia_reason)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 3)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.derivative_reason is not None:
      oprot.writeFieldBegin('derivative_reason', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.derivative_reason))
      for iter586 in self.derivative_reason:
        iter586.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.baseFlag is not None:
      oprot.writeFieldBegin('baseFlag', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.baseFlag))
      for kiter587,viter588 in self.baseFlag.items():
        oprot.writeString(kiter587)
        oprot.writeBool(viter588)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.others is not None:
      oprot.writeFieldBegin('others', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.others))
      for kiter589,viter590 in self.others.items():
        oprot.writeString(kiter589)
        oprot.writeString(viter590)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.reason_id is not None:
      oprot.writeFieldBegin('reason_id', TType.I32, 8)
      oprot.writeI32(self.reason_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mroom_id is None:
      raise TProtocol.TProtocolException(message='Required field mroom_id is unset!')
    if self.majia_reason is None:
      raise TProtocol.TProtocolException(message='Required field majia_reason is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.majia_reason)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.derivative_reason)
    value = (value * 31) ^ hash(self.baseFlag)
    value = (value * 31) ^ hash(self.others)
    value = (value * 31) ^ hash(self.reason_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMHotel:
  """
  Attributes:
   - mhotel_id
   - shotel
   - majia_reason
   - mroom
   - reason
   - derivative_reason
   - baseFlag
   - others
   - reason_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel', (TType.STRUCT,(DebugSHotel, DebugSHotel.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'majia_reason', None, None, ), # 3
    (4, TType.LIST, 'mroom', (TType.STRUCT,(DebugMRoom, DebugMRoom.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'reason', None, None, ), # 5
    (6, TType.LIST, 'derivative_reason', (TType.STRUCT,(DerivativeDesc, DerivativeDesc.thrift_spec)), None, ), # 6
    (7, TType.MAP, 'baseFlag', (TType.STRING,None,TType.BOOL,None), None, ), # 7
    (8, TType.MAP, 'others', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.I32, 'reason_id', None, None, ), # 9
  )

  def __init__(self, mhotel_id=None, shotel=None, majia_reason=None, mroom=None, reason=None, derivative_reason=None, baseFlag=None, others=None, reason_id=None,):
    self.mhotel_id = mhotel_id
    self.shotel = shotel
    self.majia_reason = majia_reason
    self.mroom = mroom
    self.reason = reason
    self.derivative_reason = derivative_reason
    self.baseFlag = baseFlag
    self.others = others
    self.reason_id = reason_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel = []
          (_etype594, _size591) = iprot.readListBegin()
          for _i595 in xrange(_size591):
            _elem596 = DebugSHotel()
            _elem596.read(iprot)
            self.shotel.append(_elem596)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.majia_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.mroom = []
          (_etype600, _size597) = iprot.readListBegin()
          for _i601 in xrange(_size597):
            _elem602 = DebugMRoom()
            _elem602.read(iprot)
            self.mroom.append(_elem602)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.derivative_reason = []
          (_etype606, _size603) = iprot.readListBegin()
          for _i607 in xrange(_size603):
            _elem608 = DerivativeDesc()
            _elem608.read(iprot)
            self.derivative_reason.append(_elem608)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.baseFlag = {}
          (_ktype610, _vtype611, _size609 ) = iprot.readMapBegin()
          for _i613 in xrange(_size609):
            _key614 = iprot.readString()
            _val615 = iprot.readBool()
            self.baseFlag[_key614] = _val615
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.others = {}
          (_ktype617, _vtype618, _size616 ) = iprot.readMapBegin()
          for _i620 in xrange(_size616):
            _key621 = iprot.readString()
            _val622 = iprot.readString()
            self.others[_key621] = _val622
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.reason_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMHotel')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel is not None:
      oprot.writeFieldBegin('shotel', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel))
      for iter623 in self.shotel:
        iter623.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.majia_reason is not None:
      oprot.writeFieldBegin('majia_reason', TType.STRING, 3)
      oprot.writeString(self.majia_reason)
      oprot.writeFieldEnd()
    if self.mroom is not None:
      oprot.writeFieldBegin('mroom', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.mroom))
      for iter624 in self.mroom:
        iter624.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 5)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.derivative_reason is not None:
      oprot.writeFieldBegin('derivative_reason', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.derivative_reason))
      for iter625 in self.derivative_reason:
        iter625.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.baseFlag is not None:
      oprot.writeFieldBegin('baseFlag', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.baseFlag))
      for kiter626,viter627 in self.baseFlag.items():
        oprot.writeString(kiter626)
        oprot.writeBool(viter627)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.others is not None:
      oprot.writeFieldBegin('others', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.others))
      for kiter628,viter629 in self.others.items():
        oprot.writeString(kiter628)
        oprot.writeString(viter629)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.reason_id is not None:
      oprot.writeFieldBegin('reason_id', TType.I32, 9)
      oprot.writeI32(self.reason_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel)
    value = (value * 31) ^ hash(self.majia_reason)
    value = (value * 31) ^ hash(self.mroom)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.derivative_reason)
    value = (value * 31) ^ hash(self.baseFlag)
    value = (value * 31) ^ hash(self.others)
    value = (value * 31) ^ hash(self.reason_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugResponse:
  """
  Attributes:
   - mhotel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'mhotel', (DebugMHotel, DebugMHotel.thrift_spec), None, ), # 1
  )

  def __init__(self, mhotel=None,):
    self.mhotel = mhotel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.mhotel = DebugMHotel()
          self.mhotel.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugResponse')
    if self.mhotel is not None:
      oprot.writeFieldBegin('mhotel', TType.STRUCT, 1)
      self.mhotel.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCreditLiveInfo:
  """
  Attributes:
   - flash_live_filter
   - credit_live_filter
   - credit_value_live_filter
   - user_credit_value
   - flash_live_period
   - credit_live_period
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'flash_live_filter', None, None, ), # 1
    (2, TType.BOOL, 'credit_live_filter', None, None, ), # 2
    (3, TType.BOOL, 'credit_value_live_filter', None, None, ), # 3
    (4, TType.DOUBLE, 'user_credit_value', None, None, ), # 4
    (5, TType.I32, 'flash_live_period', None, None, ), # 5
    (6, TType.I32, 'credit_live_period', None, None, ), # 6
  )

  def __init__(self, flash_live_filter=None, credit_live_filter=None, credit_value_live_filter=None, user_credit_value=None, flash_live_period=None, credit_live_period=None,):
    self.flash_live_filter = flash_live_filter
    self.credit_live_filter = credit_live_filter
    self.credit_value_live_filter = credit_value_live_filter
    self.user_credit_value = user_credit_value
    self.flash_live_period = flash_live_period
    self.credit_live_period = credit_live_period

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.flash_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.credit_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.credit_value_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.user_credit_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.flash_live_period = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.credit_live_period = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCreditLiveInfo')
    if self.flash_live_filter is not None:
      oprot.writeFieldBegin('flash_live_filter', TType.BOOL, 1)
      oprot.writeBool(self.flash_live_filter)
      oprot.writeFieldEnd()
    if self.credit_live_filter is not None:
      oprot.writeFieldBegin('credit_live_filter', TType.BOOL, 2)
      oprot.writeBool(self.credit_live_filter)
      oprot.writeFieldEnd()
    if self.credit_value_live_filter is not None:
      oprot.writeFieldBegin('credit_value_live_filter', TType.BOOL, 3)
      oprot.writeBool(self.credit_value_live_filter)
      oprot.writeFieldEnd()
    if self.user_credit_value is not None:
      oprot.writeFieldBegin('user_credit_value', TType.DOUBLE, 4)
      oprot.writeDouble(self.user_credit_value)
      oprot.writeFieldEnd()
    if self.flash_live_period is not None:
      oprot.writeFieldBegin('flash_live_period', TType.I32, 5)
      oprot.writeI32(self.flash_live_period)
      oprot.writeFieldEnd()
    if self.credit_live_period is not None:
      oprot.writeFieldBegin('credit_live_period', TType.I32, 6)
      oprot.writeI32(self.credit_live_period)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.flash_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field flash_live_filter is unset!')
    if self.credit_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field credit_live_filter is unset!')
    if self.credit_value_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field credit_value_live_filter is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flash_live_filter)
    value = (value * 31) ^ hash(self.credit_live_filter)
    value = (value * 31) ^ hash(self.credit_value_live_filter)
    value = (value * 31) ^ hash(self.user_credit_value)
    value = (value * 31) ^ hash(self.flash_live_period)
    value = (value * 31) ^ hash(self.credit_live_period)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StringModel:
  """
  Attributes:
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
  )

  def __init__(self, content=None,):
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StringModel')
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.content)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductDayInfo:
  """
  Attributes:
   - date
   - has_breakfast
   - has_inventory
   - status
   - sale_cost
   - sale_price
   - is_weekend_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.BOOL, 'has_breakfast', None, None, ), # 2
    (3, TType.BOOL, 'has_inventory', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.DOUBLE, 'sale_cost', None, None, ), # 5
    (6, TType.DOUBLE, 'sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_weekend_price', None, None, ), # 7
  )

  def __init__(self, date=None, has_breakfast=None, has_inventory=None, status=None, sale_cost=None, sale_price=None, is_weekend_price=None,):
    self.date = date
    self.has_breakfast = has_breakfast
    self.has_inventory = has_inventory
    self.status = status
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.is_weekend_price = is_weekend_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.has_inventory = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_weekend_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductDayInfo')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.has_breakfast is not None:
      oprot.writeFieldBegin('has_breakfast', TType.BOOL, 2)
      oprot.writeBool(self.has_breakfast)
      oprot.writeFieldEnd()
    if self.has_inventory is not None:
      oprot.writeFieldBegin('has_inventory', TType.BOOL, 3)
      oprot.writeBool(self.has_inventory)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.is_weekend_price is not None:
      oprot.writeFieldBegin('is_weekend_price', TType.BOOL, 7)
      oprot.writeBool(self.is_weekend_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.has_breakfast)
    value = (value * 31) ^ hash(self.has_inventory)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.is_weekend_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductInfo:
  """
  Attributes:
   - shotel_id
   - mroom_id
   - sroom_id
   - mroom_name
   - rp_id
   - rp_name
   - settlement_type
   - is_hours_room
   - is_direct_sign
   - supplier_type
   - supplier_id
   - supplier_name
   - product_day_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'mroom_id', None, None, ), # 2
    (3, TType.I32, 'sroom_id', None, None, ), # 3
    (4, TType.STRING, 'mroom_name', None, None, ), # 4
    (5, TType.I32, 'rp_id', None, None, ), # 5
    (6, TType.STRING, 'rp_name', None, None, ), # 6
    (7, TType.I32, 'settlement_type', None, None, ), # 7
    (8, TType.BOOL, 'is_hours_room', None, None, ), # 8
    (9, TType.BOOL, 'is_direct_sign', None, None, ), # 9
    (10, TType.I32, 'supplier_type', None, None, ), # 10
    (11, TType.I32, 'supplier_id', None, None, ), # 11
    (12, TType.STRING, 'supplier_name', None, None, ), # 12
    (13, TType.LIST, 'product_day_info', (TType.STRUCT,(ProductDayInfo, ProductDayInfo.thrift_spec)), None, ), # 13
  )

  def __init__(self, shotel_id=None, mroom_id=None, sroom_id=None, mroom_name=None, rp_id=None, rp_name=None, settlement_type=None, is_hours_room=None, is_direct_sign=None, supplier_type=None, supplier_id=None, supplier_name=None, product_day_info=None,):
    self.shotel_id = shotel_id
    self.mroom_id = mroom_id
    self.sroom_id = sroom_id
    self.mroom_name = mroom_name
    self.rp_id = rp_id
    self.rp_name = rp_name
    self.settlement_type = settlement_type
    self.is_hours_room = is_hours_room
    self.is_direct_sign = is_direct_sign
    self.supplier_type = supplier_type
    self.supplier_id = supplier_id
    self.supplier_name = supplier_name
    self.product_day_info = product_day_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rp_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.settlement_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hours_room = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_direct_sign = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.supplier_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.supplier_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.product_day_info = []
          (_etype633, _size630) = iprot.readListBegin()
          for _i634 in xrange(_size630):
            _elem635 = ProductDayInfo()
            _elem635.read(iprot)
            self.product_day_info.append(_elem635)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 2)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 3)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 4)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 5)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.rp_name is not None:
      oprot.writeFieldBegin('rp_name', TType.STRING, 6)
      oprot.writeString(self.rp_name)
      oprot.writeFieldEnd()
    if self.settlement_type is not None:
      oprot.writeFieldBegin('settlement_type', TType.I32, 7)
      oprot.writeI32(self.settlement_type)
      oprot.writeFieldEnd()
    if self.is_hours_room is not None:
      oprot.writeFieldBegin('is_hours_room', TType.BOOL, 8)
      oprot.writeBool(self.is_hours_room)
      oprot.writeFieldEnd()
    if self.is_direct_sign is not None:
      oprot.writeFieldBegin('is_direct_sign', TType.BOOL, 9)
      oprot.writeBool(self.is_direct_sign)
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.I32, 10)
      oprot.writeI32(self.supplier_type)
      oprot.writeFieldEnd()
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I32, 11)
      oprot.writeI32(self.supplier_id)
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 12)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.product_day_info is not None:
      oprot.writeFieldBegin('product_day_info', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.product_day_info))
      for iter636 in self.product_day_info:
        iter636.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.rp_name)
    value = (value * 31) ^ hash(self.settlement_type)
    value = (value * 31) ^ hash(self.is_hours_room)
    value = (value * 31) ^ hash(self.is_direct_sign)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.product_day_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelInfo:
  """
  Attributes:
   - mhotel_id
   - product_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'product_info', (TType.STRUCT,(ProductInfo, ProductInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, product_info=None,):
    self.mhotel_id = mhotel_id
    self.product_info = product_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.product_info = []
          (_etype640, _size637) = iprot.readListBegin()
          for _i641 in xrange(_size637):
            _elem642 = ProductInfo()
            _elem642.read(iprot)
            self.product_info.append(_elem642)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelInfo')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.product_info is not None:
      oprot.writeFieldBegin('product_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.product_info))
      for iter643 in self.product_info:
        iter643.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.product_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetProductBaseInfoRequest:
  """
  Attributes:
   - mhotel_ids
   - begin_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_ids', (TType.I32,None), None, ), # 1
    (2, TType.I64, 'begin_date', None, None, ), # 2
    (3, TType.I64, 'end_date', None, None, ), # 3
  )

  def __init__(self, mhotel_ids=None, begin_date=None, end_date=None,):
    self.mhotel_ids = mhotel_ids
    self.begin_date = begin_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_ids = []
          (_etype647, _size644) = iprot.readListBegin()
          for _i648 in xrange(_size644):
            _elem649 = iprot.readI32()
            self.mhotel_ids.append(_elem649)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.begin_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetProductBaseInfoRequest')
    if self.mhotel_ids is not None:
      oprot.writeFieldBegin('mhotel_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.mhotel_ids))
      for iter650 in self.mhotel_ids:
        oprot.writeI32(iter650)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.I64, 2)
      oprot.writeI64(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 3)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_ids is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_ids is unset!')
    if self.begin_date is None:
      raise TProtocol.TProtocolException(message='Required field begin_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_ids)
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetProductBaseInfoResponse:
  """
  Attributes:
   - mhotel_info
   - return_code
   - return_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_info', (TType.STRUCT,(MhotelInfo, MhotelInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'return_code', None, None, ), # 2
    (3, TType.STRING, 'return_msg', None, None, ), # 3
  )

  def __init__(self, mhotel_info=None, return_code=None, return_msg=None,):
    self.mhotel_info = mhotel_info
    self.return_code = return_code
    self.return_msg = return_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_info = []
          (_etype654, _size651) = iprot.readListBegin()
          for _i655 in xrange(_size651):
            _elem656 = MhotelInfo()
            _elem656.read(iprot)
            self.mhotel_info.append(_elem656)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetProductBaseInfoResponse')
    if self.mhotel_info is not None:
      oprot.writeFieldBegin('mhotel_info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_info))
      for iter657 in self.mhotel_info:
        iter657.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 2)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.return_msg is not None:
      oprot.writeFieldBegin('return_msg', TType.STRING, 3)
      oprot.writeString(self.return_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_info)
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.return_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShotelAttr:
  """
  Attributes:
   - shotel_id
   - sroom_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.LIST, 'sroom_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, shotel_id=None, sroom_ids=None,):
    self.shotel_id = shotel_id
    self.sroom_ids = sroom_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sroom_ids = []
          (_etype661, _size658) = iprot.readListBegin()
          for _i662 in xrange(_size658):
            _elem663 = iprot.readI32()
            self.sroom_ids.append(_elem663)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShotelAttr')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_ids is not None:
      oprot.writeFieldBegin('sroom_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.sroom_ids))
      for iter664 in self.sroom_ids:
        oprot.writeI32(iter664)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelShotelAttr:
  """
  Attributes:
   - mhotel_id
   - shotel_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel_attr', (TType.STRUCT,(ShotelAttr, ShotelAttr.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, shotel_attr=None,):
    self.mhotel_id = mhotel_id
    self.shotel_attr = shotel_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel_attr = []
          (_etype668, _size665) = iprot.readListBegin()
          for _i669 in xrange(_size665):
            _elem670 = ShotelAttr()
            _elem670.read(iprot)
            self.shotel_attr.append(_elem670)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelShotelAttr')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_attr is not None:
      oprot.writeFieldBegin('shotel_attr', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_attr))
      for iter671 in self.shotel_attr:
        iter671.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvAndInstantConfirmRequest:
  """
  Attributes:
   - mhotel_attr
   - start_date
   - end_date
   - need_instant_confirm
   - order_from
   - search_from
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_attr', (TType.STRUCT,(MhotelShotelAttr, MhotelShotelAttr.thrift_spec)), None, ), # 1
    (2, TType.I64, 'start_date', None, None, ), # 2
    (3, TType.I64, 'end_date', None, None, ), # 3
    (4, TType.BOOL, 'need_instant_confirm', None, None, ), # 4
    (5, TType.I64, 'order_from', None, None, ), # 5
    (6, TType.I32, 'search_from', None, None, ), # 6
  )

  def __init__(self, mhotel_attr=None, start_date=None, end_date=None, need_instant_confirm=None, order_from=None, search_from=None,):
    self.mhotel_attr = mhotel_attr
    self.start_date = start_date
    self.end_date = end_date
    self.need_instant_confirm = need_instant_confirm
    self.order_from = order_from
    self.search_from = search_from

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_attr = []
          (_etype675, _size672) = iprot.readListBegin()
          for _i676 in xrange(_size672):
            _elem677 = MhotelShotelAttr()
            _elem677.read(iprot)
            self.mhotel_attr.append(_elem677)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.need_instant_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.order_from = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.search_from = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvAndInstantConfirmRequest')
    if self.mhotel_attr is not None:
      oprot.writeFieldBegin('mhotel_attr', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_attr))
      for iter678 in self.mhotel_attr:
        iter678.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I64, 2)
      oprot.writeI64(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 3)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    if self.need_instant_confirm is not None:
      oprot.writeFieldBegin('need_instant_confirm', TType.BOOL, 4)
      oprot.writeBool(self.need_instant_confirm)
      oprot.writeFieldEnd()
    if self.order_from is not None:
      oprot.writeFieldBegin('order_from', TType.I64, 5)
      oprot.writeI64(self.order_from)
      oprot.writeFieldEnd()
    if self.search_from is not None:
      oprot.writeFieldBegin('search_from', TType.I32, 6)
      oprot.writeI32(self.search_from)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_attr is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_attr is unset!')
    if self.start_date is None:
      raise TProtocol.TProtocolException(message='Required field start_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_attr)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.need_instant_confirm)
    value = (value * 31) ^ hash(self.order_from)
    value = (value * 31) ^ hash(self.search_from)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvDetail:
  """
  Attributes:
   - begin_date
   - end_date
   - begin_time
   - end_time
   - available_amount
   - available_date
   - is_over_booking
   - status
   - instant_confirm
   - ic_begin_time
   - ic_end_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'begin_date', None, None, ), # 1
    (2, TType.STRING, 'end_date', None, None, ), # 2
    (3, TType.STRING, 'begin_time', None, None, ), # 3
    (4, TType.STRING, 'end_time', None, None, ), # 4
    (5, TType.I32, 'available_amount', None, None, ), # 5
    (6, TType.STRING, 'available_date', None, None, ), # 6
    (7, TType.I32, 'is_over_booking', None, None, ), # 7
    (8, TType.I32, 'status', None, None, ), # 8
    (9, TType.BOOL, 'instant_confirm', None, None, ), # 9
    (10, TType.STRING, 'ic_begin_time', None, None, ), # 10
    (11, TType.STRING, 'ic_end_time', None, None, ), # 11
  )

  def __init__(self, begin_date=None, end_date=None, begin_time=None, end_time=None, available_amount=None, available_date=None, is_over_booking=None, status=None, instant_confirm=None, ic_begin_time=None, ic_end_time=None,):
    self.begin_date = begin_date
    self.end_date = end_date
    self.begin_time = begin_time
    self.end_time = end_time
    self.available_amount = available_amount
    self.available_date = available_date
    self.is_over_booking = is_over_booking
    self.status = status
    self.instant_confirm = instant_confirm
    self.ic_begin_time = ic_begin_time
    self.ic_end_time = ic_end_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.begin_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.begin_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.available_amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.available_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.is_over_booking = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.instant_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ic_begin_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.ic_end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvDetail')
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.STRING, 1)
      oprot.writeString(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 2)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.begin_time is not None:
      oprot.writeFieldBegin('begin_time', TType.STRING, 3)
      oprot.writeString(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 4)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.available_amount is not None:
      oprot.writeFieldBegin('available_amount', TType.I32, 5)
      oprot.writeI32(self.available_amount)
      oprot.writeFieldEnd()
    if self.available_date is not None:
      oprot.writeFieldBegin('available_date', TType.STRING, 6)
      oprot.writeString(self.available_date)
      oprot.writeFieldEnd()
    if self.is_over_booking is not None:
      oprot.writeFieldBegin('is_over_booking', TType.I32, 7)
      oprot.writeI32(self.is_over_booking)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 8)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.instant_confirm is not None:
      oprot.writeFieldBegin('instant_confirm', TType.BOOL, 9)
      oprot.writeBool(self.instant_confirm)
      oprot.writeFieldEnd()
    if self.ic_begin_time is not None:
      oprot.writeFieldBegin('ic_begin_time', TType.STRING, 10)
      oprot.writeString(self.ic_begin_time)
      oprot.writeFieldEnd()
    if self.ic_end_time is not None:
      oprot.writeFieldBegin('ic_end_time', TType.STRING, 11)
      oprot.writeString(self.ic_end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.begin_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.available_amount)
    value = (value * 31) ^ hash(self.available_date)
    value = (value * 31) ^ hash(self.is_over_booking)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.instant_confirm)
    value = (value * 31) ^ hash(self.ic_begin_time)
    value = (value * 31) ^ hash(self.ic_end_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SroomDetail:
  """
  Attributes:
   - sroom_id
   - inv_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sroom_id', None, None, ), # 1
    (2, TType.LIST, 'inv_detail', (TType.STRUCT,(InvDetail, InvDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, sroom_id=None, inv_detail=None,):
    self.sroom_id = sroom_id
    self.inv_detail = inv_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.inv_detail = []
          (_etype682, _size679) = iprot.readListBegin()
          for _i683 in xrange(_size679):
            _elem684 = InvDetail()
            _elem684.read(iprot)
            self.inv_detail.append(_elem684)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SroomDetail')
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 1)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.inv_detail is not None:
      oprot.writeFieldBegin('inv_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.inv_detail))
      for iter685 in self.inv_detail:
        iter685.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.inv_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShotelDetail:
  """
  Attributes:
   - shotel_id
   - sroom_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.LIST, 'sroom_detail', (TType.STRUCT,(SroomDetail, SroomDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, shotel_id=None, sroom_detail=None,):
    self.shotel_id = shotel_id
    self.sroom_detail = sroom_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sroom_detail = []
          (_etype689, _size686) = iprot.readListBegin()
          for _i690 in xrange(_size686):
            _elem691 = SroomDetail()
            _elem691.read(iprot)
            self.sroom_detail.append(_elem691)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShotelDetail')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_detail is not None:
      oprot.writeFieldBegin('sroom_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sroom_detail))
      for iter692 in self.sroom_detail:
        iter692.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelInfoDetail:
  """
  Attributes:
   - mhotel_id
   - shotel_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel_detail', (TType.STRUCT,(ShotelDetail, ShotelDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, shotel_detail=None,):
    self.mhotel_id = mhotel_id
    self.shotel_detail = shotel_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel_detail = []
          (_etype696, _size693) = iprot.readListBegin()
          for _i697 in xrange(_size693):
            _elem698 = ShotelDetail()
            _elem698.read(iprot)
            self.shotel_detail.append(_elem698)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelInfoDetail')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_detail is not None:
      oprot.writeFieldBegin('shotel_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_detail))
      for iter699 in self.shotel_detail:
        iter699.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvAndInstantConfirmResponse:
  """
  Attributes:
   - mhotel_detail
   - return_code
   - return_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_detail', (TType.STRUCT,(MhotelInfoDetail, MhotelInfoDetail.thrift_spec)), None, ), # 1
    (2, TType.I32, 'return_code', None, None, ), # 2
    (3, TType.STRING, 'return_msg', None, None, ), # 3
  )

  def __init__(self, mhotel_detail=None, return_code=None, return_msg=None,):
    self.mhotel_detail = mhotel_detail
    self.return_code = return_code
    self.return_msg = return_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_detail = []
          (_etype703, _size700) = iprot.readListBegin()
          for _i704 in xrange(_size700):
            _elem705 = MhotelInfoDetail()
            _elem705.read(iprot)
            self.mhotel_detail.append(_elem705)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvAndInstantConfirmResponse')
    if self.mhotel_detail is not None:
      oprot.writeFieldBegin('mhotel_detail', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_detail))
      for iter706 in self.mhotel_detail:
        iter706.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 2)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.return_msg is not None:
      oprot.writeFieldBegin('return_msg', TType.STRING, 3)
      oprot.writeString(self.return_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_detail)
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.return_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchRequest:
  """
  Attributes:
   - mhotel_ids
   - booking_datetime
   - checkin_date
   - checkout_date
   - booking_channel
   - sell_channel
   - customer_level
   - select_price
   - is_limit_timesale
   - price_type
   - product_type
   - settlement_type
   - supplier_type
   - online_search_type
   - promotion_type
   - order_from_id
   - proxy_id
   - promotion_channel_code
   - need7daygift
   - codes
   - return_noinv_or_noprice_product
   - return_has_coupon_hotel
   - return_has_no_danbao_hotel
   - checkin_person_for_oneroom
   - return_has_yufu_hotel
   - onlydebug
   - return_has_timerush_product_hotel
   - bed_type
   - list_product_info
   - return_has_lianzhu_pro_hotel
   - return_has_zaoding_pro_hotel
   - request_origin
   - return_longcuionly_hotel
   - return_has_hongbao_hotel
   - judge_only_has_product
   - half_discount_promotion
   - search_method
   - return_has_discount_promotion_hotel
   - search_id
   - price_sub_coupon
   - return_freesale_msg
   - mhotel_attrs
   - return_has_allbuyroom_hotel
   - return_has_manjian_hotel
   - language
   - discount_method
   - return_discount_hotel
   - min_price_calc_with_halfdiscount_pro
   - botao_customer_level
   - use_botao_promotion
   - use_day_promotion
   - only_consider_salable
   - promotion_black_list
   - return_has_memberbenefits_hotel
   - filter_conditions
   - return_assemble
   - hong_bao_records
   - return_assemble_product
   - booking_menu
   - min_price_excluded_products
   - grandson
   - is_new_hongbao
   - return_has_breakfasts_hotel
   - return_has_xianfu_hotel
   - customer_trait
   - group_info
   - request_type
   - searchFrom
   - traceId
   - onlymajiadebug
   - cooperation_type
   - return_has_resale_hotel
   - has_majia
   - has_zydj
   - majia_zydj_switch
   - return_hotel_ticket_product
   - pre_pay_hotel_level_filter
   - cash_pay_hotel_level_filter
   - order_by_user_credit_filter
   - promotion_percentage_range
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_ids', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'booking_datetime', None, None, ), # 2
    (3, TType.I64, 'checkin_date', None, None, ), # 3
    (4, TType.I64, 'checkout_date', None, None, ), # 4
    (5, TType.I32, 'booking_channel', None, None, ), # 5
    (6, TType.I32, 'sell_channel', None, None, ), # 6
    (7, TType.I32, 'customer_level', None, None, ), # 7
    (8, TType.STRUCT, 'select_price', (SelectPrice, SelectPrice.thrift_spec), None, ), # 8
    (9, TType.BOOL, 'is_limit_timesale', None, None, ), # 9
    (10, TType.I32, 'price_type', None, None, ), # 10
    (11, TType.I32, 'product_type', None, None, ), # 11
    (12, TType.I32, 'settlement_type', None, None, ), # 12
    (13, TType.LIST, 'supplier_type', (TType.I32,None), None, ), # 13
    (14, TType.LIST, 'online_search_type', (TType.I32,None), None, ), # 14
    (15, TType.I32, 'promotion_type', None, None, ), # 15
    (16, TType.I64, 'order_from_id', None, None, ), # 16
    (17, TType.STRING, 'proxy_id', None, None, ), # 17
    (18, TType.STRING, 'promotion_channel_code', None, None, ), # 18
    (19, TType.BOOL, 'need7daygift', None, None, ), # 19
    None, # 20
    None, # 21
    (22, TType.LIST, 'codes', (TType.I32,None), None, ), # 22
    (23, TType.BOOL, 'return_noinv_or_noprice_product', None, None, ), # 23
    (24, TType.BOOL, 'return_has_coupon_hotel', None, None, ), # 24
    (25, TType.BOOL, 'return_has_no_danbao_hotel', None, None, ), # 25
    (26, TType.STRUCT, 'checkin_person_for_oneroom', (CheckInPersonForOneRoom, CheckInPersonForOneRoom.thrift_spec), None, ), # 26
    (27, TType.BOOL, 'return_has_yufu_hotel', None, None, ), # 27
    (28, TType.BOOL, 'onlydebug', None, None, ), # 28
    (29, TType.BOOL, 'return_has_timerush_product_hotel', None, None, ), # 29
    (30, TType.LIST, 'bed_type', (TType.I32,None), None, ), # 30
    (31, TType.STRUCT, 'list_product_info', (ListProductInfo, ListProductInfo.thrift_spec), None, ), # 31
    (32, TType.BOOL, 'return_has_lianzhu_pro_hotel', None, None, ), # 32
    (33, TType.BOOL, 'return_has_zaoding_pro_hotel', None, None, ), # 33
    (34, TType.I32, 'request_origin', None, None, ), # 34
    (35, TType.BOOL, 'return_longcuionly_hotel', None, None, ), # 35
    (36, TType.BOOL, 'return_has_hongbao_hotel', None, None, ), # 36
    (37, TType.BOOL, 'judge_only_has_product', None, None, ), # 37
    (38, TType.BOOL, 'half_discount_promotion', None, None, ), # 38
    (39, TType.I32, 'search_method', None, None, ), # 39
    (40, TType.BOOL, 'return_has_discount_promotion_hotel', None, None, ), # 40
    (41, TType.I64, 'search_id', None, None, ), # 41
    (42, TType.BOOL, 'price_sub_coupon', None, None, ), # 42
    (43, TType.BOOL, 'return_freesale_msg', None, None, ), # 43
    (44, TType.LIST, 'mhotel_attrs', (TType.STRUCT,(MHotelAttr, MHotelAttr.thrift_spec)), None, ), # 44
    (45, TType.BOOL, 'return_has_allbuyroom_hotel', None, None, ), # 45
    (46, TType.BOOL, 'return_has_manjian_hotel', None, None, ), # 46
    (47, TType.I32, 'language', None, None, ), # 47
    (48, TType.I32, 'discount_method', None, None, ), # 48
    (49, TType.I32, 'return_discount_hotel', None, None, ), # 49
    (50, TType.I32, 'min_price_calc_with_halfdiscount_pro', None, None, ), # 50
    (51, TType.I32, 'botao_customer_level', None, None, ), # 51
    (52, TType.BOOL, 'use_botao_promotion', None, None, ), # 52
    (53, TType.BOOL, 'use_day_promotion', None, None, ), # 53
    (54, TType.BOOL, 'only_consider_salable', None, None, ), # 54
    (55, TType.LIST, 'promotion_black_list', (TType.STRUCT,(PromotionBlackList, PromotionBlackList.thrift_spec)), None, ), # 55
    (56, TType.BOOL, 'return_has_memberbenefits_hotel', None, None, ), # 56
    (57, TType.LIST, 'filter_conditions', (TType.STRUCT,(FilterCondition, FilterCondition.thrift_spec)), None, ), # 57
    (58, TType.LIST, 'return_assemble', (TType.I32,None), None, ), # 58
    (59, TType.LIST, 'hong_bao_records', (TType.STRUCT,(HongbaoRecord, HongbaoRecord.thrift_spec)), None, ), # 59
    (60, TType.LIST, 'return_assemble_product', (TType.I32,None), None, ), # 60
    (61, TType.I32, 'booking_menu', None, None, ), # 61
    (62, TType.I32, 'min_price_excluded_products', None, None, ), # 62
    (63, TType.STRUCT, 'grandson', (Grandson, Grandson.thrift_spec), None, ), # 63
    (64, TType.BOOL, 'is_new_hongbao', None, None, ), # 64
    (65, TType.I32, 'return_has_breakfasts_hotel', None, None, ), # 65
    (66, TType.BOOL, 'return_has_xianfu_hotel', None, None, ), # 66
    (67, TType.STRUCT, 'customer_trait', (CustomerTrait, CustomerTrait.thrift_spec), None, ), # 67
    (68, TType.LIST, 'group_info', (TType.STRUCT,(GroupInfo, GroupInfo.thrift_spec)), None, ), # 68
    (69, TType.I32, 'request_type', None, None, ), # 69
    (70, TType.I32, 'searchFrom', None, None, ), # 70
    (71, TType.STRING, 'traceId', None, None, ), # 71
    (72, TType.BOOL, 'onlymajiadebug', None, None, ), # 72
    (73, TType.LIST, 'cooperation_type', (TType.I32,None), None, ), # 73
    (74, TType.BOOL, 'return_has_resale_hotel', None, None, ), # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.BOOL, 'has_majia', None, None, ), # 100
    (101, TType.BOOL, 'has_zydj', None, None, ), # 101
    (102, TType.I32, 'majia_zydj_switch', None, None, ), # 102
    (103, TType.BOOL, 'return_hotel_ticket_product', None, None, ), # 103
    (104, TType.LIST, 'pre_pay_hotel_level_filter', (TType.I32,None), None, ), # 104
    (105, TType.LIST, 'cash_pay_hotel_level_filter', (TType.I32,None), None, ), # 105
    (106, TType.STRUCT, 'order_by_user_credit_filter', (UserCreditLiveInfo, UserCreditLiveInfo.thrift_spec), None, ), # 106
    (107, TType.LIST, 'promotion_percentage_range', (TType.DOUBLE,None), None, ), # 107
  )

  def __init__(self, mhotel_ids=None, booking_datetime=None, checkin_date=None, checkout_date=None, booking_channel=None, sell_channel=None, customer_level=None, select_price=None, is_limit_timesale=None, price_type=None, product_type=None, settlement_type=None, supplier_type=None, online_search_type=None, promotion_type=None, order_from_id=None, proxy_id=None, promotion_channel_code=None, need7daygift=None, codes=None, return_noinv_or_noprice_product=None, return_has_coupon_hotel=None, return_has_no_danbao_hotel=None, checkin_person_for_oneroom=None, return_has_yufu_hotel=None, onlydebug=None, return_has_timerush_product_hotel=None, bed_type=None, list_product_info=None, return_has_lianzhu_pro_hotel=None, return_has_zaoding_pro_hotel=None, request_origin=None, return_longcuionly_hotel=None, return_has_hongbao_hotel=None, judge_only_has_product=None, half_discount_promotion=None, search_method=None, return_has_discount_promotion_hotel=None, search_id=None, price_sub_coupon=None, return_freesale_msg=None, mhotel_attrs=None, return_has_allbuyroom_hotel=None, return_has_manjian_hotel=None, language=None, discount_method=None, return_discount_hotel=None, min_price_calc_with_halfdiscount_pro=None, botao_customer_level=None, use_botao_promotion=None, use_day_promotion=None, only_consider_salable=None, promotion_black_list=None, return_has_memberbenefits_hotel=None, filter_conditions=None, return_assemble=None, hong_bao_records=None, return_assemble_product=None, booking_menu=None, min_price_excluded_products=None, grandson=None, is_new_hongbao=None, return_has_breakfasts_hotel=None, return_has_xianfu_hotel=None, customer_trait=None, group_info=None, request_type=None, searchFrom=None, traceId=None, onlymajiadebug=None, cooperation_type=None, return_has_resale_hotel=None, has_majia=None, has_zydj=None, majia_zydj_switch=None, return_hotel_ticket_product=None, pre_pay_hotel_level_filter=None, cash_pay_hotel_level_filter=None, order_by_user_credit_filter=None, promotion_percentage_range=None,):
    self.mhotel_ids = mhotel_ids
    self.booking_datetime = booking_datetime
    self.checkin_date = checkin_date
    self.checkout_date = checkout_date
    self.booking_channel = booking_channel
    self.sell_channel = sell_channel
    self.customer_level = customer_level
    self.select_price = select_price
    self.is_limit_timesale = is_limit_timesale
    self.price_type = price_type
    self.product_type = product_type
    self.settlement_type = settlement_type
    self.supplier_type = supplier_type
    self.online_search_type = online_search_type
    self.promotion_type = promotion_type
    self.order_from_id = order_from_id
    self.proxy_id = proxy_id
    self.promotion_channel_code = promotion_channel_code
    self.need7daygift = need7daygift
    self.codes = codes
    self.return_noinv_or_noprice_product = return_noinv_or_noprice_product
    self.return_has_coupon_hotel = return_has_coupon_hotel
    self.return_has_no_danbao_hotel = return_has_no_danbao_hotel
    self.checkin_person_for_oneroom = checkin_person_for_oneroom
    self.return_has_yufu_hotel = return_has_yufu_hotel
    self.onlydebug = onlydebug
    self.return_has_timerush_product_hotel = return_has_timerush_product_hotel
    self.bed_type = bed_type
    self.list_product_info = list_product_info
    self.return_has_lianzhu_pro_hotel = return_has_lianzhu_pro_hotel
    self.return_has_zaoding_pro_hotel = return_has_zaoding_pro_hotel
    self.request_origin = request_origin
    self.return_longcuionly_hotel = return_longcuionly_hotel
    self.return_has_hongbao_hotel = return_has_hongbao_hotel
    self.judge_only_has_product = judge_only_has_product
    self.half_discount_promotion = half_discount_promotion
    self.search_method = search_method
    self.return_has_discount_promotion_hotel = return_has_discount_promotion_hotel
    self.search_id = search_id
    self.price_sub_coupon = price_sub_coupon
    self.return_freesale_msg = return_freesale_msg
    self.mhotel_attrs = mhotel_attrs
    self.return_has_allbuyroom_hotel = return_has_allbuyroom_hotel
    self.return_has_manjian_hotel = return_has_manjian_hotel
    self.language = language
    self.discount_method = discount_method
    self.return_discount_hotel = return_discount_hotel
    self.min_price_calc_with_halfdiscount_pro = min_price_calc_with_halfdiscount_pro
    self.botao_customer_level = botao_customer_level
    self.use_botao_promotion = use_botao_promotion
    self.use_day_promotion = use_day_promotion
    self.only_consider_salable = only_consider_salable
    self.promotion_black_list = promotion_black_list
    self.return_has_memberbenefits_hotel = return_has_memberbenefits_hotel
    self.filter_conditions = filter_conditions
    self.return_assemble = return_assemble
    self.hong_bao_records = hong_bao_records
    self.return_assemble_product = return_assemble_product
    self.booking_menu = booking_menu
    self.min_price_excluded_products = min_price_excluded_products
    self.grandson = grandson
    self.is_new_hongbao = is_new_hongbao
    self.return_has_breakfasts_hotel = return_has_breakfasts_hotel
    self.return_has_xianfu_hotel = return_has_xianfu_hotel
    self.customer_trait = customer_trait
    self.group_info = group_info
    self.request_type = request_type
    self.searchFrom = searchFrom
    self.traceId = traceId
    self.onlymajiadebug = onlymajiadebug
    self.cooperation_type = cooperation_type
    self.return_has_resale_hotel = return_has_resale_hotel
    self.has_majia = has_majia
    self.has_zydj = has_zydj
    self.majia_zydj_switch = majia_zydj_switch
    self.return_hotel_ticket_product = return_hotel_ticket_product
    self.pre_pay_hotel_level_filter = pre_pay_hotel_level_filter
    self.cash_pay_hotel_level_filter = cash_pay_hotel_level_filter
    self.order_by_user_credit_filter = order_by_user_credit_filter
    self.promotion_percentage_range = promotion_percentage_range

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_ids = []
          (_etype710, _size707) = iprot.readListBegin()
          for _i711 in xrange(_size707):
            _elem712 = iprot.readI64()
            self.mhotel_ids.append(_elem712)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.booking_datetime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.checkin_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.checkout_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.booking_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sell_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.customer_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.select_price = SelectPrice()
          self.select_price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_limit_timesale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.price_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.settlement_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.supplier_type = []
          (_etype716, _size713) = iprot.readListBegin()
          for _i717 in xrange(_size713):
            _elem718 = iprot.readI32()
            self.supplier_type.append(_elem718)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.online_search_type = []
          (_etype722, _size719) = iprot.readListBegin()
          for _i723 in xrange(_size719):
            _elem724 = iprot.readI32()
            self.online_search_type.append(_elem724)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.order_from_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.proxy_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.promotion_channel_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.need7daygift = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.codes = []
          (_etype728, _size725) = iprot.readListBegin()
          for _i729 in xrange(_size725):
            _elem730 = iprot.readI32()
            self.codes.append(_elem730)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.return_noinv_or_noprice_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.return_has_coupon_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.return_has_no_danbao_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.checkin_person_for_oneroom = CheckInPersonForOneRoom()
          self.checkin_person_for_oneroom.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.return_has_yufu_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.BOOL:
          self.onlydebug = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.return_has_timerush_product_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.LIST:
          self.bed_type = []
          (_etype734, _size731) = iprot.readListBegin()
          for _i735 in xrange(_size731):
            _elem736 = iprot.readI32()
            self.bed_type.append(_elem736)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRUCT:
          self.list_product_info = ListProductInfo()
          self.list_product_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.BOOL:
          self.return_has_lianzhu_pro_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.BOOL:
          self.return_has_zaoding_pro_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.request_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.BOOL:
          self.return_longcuionly_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.BOOL:
          self.return_has_hongbao_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.BOOL:
          self.judge_only_has_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.BOOL:
          self.half_discount_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.search_method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.return_has_discount_promotion_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.search_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.BOOL:
          self.price_sub_coupon = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.BOOL:
          self.return_freesale_msg = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.LIST:
          self.mhotel_attrs = []
          (_etype740, _size737) = iprot.readListBegin()
          for _i741 in xrange(_size737):
            _elem742 = MHotelAttr()
            _elem742.read(iprot)
            self.mhotel_attrs.append(_elem742)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.BOOL:
          self.return_has_allbuyroom_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.BOOL:
          self.return_has_manjian_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.discount_method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.return_discount_hotel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.min_price_calc_with_halfdiscount_pro = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I32:
          self.botao_customer_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.BOOL:
          self.use_botao_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.BOOL:
          self.use_day_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.BOOL:
          self.only_consider_salable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.LIST:
          self.promotion_black_list = []
          (_etype746, _size743) = iprot.readListBegin()
          for _i747 in xrange(_size743):
            _elem748 = PromotionBlackList()
            _elem748.read(iprot)
            self.promotion_black_list.append(_elem748)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.BOOL:
          self.return_has_memberbenefits_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.LIST:
          self.filter_conditions = []
          (_etype752, _size749) = iprot.readListBegin()
          for _i753 in xrange(_size749):
            _elem754 = FilterCondition()
            _elem754.read(iprot)
            self.filter_conditions.append(_elem754)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.LIST:
          self.return_assemble = []
          (_etype758, _size755) = iprot.readListBegin()
          for _i759 in xrange(_size755):
            _elem760 = iprot.readI32()
            self.return_assemble.append(_elem760)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.LIST:
          self.hong_bao_records = []
          (_etype764, _size761) = iprot.readListBegin()
          for _i765 in xrange(_size761):
            _elem766 = HongbaoRecord()
            _elem766.read(iprot)
            self.hong_bao_records.append(_elem766)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.LIST:
          self.return_assemble_product = []
          (_etype770, _size767) = iprot.readListBegin()
          for _i771 in xrange(_size767):
            _elem772 = iprot.readI32()
            self.return_assemble_product.append(_elem772)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.I32:
          self.booking_menu = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.I32:
          self.min_price_excluded_products = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRUCT:
          self.grandson = Grandson()
          self.grandson.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.BOOL:
          self.is_new_hongbao = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.I32:
          self.return_has_breakfasts_hotel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.BOOL:
          self.return_has_xianfu_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.STRUCT:
          self.customer_trait = CustomerTrait()
          self.customer_trait.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.LIST:
          self.group_info = []
          (_etype776, _size773) = iprot.readListBegin()
          for _i777 in xrange(_size773):
            _elem778 = GroupInfo()
            _elem778.read(iprot)
            self.group_info.append(_elem778)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.I32:
          self.request_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.I32:
          self.searchFrom = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.STRING:
          self.traceId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.BOOL:
          self.onlymajiadebug = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.LIST:
          self.cooperation_type = []
          (_etype782, _size779) = iprot.readListBegin()
          for _i783 in xrange(_size779):
            _elem784 = iprot.readI32()
            self.cooperation_type.append(_elem784)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 74:
        if ftype == TType.BOOL:
          self.return_has_resale_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.BOOL:
          self.has_majia = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.BOOL:
          self.has_zydj = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 102:
        if ftype == TType.I32:
          self.majia_zydj_switch = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 103:
        if ftype == TType.BOOL:
          self.return_hotel_ticket_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 104:
        if ftype == TType.LIST:
          self.pre_pay_hotel_level_filter = []
          (_etype788, _size785) = iprot.readListBegin()
          for _i789 in xrange(_size785):
            _elem790 = iprot.readI32()
            self.pre_pay_hotel_level_filter.append(_elem790)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.LIST:
          self.cash_pay_hotel_level_filter = []
          (_etype794, _size791) = iprot.readListBegin()
          for _i795 in xrange(_size791):
            _elem796 = iprot.readI32()
            self.cash_pay_hotel_level_filter.append(_elem796)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 106:
        if ftype == TType.STRUCT:
          self.order_by_user_credit_filter = UserCreditLiveInfo()
          self.order_by_user_credit_filter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 107:
        if ftype == TType.LIST:
          self.promotion_percentage_range = []
          (_etype800, _size797) = iprot.readListBegin()
          for _i801 in xrange(_size797):
            _elem802 = iprot.readDouble()
            self.promotion_percentage_range.append(_elem802)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchRequest')
    if self.mhotel_ids is not None:
      oprot.writeFieldBegin('mhotel_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.mhotel_ids))
      for iter803 in self.mhotel_ids:
        oprot.writeI64(iter803)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_datetime is not None:
      oprot.writeFieldBegin('booking_datetime', TType.I64, 2)
      oprot.writeI64(self.booking_datetime)
      oprot.writeFieldEnd()
    if self.checkin_date is not None:
      oprot.writeFieldBegin('checkin_date', TType.I64, 3)
      oprot.writeI64(self.checkin_date)
      oprot.writeFieldEnd()
    if self.checkout_date is not None:
      oprot.writeFieldBegin('checkout_date', TType.I64, 4)
      oprot.writeI64(self.checkout_date)
      oprot.writeFieldEnd()
    if self.booking_channel is not None:
      oprot.writeFieldBegin('booking_channel', TType.I32, 5)
      oprot.writeI32(self.booking_channel)
      oprot.writeFieldEnd()
    if self.sell_channel is not None:
      oprot.writeFieldBegin('sell_channel', TType.I32, 6)
      oprot.writeI32(self.sell_channel)
      oprot.writeFieldEnd()
    if self.customer_level is not None:
      oprot.writeFieldBegin('customer_level', TType.I32, 7)
      oprot.writeI32(self.customer_level)
      oprot.writeFieldEnd()
    if self.select_price is not None:
      oprot.writeFieldBegin('select_price', TType.STRUCT, 8)
      self.select_price.write(oprot)
      oprot.writeFieldEnd()
    if self.is_limit_timesale is not None:
      oprot.writeFieldBegin('is_limit_timesale', TType.BOOL, 9)
      oprot.writeBool(self.is_limit_timesale)
      oprot.writeFieldEnd()
    if self.price_type is not None:
      oprot.writeFieldBegin('price_type', TType.I32, 10)
      oprot.writeI32(self.price_type)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I32, 11)
      oprot.writeI32(self.product_type)
      oprot.writeFieldEnd()
    if self.settlement_type is not None:
      oprot.writeFieldBegin('settlement_type', TType.I32, 12)
      oprot.writeI32(self.settlement_type)
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.LIST, 13)
      oprot.writeListBegin(TType.I32, len(self.supplier_type))
      for iter804 in self.supplier_type:
        oprot.writeI32(iter804)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.online_search_type is not None:
      oprot.writeFieldBegin('online_search_type', TType.LIST, 14)
      oprot.writeListBegin(TType.I32, len(self.online_search_type))
      for iter805 in self.online_search_type:
        oprot.writeI32(iter805)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 15)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.order_from_id is not None:
      oprot.writeFieldBegin('order_from_id', TType.I64, 16)
      oprot.writeI64(self.order_from_id)
      oprot.writeFieldEnd()
    if self.proxy_id is not None:
      oprot.writeFieldBegin('proxy_id', TType.STRING, 17)
      oprot.writeString(self.proxy_id)
      oprot.writeFieldEnd()
    if self.promotion_channel_code is not None:
      oprot.writeFieldBegin('promotion_channel_code', TType.STRING, 18)
      oprot.writeString(self.promotion_channel_code)
      oprot.writeFieldEnd()
    if self.need7daygift is not None:
      oprot.writeFieldBegin('need7daygift', TType.BOOL, 19)
      oprot.writeBool(self.need7daygift)
      oprot.writeFieldEnd()
    if self.codes is not None:
      oprot.writeFieldBegin('codes', TType.LIST, 22)
      oprot.writeListBegin(TType.I32, len(self.codes))
      for iter806 in self.codes:
        oprot.writeI32(iter806)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_noinv_or_noprice_product is not None:
      oprot.writeFieldBegin('return_noinv_or_noprice_product', TType.BOOL, 23)
      oprot.writeBool(self.return_noinv_or_noprice_product)
      oprot.writeFieldEnd()
    if self.return_has_coupon_hotel is not None:
      oprot.writeFieldBegin('return_has_coupon_hotel', TType.BOOL, 24)
      oprot.writeBool(self.return_has_coupon_hotel)
      oprot.writeFieldEnd()
    if self.return_has_no_danbao_hotel is not None:
      oprot.writeFieldBegin('return_has_no_danbao_hotel', TType.BOOL, 25)
      oprot.writeBool(self.return_has_no_danbao_hotel)
      oprot.writeFieldEnd()
    if self.checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('checkin_person_for_oneroom', TType.STRUCT, 26)
      self.checkin_person_for_oneroom.write(oprot)
      oprot.writeFieldEnd()
    if self.return_has_yufu_hotel is not None:
      oprot.writeFieldBegin('return_has_yufu_hotel', TType.BOOL, 27)
      oprot.writeBool(self.return_has_yufu_hotel)
      oprot.writeFieldEnd()
    if self.onlydebug is not None:
      oprot.writeFieldBegin('onlydebug', TType.BOOL, 28)
      oprot.writeBool(self.onlydebug)
      oprot.writeFieldEnd()
    if self.return_has_timerush_product_hotel is not None:
      oprot.writeFieldBegin('return_has_timerush_product_hotel', TType.BOOL, 29)
      oprot.writeBool(self.return_has_timerush_product_hotel)
      oprot.writeFieldEnd()
    if self.bed_type is not None:
      oprot.writeFieldBegin('bed_type', TType.LIST, 30)
      oprot.writeListBegin(TType.I32, len(self.bed_type))
      for iter807 in self.bed_type:
        oprot.writeI32(iter807)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.list_product_info is not None:
      oprot.writeFieldBegin('list_product_info', TType.STRUCT, 31)
      self.list_product_info.write(oprot)
      oprot.writeFieldEnd()
    if self.return_has_lianzhu_pro_hotel is not None:
      oprot.writeFieldBegin('return_has_lianzhu_pro_hotel', TType.BOOL, 32)
      oprot.writeBool(self.return_has_lianzhu_pro_hotel)
      oprot.writeFieldEnd()
    if self.return_has_zaoding_pro_hotel is not None:
      oprot.writeFieldBegin('return_has_zaoding_pro_hotel', TType.BOOL, 33)
      oprot.writeBool(self.return_has_zaoding_pro_hotel)
      oprot.writeFieldEnd()
    if self.request_origin is not None:
      oprot.writeFieldBegin('request_origin', TType.I32, 34)
      oprot.writeI32(self.request_origin)
      oprot.writeFieldEnd()
    if self.return_longcuionly_hotel is not None:
      oprot.writeFieldBegin('return_longcuionly_hotel', TType.BOOL, 35)
      oprot.writeBool(self.return_longcuionly_hotel)
      oprot.writeFieldEnd()
    if self.return_has_hongbao_hotel is not None:
      oprot.writeFieldBegin('return_has_hongbao_hotel', TType.BOOL, 36)
      oprot.writeBool(self.return_has_hongbao_hotel)
      oprot.writeFieldEnd()
    if self.judge_only_has_product is not None:
      oprot.writeFieldBegin('judge_only_has_product', TType.BOOL, 37)
      oprot.writeBool(self.judge_only_has_product)
      oprot.writeFieldEnd()
    if self.half_discount_promotion is not None:
      oprot.writeFieldBegin('half_discount_promotion', TType.BOOL, 38)
      oprot.writeBool(self.half_discount_promotion)
      oprot.writeFieldEnd()
    if self.search_method is not None:
      oprot.writeFieldBegin('search_method', TType.I32, 39)
      oprot.writeI32(self.search_method)
      oprot.writeFieldEnd()
    if self.return_has_discount_promotion_hotel is not None:
      oprot.writeFieldBegin('return_has_discount_promotion_hotel', TType.BOOL, 40)
      oprot.writeBool(self.return_has_discount_promotion_hotel)
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 41)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.BOOL, 42)
      oprot.writeBool(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.return_freesale_msg is not None:
      oprot.writeFieldBegin('return_freesale_msg', TType.BOOL, 43)
      oprot.writeBool(self.return_freesale_msg)
      oprot.writeFieldEnd()
    if self.mhotel_attrs is not None:
      oprot.writeFieldBegin('mhotel_attrs', TType.LIST, 44)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_attrs))
      for iter808 in self.mhotel_attrs:
        iter808.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_has_allbuyroom_hotel is not None:
      oprot.writeFieldBegin('return_has_allbuyroom_hotel', TType.BOOL, 45)
      oprot.writeBool(self.return_has_allbuyroom_hotel)
      oprot.writeFieldEnd()
    if self.return_has_manjian_hotel is not None:
      oprot.writeFieldBegin('return_has_manjian_hotel', TType.BOOL, 46)
      oprot.writeBool(self.return_has_manjian_hotel)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 47)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.discount_method is not None:
      oprot.writeFieldBegin('discount_method', TType.I32, 48)
      oprot.writeI32(self.discount_method)
      oprot.writeFieldEnd()
    if self.return_discount_hotel is not None:
      oprot.writeFieldBegin('return_discount_hotel', TType.I32, 49)
      oprot.writeI32(self.return_discount_hotel)
      oprot.writeFieldEnd()
    if self.min_price_calc_with_halfdiscount_pro is not None:
      oprot.writeFieldBegin('min_price_calc_with_halfdiscount_pro', TType.I32, 50)
      oprot.writeI32(self.min_price_calc_with_halfdiscount_pro)
      oprot.writeFieldEnd()
    if self.botao_customer_level is not None:
      oprot.writeFieldBegin('botao_customer_level', TType.I32, 51)
      oprot.writeI32(self.botao_customer_level)
      oprot.writeFieldEnd()
    if self.use_botao_promotion is not None:
      oprot.writeFieldBegin('use_botao_promotion', TType.BOOL, 52)
      oprot.writeBool(self.use_botao_promotion)
      oprot.writeFieldEnd()
    if self.use_day_promotion is not None:
      oprot.writeFieldBegin('use_day_promotion', TType.BOOL, 53)
      oprot.writeBool(self.use_day_promotion)
      oprot.writeFieldEnd()
    if self.only_consider_salable is not None:
      oprot.writeFieldBegin('only_consider_salable', TType.BOOL, 54)
      oprot.writeBool(self.only_consider_salable)
      oprot.writeFieldEnd()
    if self.promotion_black_list is not None:
      oprot.writeFieldBegin('promotion_black_list', TType.LIST, 55)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_black_list))
      for iter809 in self.promotion_black_list:
        iter809.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_has_memberbenefits_hotel is not None:
      oprot.writeFieldBegin('return_has_memberbenefits_hotel', TType.BOOL, 56)
      oprot.writeBool(self.return_has_memberbenefits_hotel)
      oprot.writeFieldEnd()
    if self.filter_conditions is not None:
      oprot.writeFieldBegin('filter_conditions', TType.LIST, 57)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_conditions))
      for iter810 in self.filter_conditions:
        iter810.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_assemble is not None:
      oprot.writeFieldBegin('return_assemble', TType.LIST, 58)
      oprot.writeListBegin(TType.I32, len(self.return_assemble))
      for iter811 in self.return_assemble:
        oprot.writeI32(iter811)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hong_bao_records is not None:
      oprot.writeFieldBegin('hong_bao_records', TType.LIST, 59)
      oprot.writeListBegin(TType.STRUCT, len(self.hong_bao_records))
      for iter812 in self.hong_bao_records:
        iter812.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_assemble_product is not None:
      oprot.writeFieldBegin('return_assemble_product', TType.LIST, 60)
      oprot.writeListBegin(TType.I32, len(self.return_assemble_product))
      for iter813 in self.return_assemble_product:
        oprot.writeI32(iter813)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_menu is not None:
      oprot.writeFieldBegin('booking_menu', TType.I32, 61)
      oprot.writeI32(self.booking_menu)
      oprot.writeFieldEnd()
    if self.min_price_excluded_products is not None:
      oprot.writeFieldBegin('min_price_excluded_products', TType.I32, 62)
      oprot.writeI32(self.min_price_excluded_products)
      oprot.writeFieldEnd()
    if self.grandson is not None:
      oprot.writeFieldBegin('grandson', TType.STRUCT, 63)
      self.grandson.write(oprot)
      oprot.writeFieldEnd()
    if self.is_new_hongbao is not None:
      oprot.writeFieldBegin('is_new_hongbao', TType.BOOL, 64)
      oprot.writeBool(self.is_new_hongbao)
      oprot.writeFieldEnd()
    if self.return_has_breakfasts_hotel is not None:
      oprot.writeFieldBegin('return_has_breakfasts_hotel', TType.I32, 65)
      oprot.writeI32(self.return_has_breakfasts_hotel)
      oprot.writeFieldEnd()
    if self.return_has_xianfu_hotel is not None:
      oprot.writeFieldBegin('return_has_xianfu_hotel', TType.BOOL, 66)
      oprot.writeBool(self.return_has_xianfu_hotel)
      oprot.writeFieldEnd()
    if self.customer_trait is not None:
      oprot.writeFieldBegin('customer_trait', TType.STRUCT, 67)
      self.customer_trait.write(oprot)
      oprot.writeFieldEnd()
    if self.group_info is not None:
      oprot.writeFieldBegin('group_info', TType.LIST, 68)
      oprot.writeListBegin(TType.STRUCT, len(self.group_info))
      for iter814 in self.group_info:
        iter814.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.request_type is not None:
      oprot.writeFieldBegin('request_type', TType.I32, 69)
      oprot.writeI32(self.request_type)
      oprot.writeFieldEnd()
    if self.searchFrom is not None:
      oprot.writeFieldBegin('searchFrom', TType.I32, 70)
      oprot.writeI32(self.searchFrom)
      oprot.writeFieldEnd()
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 71)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.onlymajiadebug is not None:
      oprot.writeFieldBegin('onlymajiadebug', TType.BOOL, 72)
      oprot.writeBool(self.onlymajiadebug)
      oprot.writeFieldEnd()
    if self.cooperation_type is not None:
      oprot.writeFieldBegin('cooperation_type', TType.LIST, 73)
      oprot.writeListBegin(TType.I32, len(self.cooperation_type))
      for iter815 in self.cooperation_type:
        oprot.writeI32(iter815)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_has_resale_hotel is not None:
      oprot.writeFieldBegin('return_has_resale_hotel', TType.BOOL, 74)
      oprot.writeBool(self.return_has_resale_hotel)
      oprot.writeFieldEnd()
    if self.has_majia is not None:
      oprot.writeFieldBegin('has_majia', TType.BOOL, 100)
      oprot.writeBool(self.has_majia)
      oprot.writeFieldEnd()
    if self.has_zydj is not None:
      oprot.writeFieldBegin('has_zydj', TType.BOOL, 101)
      oprot.writeBool(self.has_zydj)
      oprot.writeFieldEnd()
    if self.majia_zydj_switch is not None:
      oprot.writeFieldBegin('majia_zydj_switch', TType.I32, 102)
      oprot.writeI32(self.majia_zydj_switch)
      oprot.writeFieldEnd()
    if self.return_hotel_ticket_product is not None:
      oprot.writeFieldBegin('return_hotel_ticket_product', TType.BOOL, 103)
      oprot.writeBool(self.return_hotel_ticket_product)
      oprot.writeFieldEnd()
    if self.pre_pay_hotel_level_filter is not None:
      oprot.writeFieldBegin('pre_pay_hotel_level_filter', TType.LIST, 104)
      oprot.writeListBegin(TType.I32, len(self.pre_pay_hotel_level_filter))
      for iter816 in self.pre_pay_hotel_level_filter:
        oprot.writeI32(iter816)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cash_pay_hotel_level_filter is not None:
      oprot.writeFieldBegin('cash_pay_hotel_level_filter', TType.LIST, 105)
      oprot.writeListBegin(TType.I32, len(self.cash_pay_hotel_level_filter))
      for iter817 in self.cash_pay_hotel_level_filter:
        oprot.writeI32(iter817)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.order_by_user_credit_filter is not None:
      oprot.writeFieldBegin('order_by_user_credit_filter', TType.STRUCT, 106)
      self.order_by_user_credit_filter.write(oprot)
      oprot.writeFieldEnd()
    if self.promotion_percentage_range is not None:
      oprot.writeFieldBegin('promotion_percentage_range', TType.LIST, 107)
      oprot.writeListBegin(TType.DOUBLE, len(self.promotion_percentage_range))
      for iter818 in self.promotion_percentage_range:
        oprot.writeDouble(iter818)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.checkin_date is None:
      raise TProtocol.TProtocolException(message='Required field checkin_date is unset!')
    if self.checkout_date is None:
      raise TProtocol.TProtocolException(message='Required field checkout_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_ids)
    value = (value * 31) ^ hash(self.booking_datetime)
    value = (value * 31) ^ hash(self.checkin_date)
    value = (value * 31) ^ hash(self.checkout_date)
    value = (value * 31) ^ hash(self.booking_channel)
    value = (value * 31) ^ hash(self.sell_channel)
    value = (value * 31) ^ hash(self.customer_level)
    value = (value * 31) ^ hash(self.select_price)
    value = (value * 31) ^ hash(self.is_limit_timesale)
    value = (value * 31) ^ hash(self.price_type)
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.settlement_type)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.online_search_type)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.order_from_id)
    value = (value * 31) ^ hash(self.proxy_id)
    value = (value * 31) ^ hash(self.promotion_channel_code)
    value = (value * 31) ^ hash(self.need7daygift)
    value = (value * 31) ^ hash(self.codes)
    value = (value * 31) ^ hash(self.return_noinv_or_noprice_product)
    value = (value * 31) ^ hash(self.return_has_coupon_hotel)
    value = (value * 31) ^ hash(self.return_has_no_danbao_hotel)
    value = (value * 31) ^ hash(self.checkin_person_for_oneroom)
    value = (value * 31) ^ hash(self.return_has_yufu_hotel)
    value = (value * 31) ^ hash(self.onlydebug)
    value = (value * 31) ^ hash(self.return_has_timerush_product_hotel)
    value = (value * 31) ^ hash(self.bed_type)
    value = (value * 31) ^ hash(self.list_product_info)
    value = (value * 31) ^ hash(self.return_has_lianzhu_pro_hotel)
    value = (value * 31) ^ hash(self.return_has_zaoding_pro_hotel)
    value = (value * 31) ^ hash(self.request_origin)
    value = (value * 31) ^ hash(self.return_longcuionly_hotel)
    value = (value * 31) ^ hash(self.return_has_hongbao_hotel)
    value = (value * 31) ^ hash(self.judge_only_has_product)
    value = (value * 31) ^ hash(self.half_discount_promotion)
    value = (value * 31) ^ hash(self.search_method)
    value = (value * 31) ^ hash(self.return_has_discount_promotion_hotel)
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.return_freesale_msg)
    value = (value * 31) ^ hash(self.mhotel_attrs)
    value = (value * 31) ^ hash(self.return_has_allbuyroom_hotel)
    value = (value * 31) ^ hash(self.return_has_manjian_hotel)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.discount_method)
    value = (value * 31) ^ hash(self.return_discount_hotel)
    value = (value * 31) ^ hash(self.min_price_calc_with_halfdiscount_pro)
    value = (value * 31) ^ hash(self.botao_customer_level)
    value = (value * 31) ^ hash(self.use_botao_promotion)
    value = (value * 31) ^ hash(self.use_day_promotion)
    value = (value * 31) ^ hash(self.only_consider_salable)
    value = (value * 31) ^ hash(self.promotion_black_list)
    value = (value * 31) ^ hash(self.return_has_memberbenefits_hotel)
    value = (value * 31) ^ hash(self.filter_conditions)
    value = (value * 31) ^ hash(self.return_assemble)
    value = (value * 31) ^ hash(self.hong_bao_records)
    value = (value * 31) ^ hash(self.return_assemble_product)
    value = (value * 31) ^ hash(self.booking_menu)
    value = (value * 31) ^ hash(self.min_price_excluded_products)
    value = (value * 31) ^ hash(self.grandson)
    value = (value * 31) ^ hash(self.is_new_hongbao)
    value = (value * 31) ^ hash(self.return_has_breakfasts_hotel)
    value = (value * 31) ^ hash(self.return_has_xianfu_hotel)
    value = (value * 31) ^ hash(self.customer_trait)
    value = (value * 31) ^ hash(self.group_info)
    value = (value * 31) ^ hash(self.request_type)
    value = (value * 31) ^ hash(self.searchFrom)
    value = (value * 31) ^ hash(self.traceId)
    value = (value * 31) ^ hash(self.onlymajiadebug)
    value = (value * 31) ^ hash(self.cooperation_type)
    value = (value * 31) ^ hash(self.return_has_resale_hotel)
    value = (value * 31) ^ hash(self.has_majia)
    value = (value * 31) ^ hash(self.has_zydj)
    value = (value * 31) ^ hash(self.majia_zydj_switch)
    value = (value * 31) ^ hash(self.return_hotel_ticket_product)
    value = (value * 31) ^ hash(self.pre_pay_hotel_level_filter)
    value = (value * 31) ^ hash(self.cash_pay_hotel_level_filter)
    value = (value * 31) ^ hash(self.order_by_user_credit_filter)
    value = (value * 31) ^ hash(self.promotion_percentage_range)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchResponse:
  """
  Attributes:
   - return_code
   - hotels_detail
   - search_id
   - promotion_group
   - debug_response
   - common_conf
   - grandson
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'return_code', None, None, ), # 1
    (2, TType.LIST, 'hotels_detail', (TType.STRUCT,(MHotelDetail, MHotelDetail.thrift_spec)), None, ), # 2
    (3, TType.I64, 'search_id', None, None, ), # 3
    (4, TType.LIST, 'promotion_group', (TType.STRUCT,(PromotionGroup, PromotionGroup.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'debug_response', (TType.STRUCT,(DebugResponse, DebugResponse.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'common_conf', (CommonConf, CommonConf.thrift_spec), None, ), # 6
    (7, TType.I32, 'grandson', None, None, ), # 7
  )

  def __init__(self, return_code=None, hotels_detail=None, search_id=None, promotion_group=None, debug_response=None, common_conf=None, grandson=None,):
    self.return_code = return_code
    self.hotels_detail = hotels_detail
    self.search_id = search_id
    self.promotion_group = promotion_group
    self.debug_response = debug_response
    self.common_conf = common_conf
    self.grandson = grandson

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hotels_detail = []
          (_etype822, _size819) = iprot.readListBegin()
          for _i823 in xrange(_size819):
            _elem824 = MHotelDetail()
            _elem824.read(iprot)
            self.hotels_detail.append(_elem824)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.search_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.promotion_group = []
          (_etype828, _size825) = iprot.readListBegin()
          for _i829 in xrange(_size825):
            _elem830 = PromotionGroup()
            _elem830.read(iprot)
            self.promotion_group.append(_elem830)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.debug_response = []
          (_etype834, _size831) = iprot.readListBegin()
          for _i835 in xrange(_size831):
            _elem836 = DebugResponse()
            _elem836.read(iprot)
            self.debug_response.append(_elem836)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.common_conf = CommonConf()
          self.common_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.grandson = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchResponse')
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 1)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.hotels_detail is not None:
      oprot.writeFieldBegin('hotels_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hotels_detail))
      for iter837 in self.hotels_detail:
        iter837.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 3)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.promotion_group is not None:
      oprot.writeFieldBegin('promotion_group', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group))
      for iter838 in self.promotion_group:
        iter838.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.debug_response is not None:
      oprot.writeFieldBegin('debug_response', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.debug_response))
      for iter839 in self.debug_response:
        iter839.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.common_conf is not None:
      oprot.writeFieldBegin('common_conf', TType.STRUCT, 6)
      self.common_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.grandson is not None:
      oprot.writeFieldBegin('grandson', TType.I32, 7)
      oprot.writeI32(self.grandson)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.return_code is None:
      raise TProtocol.TProtocolException(message='Required field return_code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.hotels_detail)
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.promotion_group)
    value = (value * 31) ^ hash(self.debug_response)
    value = (value * 31) ^ hash(self.common_conf)
    value = (value * 31) ^ hash(self.grandson)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
