#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import se.ttypes
import cm.ttypes
import sug.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DSSInnerSearchResponse:
  """
  Attributes:
   - response
   - pageHotelIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'response', (se.ttypes.InnerSearchResponse, se.ttypes.InnerSearchResponse.thrift_spec), None, ), # 1
    (2, TType.LIST, 'pageHotelIds', (TType.I64,None), None, ), # 2
  )

  def __init__(self, response=None, pageHotelIds=None,):
    self.response = response
    self.pageHotelIds = pageHotelIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.response = se.ttypes.InnerSearchResponse()
          self.response.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.pageHotelIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64()
            self.pageHotelIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DSSInnerSearchResponse')
    if self.response is not None:
      oprot.writeFieldBegin('response', TType.STRUCT, 1)
      self.response.write(oprot)
      oprot.writeFieldEnd()
    if self.pageHotelIds is not None:
      oprot.writeFieldBegin('pageHotelIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.pageHotelIds))
      for iter6 in self.pageHotelIds:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.response)
    value = (value * 31) ^ hash(self.pageHotelIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelIdAttr:
  """
  Attributes:
   - mhotel_id
   - attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mhotel_id', None, None, ), # 1
    (2, TType.I64, 'attr', None, None, ), # 2
  )

  def __init__(self, mhotel_id=None, attr=None,):
    self.mhotel_id = mhotel_id
    self.attr = attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mhotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.attr = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelIdAttr')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I64, 1)
      oprot.writeI64(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.attr is not None:
      oprot.writeFieldBegin('attr', TType.I64, 2)
      oprot.writeI64(self.attr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectedProduct:
  """
  Attributes:
   - shotel_id
   - sroom_id
   - rate_plan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'sroom_id', None, None, ), # 2
    (3, TType.I32, 'rate_plan_id', None, None, ), # 3
  )

  def __init__(self, shotel_id=None, sroom_id=None, rate_plan_id=None,):
    self.shotel_id = shotel_id
    self.sroom_id = sroom_id
    self.rate_plan_id = rate_plan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.rate_plan_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectedProduct')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 2)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I32, 3)
      oprot.writeI32(self.rate_plan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.rate_plan_id is None:
      raise TProtocol.TProtocolException(message='Required field rate_plan_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rate_plan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DSSInnerSearchHotel:
  """
  Attributes:
   - mhotel_id_attr
   - traceId
   - is_list_detail
   - filter_conditions
   - selected_product_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_id_attr', (TType.STRUCT,(HotelIdAttr, HotelIdAttr.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'traceId', None, None, ), # 2
    (3, TType.BOOL, 'is_list_detail', None, None, ), # 3
    (4, TType.LIST, 'filter_conditions', (TType.STRUCT,(cm.ttypes.FilterCondition, cm.ttypes.FilterCondition.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'selected_product_ids', (TType.I64,None,TType.LIST,(TType.STRUCT,(SelectedProduct, SelectedProduct.thrift_spec))), None, ), # 5
  )

  def __init__(self, mhotel_id_attr=None, traceId=None, is_list_detail=None, filter_conditions=None, selected_product_ids=None,):
    self.mhotel_id_attr = mhotel_id_attr
    self.traceId = traceId
    self.is_list_detail = is_list_detail
    self.filter_conditions = filter_conditions
    self.selected_product_ids = selected_product_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_id_attr = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = HotelIdAttr()
            _elem12.read(iprot)
            self.mhotel_id_attr.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.traceId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_list_detail = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.filter_conditions = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = cm.ttypes.FilterCondition()
            _elem18.read(iprot)
            self.filter_conditions.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.selected_product_ids = {}
          (_ktype20, _vtype21, _size19 ) = iprot.readMapBegin()
          for _i23 in xrange(_size19):
            _key24 = iprot.readI64()
            _val25 = []
            (_etype29, _size26) = iprot.readListBegin()
            for _i30 in xrange(_size26):
              _elem31 = SelectedProduct()
              _elem31.read(iprot)
              _val25.append(_elem31)
            iprot.readListEnd()
            self.selected_product_ids[_key24] = _val25
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DSSInnerSearchHotel')
    if self.mhotel_id_attr is not None:
      oprot.writeFieldBegin('mhotel_id_attr', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_id_attr))
      for iter32 in self.mhotel_id_attr:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 2)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.is_list_detail is not None:
      oprot.writeFieldBegin('is_list_detail', TType.BOOL, 3)
      oprot.writeBool(self.is_list_detail)
      oprot.writeFieldEnd()
    if self.filter_conditions is not None:
      oprot.writeFieldBegin('filter_conditions', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_conditions))
      for iter33 in self.filter_conditions:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.selected_product_ids is not None:
      oprot.writeFieldBegin('selected_product_ids', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.selected_product_ids))
      for kiter34,viter35 in self.selected_product_ids.items():
        oprot.writeI64(kiter34)
        oprot.writeListBegin(TType.STRUCT, len(viter35))
        for iter36 in viter35:
          iter36.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id_attr)
    value = (value * 31) ^ hash(self.traceId)
    value = (value * 31) ^ hash(self.is_list_detail)
    value = (value * 31) ^ hash(self.filter_conditions)
    value = (value * 31) ^ hash(self.selected_product_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DayPriceReq:
  """
  Attributes:
   - availableDate
   - salePrice
   - salePriceBeforeDrr
   - saleCostBeforeDrr
   - saleCost
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'availableDate', None, None, ), # 1
    (2, TType.DOUBLE, 'salePrice', None, None, ), # 2
    (3, TType.DOUBLE, 'salePriceBeforeDrr', None, None, ), # 3
    (4, TType.DOUBLE, 'saleCostBeforeDrr', None, None, ), # 4
    (5, TType.DOUBLE, 'saleCost', None, None, ), # 5
  )

  def __init__(self, availableDate=None, salePrice=None, salePriceBeforeDrr=None, saleCostBeforeDrr=None, saleCost=None,):
    self.availableDate = availableDate
    self.salePrice = salePrice
    self.salePriceBeforeDrr = salePriceBeforeDrr
    self.saleCostBeforeDrr = saleCostBeforeDrr
    self.saleCost = saleCost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.availableDate = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.salePrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.salePriceBeforeDrr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.saleCostBeforeDrr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.saleCost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DayPriceReq')
    if self.availableDate is not None:
      oprot.writeFieldBegin('availableDate', TType.I64, 1)
      oprot.writeI64(self.availableDate)
      oprot.writeFieldEnd()
    if self.salePrice is not None:
      oprot.writeFieldBegin('salePrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.salePrice)
      oprot.writeFieldEnd()
    if self.salePriceBeforeDrr is not None:
      oprot.writeFieldBegin('salePriceBeforeDrr', TType.DOUBLE, 3)
      oprot.writeDouble(self.salePriceBeforeDrr)
      oprot.writeFieldEnd()
    if self.saleCostBeforeDrr is not None:
      oprot.writeFieldBegin('saleCostBeforeDrr', TType.DOUBLE, 4)
      oprot.writeDouble(self.saleCostBeforeDrr)
      oprot.writeFieldEnd()
    if self.saleCost is not None:
      oprot.writeFieldBegin('saleCost', TType.DOUBLE, 5)
      oprot.writeDouble(self.saleCost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.availableDate)
    value = (value * 31) ^ hash(self.salePrice)
    value = (value * 31) ^ hash(self.salePriceBeforeDrr)
    value = (value * 31) ^ hash(self.saleCostBeforeDrr)
    value = (value * 31) ^ hash(self.saleCost)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VerifyPriceRequest:
  """
  Attributes:
   - dynamicId
   - hotelId
   - roomTypeId
   - ratePlanId
   - mHotelId
   - checkinDate
   - checkoutDate
   - dynamicProductDetailList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dynamicId', None, None, ), # 1
    (2, TType.I64, 'hotelId', None, None, ), # 2
    (3, TType.I64, 'roomTypeId', None, None, ), # 3
    (4, TType.I64, 'ratePlanId', None, None, ), # 4
    (5, TType.I64, 'mHotelId', None, None, ), # 5
    (6, TType.I64, 'checkinDate', None, None, ), # 6
    (7, TType.I64, 'checkoutDate', None, None, ), # 7
    (8, TType.LIST, 'dynamicProductDetailList', (TType.STRUCT,(DayPriceReq, DayPriceReq.thrift_spec)), None, ), # 8
  )

  def __init__(self, dynamicId=None, hotelId=None, roomTypeId=None, ratePlanId=None, mHotelId=None, checkinDate=None, checkoutDate=None, dynamicProductDetailList=None,):
    self.dynamicId = dynamicId
    self.hotelId = hotelId
    self.roomTypeId = roomTypeId
    self.ratePlanId = ratePlanId
    self.mHotelId = mHotelId
    self.checkinDate = checkinDate
    self.checkoutDate = checkoutDate
    self.dynamicProductDetailList = dynamicProductDetailList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dynamicId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.hotelId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.roomTypeId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.ratePlanId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.mHotelId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.checkinDate = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.checkoutDate = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.dynamicProductDetailList = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = DayPriceReq()
            _elem42.read(iprot)
            self.dynamicProductDetailList.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerifyPriceRequest')
    if self.dynamicId is not None:
      oprot.writeFieldBegin('dynamicId', TType.STRING, 1)
      oprot.writeString(self.dynamicId)
      oprot.writeFieldEnd()
    if self.hotelId is not None:
      oprot.writeFieldBegin('hotelId', TType.I64, 2)
      oprot.writeI64(self.hotelId)
      oprot.writeFieldEnd()
    if self.roomTypeId is not None:
      oprot.writeFieldBegin('roomTypeId', TType.I64, 3)
      oprot.writeI64(self.roomTypeId)
      oprot.writeFieldEnd()
    if self.ratePlanId is not None:
      oprot.writeFieldBegin('ratePlanId', TType.I64, 4)
      oprot.writeI64(self.ratePlanId)
      oprot.writeFieldEnd()
    if self.mHotelId is not None:
      oprot.writeFieldBegin('mHotelId', TType.I64, 5)
      oprot.writeI64(self.mHotelId)
      oprot.writeFieldEnd()
    if self.checkinDate is not None:
      oprot.writeFieldBegin('checkinDate', TType.I64, 6)
      oprot.writeI64(self.checkinDate)
      oprot.writeFieldEnd()
    if self.checkoutDate is not None:
      oprot.writeFieldBegin('checkoutDate', TType.I64, 7)
      oprot.writeI64(self.checkoutDate)
      oprot.writeFieldEnd()
    if self.dynamicProductDetailList is not None:
      oprot.writeFieldBegin('dynamicProductDetailList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.dynamicProductDetailList))
      for iter43 in self.dynamicProductDetailList:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dynamicId)
    value = (value * 31) ^ hash(self.hotelId)
    value = (value * 31) ^ hash(self.roomTypeId)
    value = (value * 31) ^ hash(self.ratePlanId)
    value = (value * 31) ^ hash(self.mHotelId)
    value = (value * 31) ^ hash(self.checkinDate)
    value = (value * 31) ^ hash(self.checkoutDate)
    value = (value * 31) ^ hash(self.dynamicProductDetailList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DayPriceResp:
  """
  Attributes:
   - date
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.DOUBLE, 'price', None, None, ), # 2
  )

  def __init__(self, date=None, price=None,):
    self.date = date
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DayPriceResp')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VerifyPriceResponse:
  """
  Attributes:
   - data
   - desc
   - retcode
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'data', (TType.STRUCT,(DayPriceResp, DayPriceResp.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'desc', None, None, ), # 2
    (3, TType.I32, 'retcode', None, None, ), # 3
    (4, TType.STRUCT, 'price', (cm.ttypes.Price, cm.ttypes.Price.thrift_spec), None, ), # 4
  )

  def __init__(self, data=None, desc=None, retcode=None, price=None,):
    self.data = data
    self.desc = desc
    self.retcode = retcode
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.data = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = DayPriceResp()
            _elem49.read(iprot)
            self.data.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.retcode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.price = cm.ttypes.Price()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VerifyPriceResponse')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter50 in self.data:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 2)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.retcode is not None:
      oprot.writeFieldBegin('retcode', TType.I32, 3)
      oprot.writeI32(self.retcode)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 4)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.desc)
    value = (value * 31) ^ hash(self.retcode)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DSSSearchCanBookRequest:
  """
  Attributes:
   - mhotel_ids
   - traceId
   - filter_conditions
   - return_mhotel_ids
   - selected_product_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_ids', (TType.I64,None), None, ), # 1
    (2, TType.STRING, 'traceId', None, None, ), # 2
    (3, TType.LIST, 'filter_conditions', (TType.STRUCT,(cm.ttypes.FilterCondition, cm.ttypes.FilterCondition.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'return_mhotel_ids', (TType.I64,None), None, ), # 4
    (5, TType.MAP, 'selected_product_ids', (TType.I64,None,TType.LIST,(TType.STRUCT,(SelectedProduct, SelectedProduct.thrift_spec))), None, ), # 5
  )

  def __init__(self, mhotel_ids=None, traceId=None, filter_conditions=None, return_mhotel_ids=None, selected_product_ids=None,):
    self.mhotel_ids = mhotel_ids
    self.traceId = traceId
    self.filter_conditions = filter_conditions
    self.return_mhotel_ids = return_mhotel_ids
    self.selected_product_ids = selected_product_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_ids = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readI64()
            self.mhotel_ids.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.traceId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.filter_conditions = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = cm.ttypes.FilterCondition()
            _elem62.read(iprot)
            self.filter_conditions.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.return_mhotel_ids = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI64()
            self.return_mhotel_ids.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.selected_product_ids = {}
          (_ktype70, _vtype71, _size69 ) = iprot.readMapBegin()
          for _i73 in xrange(_size69):
            _key74 = iprot.readI64()
            _val75 = []
            (_etype79, _size76) = iprot.readListBegin()
            for _i80 in xrange(_size76):
              _elem81 = SelectedProduct()
              _elem81.read(iprot)
              _val75.append(_elem81)
            iprot.readListEnd()
            self.selected_product_ids[_key74] = _val75
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DSSSearchCanBookRequest')
    if self.mhotel_ids is not None:
      oprot.writeFieldBegin('mhotel_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.mhotel_ids))
      for iter82 in self.mhotel_ids:
        oprot.writeI64(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 2)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.filter_conditions is not None:
      oprot.writeFieldBegin('filter_conditions', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_conditions))
      for iter83 in self.filter_conditions:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_mhotel_ids is not None:
      oprot.writeFieldBegin('return_mhotel_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.return_mhotel_ids))
      for iter84 in self.return_mhotel_ids:
        oprot.writeI64(iter84)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.selected_product_ids is not None:
      oprot.writeFieldBegin('selected_product_ids', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.selected_product_ids))
      for kiter85,viter86 in self.selected_product_ids.items():
        oprot.writeI64(kiter85)
        oprot.writeListBegin(TType.STRUCT, len(viter86))
        for iter87 in viter86:
          iter87.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_ids)
    value = (value * 31) ^ hash(self.traceId)
    value = (value * 31) ^ hash(self.filter_conditions)
    value = (value * 31) ^ hash(self.return_mhotel_ids)
    value = (value * 31) ^ hash(self.selected_product_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimplePromotion:
  """
  Attributes:
   - promotion_id
   - uper_limit
   - date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotion_id', None, None, ), # 1
    (2, TType.I32, 'uper_limit', None, None, ), # 2
    (3, TType.STRING, 'date', None, None, ), # 3
  )

  def __init__(self, promotion_id=None, uper_limit=None, date=None,):
    self.promotion_id = promotion_id
    self.uper_limit = uper_limit
    self.date = date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotion_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uper_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimplePromotion')
    if self.promotion_id is not None:
      oprot.writeFieldBegin('promotion_id', TType.I32, 1)
      oprot.writeI32(self.promotion_id)
      oprot.writeFieldEnd()
    if self.uper_limit is not None:
      oprot.writeFieldBegin('uper_limit', TType.I32, 2)
      oprot.writeI32(self.uper_limit)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 3)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_id)
    value = (value * 31) ^ hash(self.uper_limit)
    value = (value * 31) ^ hash(self.date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleProduct:
  """
  Attributes:
   - sale_cost
   - sale_price
   - promotion_type
   - inventorys
   - sroom_id
   - rp_id
   - shotel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sale_cost', None, None, ), # 1
    (2, TType.I32, 'sale_price', None, None, ), # 2
    (3, TType.LIST, 'promotion_type', (TType.STRUCT,(SimplePromotion, SimplePromotion.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'inventorys', (TType.STRUCT,(cm.ttypes.Inventory, cm.ttypes.Inventory.thrift_spec)), None, ), # 4
    (5, TType.I32, 'sroom_id', None, None, ), # 5
    (6, TType.I32, 'rp_id', None, None, ), # 6
    (7, TType.I32, 'shotel_id', None, None, ), # 7
  )

  def __init__(self, sale_cost=None, sale_price=None, promotion_type=None, inventorys=None, sroom_id=None, rp_id=None, shotel_id=None,):
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.promotion_type = promotion_type
    self.inventorys = inventorys
    self.sroom_id = sroom_id
    self.rp_id = rp_id
    self.shotel_id = shotel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sale_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sale_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.promotion_type = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = SimplePromotion()
            _elem93.read(iprot)
            self.promotion_type.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.inventorys = []
          (_etype97, _size94) = iprot.readListBegin()
          for _i98 in xrange(_size94):
            _elem99 = cm.ttypes.Inventory()
            _elem99.read(iprot)
            self.inventorys.append(_elem99)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleProduct')
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.I32, 1)
      oprot.writeI32(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.I32, 2)
      oprot.writeI32(self.sale_price)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_type))
      for iter100 in self.promotion_type:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inventorys is not None:
      oprot.writeFieldBegin('inventorys', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.inventorys))
      for iter101 in self.inventorys:
        iter101.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 5)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 6)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 7)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.inventorys)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.shotel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleMRoom:
  """
  Attributes:
   - mroom_id
   - products
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mroom_id', None, None, ), # 1
    (2, TType.LIST, 'products', (TType.STRUCT,(SimpleProduct, SimpleProduct.thrift_spec)), None, ), # 2
  )

  def __init__(self, mroom_id=None, products=None,):
    self.mroom_id = mroom_id
    self.products = products

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.products = []
          (_etype105, _size102) = iprot.readListBegin()
          for _i106 in xrange(_size102):
            _elem107 = SimpleProduct()
            _elem107.read(iprot)
            self.products.append(_elem107)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleMRoom')
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 1)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.products is not None:
      oprot.writeFieldBegin('products', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.products))
      for iter108 in self.products:
        iter108.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.products)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelBookDetail:
  """
  Attributes:
   - mhotel_id
   - is_can_booking
   - hotel_flag
   - min_price_sub_coupon
   - min_price_sub_coupon_sale_cost
   - simple_mrooms
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mhotel_id', None, None, ), # 1
    (2, TType.BOOL, 'is_can_booking', None, None, ), # 2
    (3, TType.LIST, 'hotel_flag', (TType.I32,None), None, ), # 3
    (4, TType.I32, 'min_price_sub_coupon', None, None, ), # 4
    (5, TType.DOUBLE, 'min_price_sub_coupon_sale_cost', None, None, ), # 5
    (6, TType.LIST, 'simple_mrooms', (TType.STRUCT,(SimpleMRoom, SimpleMRoom.thrift_spec)), None, ), # 6
  )

  def __init__(self, mhotel_id=None, is_can_booking=None, hotel_flag=None, min_price_sub_coupon=None, min_price_sub_coupon_sale_cost=None, simple_mrooms=None,):
    self.mhotel_id = mhotel_id
    self.is_can_booking = is_can_booking
    self.hotel_flag = hotel_flag
    self.min_price_sub_coupon = min_price_sub_coupon
    self.min_price_sub_coupon_sale_cost = min_price_sub_coupon_sale_cost
    self.simple_mrooms = simple_mrooms

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mhotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_can_booking = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hotel_flag = []
          (_etype112, _size109) = iprot.readListBegin()
          for _i113 in xrange(_size109):
            _elem114 = iprot.readI32()
            self.hotel_flag.append(_elem114)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.min_price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.min_price_sub_coupon_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.simple_mrooms = []
          (_etype118, _size115) = iprot.readListBegin()
          for _i119 in xrange(_size115):
            _elem120 = SimpleMRoom()
            _elem120.read(iprot)
            self.simple_mrooms.append(_elem120)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelBookDetail')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I64, 1)
      oprot.writeI64(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.is_can_booking is not None:
      oprot.writeFieldBegin('is_can_booking', TType.BOOL, 2)
      oprot.writeBool(self.is_can_booking)
      oprot.writeFieldEnd()
    if self.hotel_flag is not None:
      oprot.writeFieldBegin('hotel_flag', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.hotel_flag))
      for iter121 in self.hotel_flag:
        oprot.writeI32(iter121)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_sub_coupon', TType.I32, 4)
      oprot.writeI32(self.min_price_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_sale_cost is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_sale_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.min_price_sub_coupon_sale_cost)
      oprot.writeFieldEnd()
    if self.simple_mrooms is not None:
      oprot.writeFieldBegin('simple_mrooms', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.simple_mrooms))
      for iter122 in self.simple_mrooms:
        iter122.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.is_can_booking)
    value = (value * 31) ^ hash(self.hotel_flag)
    value = (value * 31) ^ hash(self.min_price_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_sale_cost)
    value = (value * 31) ^ hash(self.simple_mrooms)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DSSSearchCanBookResponse:
  """
  Attributes:
   - status
   - statistics
   - filter_result
   - fast_filter_info
   - filter_list
   - hotel_book_detail
   - discounts
   - price_range_statistic
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (cm.ttypes.ServerStatus, cm.ttypes.ServerStatus.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'statistics', (cm.ttypes.Statistics, cm.ttypes.Statistics.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'filter_result', (cm.ttypes.FilterResult, cm.ttypes.FilterResult.thrift_spec), None, ), # 3
    (4, TType.LIST, 'fast_filter_info', (TType.STRUCT,(se.ttypes.FastFilterInfo, se.ttypes.FastFilterInfo.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'filter_list', (TType.STRUCT,(cm.ttypes.FilterList, cm.ttypes.FilterList.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'hotel_book_detail', (TType.STRUCT,(HotelBookDetail, HotelBookDetail.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'discounts', (TType.DOUBLE,None), None, ), # 7
    (8, TType.LIST, 'price_range_statistic', (TType.STRUCT,(cm.ttypes.PriceRangeStatistic, cm.ttypes.PriceRangeStatistic.thrift_spec)), None, ), # 8
  )

  def __init__(self, status=None, statistics=None, filter_result=None, fast_filter_info=None, filter_list=None, hotel_book_detail=None, discounts=None, price_range_statistic=None,):
    self.status = status
    self.statistics = statistics
    self.filter_result = filter_result
    self.fast_filter_info = fast_filter_info
    self.filter_list = filter_list
    self.hotel_book_detail = hotel_book_detail
    self.discounts = discounts
    self.price_range_statistic = price_range_statistic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.statistics = cm.ttypes.Statistics()
          self.statistics.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.filter_result = cm.ttypes.FilterResult()
          self.filter_result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.fast_filter_info = []
          (_etype126, _size123) = iprot.readListBegin()
          for _i127 in xrange(_size123):
            _elem128 = se.ttypes.FastFilterInfo()
            _elem128.read(iprot)
            self.fast_filter_info.append(_elem128)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.filter_list = []
          (_etype132, _size129) = iprot.readListBegin()
          for _i133 in xrange(_size129):
            _elem134 = cm.ttypes.FilterList()
            _elem134.read(iprot)
            self.filter_list.append(_elem134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.hotel_book_detail = []
          (_etype138, _size135) = iprot.readListBegin()
          for _i139 in xrange(_size135):
            _elem140 = HotelBookDetail()
            _elem140.read(iprot)
            self.hotel_book_detail.append(_elem140)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.discounts = []
          (_etype144, _size141) = iprot.readListBegin()
          for _i145 in xrange(_size141):
            _elem146 = iprot.readDouble()
            self.discounts.append(_elem146)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.price_range_statistic = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = cm.ttypes.PriceRangeStatistic()
            _elem152.read(iprot)
            self.price_range_statistic.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DSSSearchCanBookResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.statistics is not None:
      oprot.writeFieldBegin('statistics', TType.STRUCT, 2)
      self.statistics.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_result is not None:
      oprot.writeFieldBegin('filter_result', TType.STRUCT, 3)
      self.filter_result.write(oprot)
      oprot.writeFieldEnd()
    if self.fast_filter_info is not None:
      oprot.writeFieldBegin('fast_filter_info', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.fast_filter_info))
      for iter153 in self.fast_filter_info:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_list is not None:
      oprot.writeFieldBegin('filter_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_list))
      for iter154 in self.filter_list:
        iter154.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_book_detail is not None:
      oprot.writeFieldBegin('hotel_book_detail', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_book_detail))
      for iter155 in self.hotel_book_detail:
        iter155.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.discounts is not None:
      oprot.writeFieldBegin('discounts', TType.LIST, 7)
      oprot.writeListBegin(TType.DOUBLE, len(self.discounts))
      for iter156 in self.discounts:
        oprot.writeDouble(iter156)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_range_statistic is not None:
      oprot.writeFieldBegin('price_range_statistic', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.price_range_statistic))
      for iter157 in self.price_range_statistic:
        iter157.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.statistics)
    value = (value * 31) ^ hash(self.filter_result)
    value = (value * 31) ^ hash(self.fast_filter_info)
    value = (value * 31) ^ hash(self.filter_list)
    value = (value * 31) ^ hash(self.hotel_book_detail)
    value = (value * 31) ^ hash(self.discounts)
    value = (value * 31) ^ hash(self.price_range_statistic)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductDayInfo:
  """
  Attributes:
   - date
   - has_breakfast
   - has_inventory
   - status
   - sale_cost
   - sale_price
   - is_weekend_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.BOOL, 'has_breakfast', None, None, ), # 2
    (3, TType.BOOL, 'has_inventory', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.DOUBLE, 'sale_cost', None, None, ), # 5
    (6, TType.DOUBLE, 'sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_weekend_price', None, None, ), # 7
  )

  def __init__(self, date=None, has_breakfast=None, has_inventory=None, status=None, sale_cost=None, sale_price=None, is_weekend_price=None,):
    self.date = date
    self.has_breakfast = has_breakfast
    self.has_inventory = has_inventory
    self.status = status
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.is_weekend_price = is_weekend_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.has_inventory = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_weekend_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductDayInfo')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.has_breakfast is not None:
      oprot.writeFieldBegin('has_breakfast', TType.BOOL, 2)
      oprot.writeBool(self.has_breakfast)
      oprot.writeFieldEnd()
    if self.has_inventory is not None:
      oprot.writeFieldBegin('has_inventory', TType.BOOL, 3)
      oprot.writeBool(self.has_inventory)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.is_weekend_price is not None:
      oprot.writeFieldBegin('is_weekend_price', TType.BOOL, 7)
      oprot.writeBool(self.is_weekend_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.has_breakfast)
    value = (value * 31) ^ hash(self.has_inventory)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.is_weekend_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductInfo:
  """
  Attributes:
   - shotel_id
   - mroom_id
   - sroom_id
   - mroom_name
   - rp_id
   - rp_name
   - settlement_type
   - is_hours_room
   - is_direct_sign
   - supplier_type
   - supplier_id
   - supplier_name
   - product_day_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'mroom_id', None, None, ), # 2
    (3, TType.I32, 'sroom_id', None, None, ), # 3
    (4, TType.STRING, 'mroom_name', None, None, ), # 4
    (5, TType.I32, 'rp_id', None, None, ), # 5
    (6, TType.STRING, 'rp_name', None, None, ), # 6
    (7, TType.I32, 'settlement_type', None, None, ), # 7
    (8, TType.BOOL, 'is_hours_room', None, None, ), # 8
    (9, TType.BOOL, 'is_direct_sign', None, None, ), # 9
    (10, TType.I32, 'supplier_type', None, None, ), # 10
    (11, TType.I32, 'supplier_id', None, None, ), # 11
    (12, TType.STRING, 'supplier_name', None, None, ), # 12
    (13, TType.LIST, 'product_day_info', (TType.STRUCT,(ProductDayInfo, ProductDayInfo.thrift_spec)), None, ), # 13
  )

  def __init__(self, shotel_id=None, mroom_id=None, sroom_id=None, mroom_name=None, rp_id=None, rp_name=None, settlement_type=None, is_hours_room=None, is_direct_sign=None, supplier_type=None, supplier_id=None, supplier_name=None, product_day_info=None,):
    self.shotel_id = shotel_id
    self.mroom_id = mroom_id
    self.sroom_id = sroom_id
    self.mroom_name = mroom_name
    self.rp_id = rp_id
    self.rp_name = rp_name
    self.settlement_type = settlement_type
    self.is_hours_room = is_hours_room
    self.is_direct_sign = is_direct_sign
    self.supplier_type = supplier_type
    self.supplier_id = supplier_id
    self.supplier_name = supplier_name
    self.product_day_info = product_day_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rp_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.settlement_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hours_room = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_direct_sign = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.supplier_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.supplier_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.product_day_info = []
          (_etype161, _size158) = iprot.readListBegin()
          for _i162 in xrange(_size158):
            _elem163 = ProductDayInfo()
            _elem163.read(iprot)
            self.product_day_info.append(_elem163)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 2)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 3)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 4)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 5)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.rp_name is not None:
      oprot.writeFieldBegin('rp_name', TType.STRING, 6)
      oprot.writeString(self.rp_name)
      oprot.writeFieldEnd()
    if self.settlement_type is not None:
      oprot.writeFieldBegin('settlement_type', TType.I32, 7)
      oprot.writeI32(self.settlement_type)
      oprot.writeFieldEnd()
    if self.is_hours_room is not None:
      oprot.writeFieldBegin('is_hours_room', TType.BOOL, 8)
      oprot.writeBool(self.is_hours_room)
      oprot.writeFieldEnd()
    if self.is_direct_sign is not None:
      oprot.writeFieldBegin('is_direct_sign', TType.BOOL, 9)
      oprot.writeBool(self.is_direct_sign)
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.I32, 10)
      oprot.writeI32(self.supplier_type)
      oprot.writeFieldEnd()
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I32, 11)
      oprot.writeI32(self.supplier_id)
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 12)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.product_day_info is not None:
      oprot.writeFieldBegin('product_day_info', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.product_day_info))
      for iter164 in self.product_day_info:
        iter164.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.rp_name)
    value = (value * 31) ^ hash(self.settlement_type)
    value = (value * 31) ^ hash(self.is_hours_room)
    value = (value * 31) ^ hash(self.is_direct_sign)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.product_day_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelInfo:
  """
  Attributes:
   - mhotel_id
   - mhotel_name
   - city_id
   - city_name
   - star
   - product_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.STRING, 'mhotel_name', None, None, ), # 2
    (3, TType.I32, 'city_id', None, None, ), # 3
    (4, TType.STRING, 'city_name', None, None, ), # 4
    (5, TType.I32, 'star', None, None, ), # 5
    (6, TType.LIST, 'product_info', (TType.STRUCT,(ProductInfo, ProductInfo.thrift_spec)), None, ), # 6
  )

  def __init__(self, mhotel_id=None, mhotel_name=None, city_id=None, city_name=None, star=None, product_info=None,):
    self.mhotel_id = mhotel_id
    self.mhotel_name = mhotel_name
    self.city_id = city_id
    self.city_name = city_name
    self.star = star
    self.product_info = product_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mhotel_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.city_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.city_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.star = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.product_info = []
          (_etype168, _size165) = iprot.readListBegin()
          for _i169 in xrange(_size165):
            _elem170 = ProductInfo()
            _elem170.read(iprot)
            self.product_info.append(_elem170)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelInfo')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.mhotel_name is not None:
      oprot.writeFieldBegin('mhotel_name', TType.STRING, 2)
      oprot.writeString(self.mhotel_name)
      oprot.writeFieldEnd()
    if self.city_id is not None:
      oprot.writeFieldBegin('city_id', TType.I32, 3)
      oprot.writeI32(self.city_id)
      oprot.writeFieldEnd()
    if self.city_name is not None:
      oprot.writeFieldBegin('city_name', TType.STRING, 4)
      oprot.writeString(self.city_name)
      oprot.writeFieldEnd()
    if self.star is not None:
      oprot.writeFieldBegin('star', TType.I32, 5)
      oprot.writeI32(self.star)
      oprot.writeFieldEnd()
    if self.product_info is not None:
      oprot.writeFieldBegin('product_info', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.product_info))
      for iter171 in self.product_info:
        iter171.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.mhotel_name)
    value = (value * 31) ^ hash(self.city_id)
    value = (value * 31) ^ hash(self.city_name)
    value = (value * 31) ^ hash(self.star)
    value = (value * 31) ^ hash(self.product_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetProductBaseInfoRequest:
  """
  Attributes:
   - mhotel_ids
   - begin_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_ids', (TType.I32,None), None, ), # 1
    (2, TType.I64, 'begin_date', None, None, ), # 2
    (3, TType.I64, 'end_date', None, None, ), # 3
  )

  def __init__(self, mhotel_ids=None, begin_date=None, end_date=None,):
    self.mhotel_ids = mhotel_ids
    self.begin_date = begin_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_ids = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = iprot.readI32()
            self.mhotel_ids.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.begin_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetProductBaseInfoRequest')
    if self.mhotel_ids is not None:
      oprot.writeFieldBegin('mhotel_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.mhotel_ids))
      for iter178 in self.mhotel_ids:
        oprot.writeI32(iter178)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.I64, 2)
      oprot.writeI64(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 3)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_ids is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_ids is unset!')
    if self.begin_date is None:
      raise TProtocol.TProtocolException(message='Required field begin_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_ids)
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetProductBaseInfoResponse:
  """
  Attributes:
   - mhotel_info
   - return_code
   - return_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_info', (TType.STRUCT,(MhotelInfo, MhotelInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'return_code', None, None, ), # 2
    (3, TType.STRING, 'return_msg', None, None, ), # 3
  )

  def __init__(self, mhotel_info=None, return_code=None, return_msg=None,):
    self.mhotel_info = mhotel_info
    self.return_code = return_code
    self.return_msg = return_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_info = []
          (_etype182, _size179) = iprot.readListBegin()
          for _i183 in xrange(_size179):
            _elem184 = MhotelInfo()
            _elem184.read(iprot)
            self.mhotel_info.append(_elem184)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetProductBaseInfoResponse')
    if self.mhotel_info is not None:
      oprot.writeFieldBegin('mhotel_info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_info))
      for iter185 in self.mhotel_info:
        iter185.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 2)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.return_msg is not None:
      oprot.writeFieldBegin('return_msg', TType.STRING, 3)
      oprot.writeString(self.return_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_info)
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.return_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShotelAttr:
  """
  Attributes:
   - shotel_id
   - sroom_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.LIST, 'sroom_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, shotel_id=None, sroom_ids=None,):
    self.shotel_id = shotel_id
    self.sroom_ids = sroom_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sroom_ids = []
          (_etype189, _size186) = iprot.readListBegin()
          for _i190 in xrange(_size186):
            _elem191 = iprot.readI32()
            self.sroom_ids.append(_elem191)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShotelAttr')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_ids is not None:
      oprot.writeFieldBegin('sroom_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.sroom_ids))
      for iter192 in self.sroom_ids:
        oprot.writeI32(iter192)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelAttr:
  """
  Attributes:
   - mhotel_id
   - shotel_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel_attr', (TType.STRUCT,(ShotelAttr, ShotelAttr.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, shotel_attr=None,):
    self.mhotel_id = mhotel_id
    self.shotel_attr = shotel_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel_attr = []
          (_etype196, _size193) = iprot.readListBegin()
          for _i197 in xrange(_size193):
            _elem198 = ShotelAttr()
            _elem198.read(iprot)
            self.shotel_attr.append(_elem198)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelAttr')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_attr is not None:
      oprot.writeFieldBegin('shotel_attr', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_attr))
      for iter199 in self.shotel_attr:
        iter199.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvAndInstantConfirmRequest:
  """
  Attributes:
   - mhotel_attr
   - start_date
   - end_date
   - need_instant_confirm
   - order_from
   - search_from
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_attr', (TType.STRUCT,(MhotelAttr, MhotelAttr.thrift_spec)), None, ), # 1
    (2, TType.I64, 'start_date', None, None, ), # 2
    (3, TType.I64, 'end_date', None, None, ), # 3
    (4, TType.BOOL, 'need_instant_confirm', None, None, ), # 4
    (5, TType.I64, 'order_from', None, None, ), # 5
    (6, TType.I32, 'search_from', None, None, ), # 6
  )

  def __init__(self, mhotel_attr=None, start_date=None, end_date=None, need_instant_confirm=None, order_from=None, search_from=None,):
    self.mhotel_attr = mhotel_attr
    self.start_date = start_date
    self.end_date = end_date
    self.need_instant_confirm = need_instant_confirm
    self.order_from = order_from
    self.search_from = search_from

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_attr = []
          (_etype203, _size200) = iprot.readListBegin()
          for _i204 in xrange(_size200):
            _elem205 = MhotelAttr()
            _elem205.read(iprot)
            self.mhotel_attr.append(_elem205)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.need_instant_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.order_from = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.search_from = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvAndInstantConfirmRequest')
    if self.mhotel_attr is not None:
      oprot.writeFieldBegin('mhotel_attr', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_attr))
      for iter206 in self.mhotel_attr:
        iter206.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I64, 2)
      oprot.writeI64(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 3)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    if self.need_instant_confirm is not None:
      oprot.writeFieldBegin('need_instant_confirm', TType.BOOL, 4)
      oprot.writeBool(self.need_instant_confirm)
      oprot.writeFieldEnd()
    if self.order_from is not None:
      oprot.writeFieldBegin('order_from', TType.I64, 5)
      oprot.writeI64(self.order_from)
      oprot.writeFieldEnd()
    if self.search_from is not None:
      oprot.writeFieldBegin('search_from', TType.I32, 6)
      oprot.writeI32(self.search_from)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_attr is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_attr is unset!')
    if self.start_date is None:
      raise TProtocol.TProtocolException(message='Required field start_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_attr)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.need_instant_confirm)
    value = (value * 31) ^ hash(self.order_from)
    value = (value * 31) ^ hash(self.search_from)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvDetail:
  """
  Attributes:
   - begin_date
   - end_date
   - begin_time
   - end_time
   - available_amount
   - available_date
   - is_over_booking
   - status
   - instant_confirm
   - ic_begin_time
   - ic_end_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'begin_date', None, None, ), # 1
    (2, TType.I64, 'end_date', None, None, ), # 2
    (3, TType.STRING, 'begin_time', None, None, ), # 3
    (4, TType.STRING, 'end_time', None, None, ), # 4
    (5, TType.I32, 'available_amount', None, None, ), # 5
    (6, TType.I64, 'available_date', None, None, ), # 6
    (7, TType.I32, 'is_over_booking', None, None, ), # 7
    (8, TType.I32, 'status', None, None, ), # 8
    (9, TType.BOOL, 'instant_confirm', None, None, ), # 9
    (10, TType.STRING, 'ic_begin_time', None, None, ), # 10
    (11, TType.STRING, 'ic_end_time', None, None, ), # 11
  )

  def __init__(self, begin_date=None, end_date=None, begin_time=None, end_time=None, available_amount=None, available_date=None, is_over_booking=None, status=None, instant_confirm=None, ic_begin_time=None, ic_end_time=None,):
    self.begin_date = begin_date
    self.end_date = end_date
    self.begin_time = begin_time
    self.end_time = end_time
    self.available_amount = available_amount
    self.available_date = available_date
    self.is_over_booking = is_over_booking
    self.status = status
    self.instant_confirm = instant_confirm
    self.ic_begin_time = ic_begin_time
    self.ic_end_time = ic_end_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.begin_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.begin_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.available_amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.available_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.is_over_booking = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.instant_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ic_begin_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.ic_end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvDetail')
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.I64, 1)
      oprot.writeI64(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 2)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    if self.begin_time is not None:
      oprot.writeFieldBegin('begin_time', TType.STRING, 3)
      oprot.writeString(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 4)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.available_amount is not None:
      oprot.writeFieldBegin('available_amount', TType.I32, 5)
      oprot.writeI32(self.available_amount)
      oprot.writeFieldEnd()
    if self.available_date is not None:
      oprot.writeFieldBegin('available_date', TType.I64, 6)
      oprot.writeI64(self.available_date)
      oprot.writeFieldEnd()
    if self.is_over_booking is not None:
      oprot.writeFieldBegin('is_over_booking', TType.I32, 7)
      oprot.writeI32(self.is_over_booking)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 8)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.instant_confirm is not None:
      oprot.writeFieldBegin('instant_confirm', TType.BOOL, 9)
      oprot.writeBool(self.instant_confirm)
      oprot.writeFieldEnd()
    if self.ic_begin_time is not None:
      oprot.writeFieldBegin('ic_begin_time', TType.STRING, 10)
      oprot.writeString(self.ic_begin_time)
      oprot.writeFieldEnd()
    if self.ic_end_time is not None:
      oprot.writeFieldBegin('ic_end_time', TType.STRING, 11)
      oprot.writeString(self.ic_end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.begin_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.available_amount)
    value = (value * 31) ^ hash(self.available_date)
    value = (value * 31) ^ hash(self.is_over_booking)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.instant_confirm)
    value = (value * 31) ^ hash(self.ic_begin_time)
    value = (value * 31) ^ hash(self.ic_end_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SroomDetail:
  """
  Attributes:
   - sroom_id
   - inv_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sroom_id', None, None, ), # 1
    (2, TType.LIST, 'inv_detail', (TType.STRUCT,(InvDetail, InvDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, sroom_id=None, inv_detail=None,):
    self.sroom_id = sroom_id
    self.inv_detail = inv_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.inv_detail = []
          (_etype210, _size207) = iprot.readListBegin()
          for _i211 in xrange(_size207):
            _elem212 = InvDetail()
            _elem212.read(iprot)
            self.inv_detail.append(_elem212)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SroomDetail')
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 1)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.inv_detail is not None:
      oprot.writeFieldBegin('inv_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.inv_detail))
      for iter213 in self.inv_detail:
        iter213.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.inv_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShotelDetail:
  """
  Attributes:
   - shotel_id
   - sroom_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.LIST, 'sroom_detail', (TType.STRUCT,(SroomDetail, SroomDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, shotel_id=None, sroom_detail=None,):
    self.shotel_id = shotel_id
    self.sroom_detail = sroom_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sroom_detail = []
          (_etype217, _size214) = iprot.readListBegin()
          for _i218 in xrange(_size214):
            _elem219 = SroomDetail()
            _elem219.read(iprot)
            self.sroom_detail.append(_elem219)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShotelDetail')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_detail is not None:
      oprot.writeFieldBegin('sroom_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sroom_detail))
      for iter220 in self.sroom_detail:
        iter220.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MhotelDetail:
  """
  Attributes:
   - mhotel_id
   - shotel_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel_detail', (TType.STRUCT,(ShotelDetail, ShotelDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, shotel_detail=None,):
    self.mhotel_id = mhotel_id
    self.shotel_detail = shotel_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel_detail = []
          (_etype224, _size221) = iprot.readListBegin()
          for _i225 in xrange(_size221):
            _elem226 = ShotelDetail()
            _elem226.read(iprot)
            self.shotel_detail.append(_elem226)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MhotelDetail')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_detail is not None:
      oprot.writeFieldBegin('shotel_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_detail))
      for iter227 in self.shotel_detail:
        iter227.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvAndInstantConfirmResponse:
  """
  Attributes:
   - mhotel_detail
   - return_code
   - return_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_detail', (TType.STRUCT,(MhotelDetail, MhotelDetail.thrift_spec)), None, ), # 1
    (2, TType.I32, 'return_code', None, None, ), # 2
    (3, TType.STRING, 'return_msg', None, None, ), # 3
  )

  def __init__(self, mhotel_detail=None, return_code=None, return_msg=None,):
    self.mhotel_detail = mhotel_detail
    self.return_code = return_code
    self.return_msg = return_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_detail = []
          (_etype231, _size228) = iprot.readListBegin()
          for _i232 in xrange(_size228):
            _elem233 = MhotelDetail()
            _elem233.read(iprot)
            self.mhotel_detail.append(_elem233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.return_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvAndInstantConfirmResponse')
    if self.mhotel_detail is not None:
      oprot.writeFieldBegin('mhotel_detail', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mhotel_detail))
      for iter234 in self.mhotel_detail:
        iter234.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_code is not None:
      oprot.writeFieldBegin('return_code', TType.I32, 2)
      oprot.writeI32(self.return_code)
      oprot.writeFieldEnd()
    if self.return_msg is not None:
      oprot.writeFieldBegin('return_msg', TType.STRING, 3)
      oprot.writeString(self.return_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_detail)
    value = (value * 31) ^ hash(self.return_code)
    value = (value * 31) ^ hash(self.return_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
