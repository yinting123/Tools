#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import cm.ttypes



from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class GuestType:
  WHOTEL = 0
  MOBILE = 1
  MAPARTMENT = 2
  WEHOTEL = 3

  _VALUES_TO_NAMES = {
    0: "WHOTEL",
    1: "MOBILE",
    2: "MAPARTMENT",
    3: "WEHOTEL",
  }

  _NAMES_TO_VALUES = {
    "WHOTEL": 0,
    "MOBILE": 1,
    "MAPARTMENT": 2,
    "WEHOTEL": 3,
  }

class LANGUAGE:
  CH = 0
  EN = 1

  _VALUES_TO_NAMES = {
    0: "CH",
    1: "EN",
  }

  _NAMES_TO_VALUES = {
    "CH": 0,
    "EN": 1,
  }

class RegionType:
  RCITY = 0
  RDISTRICT = 1
  RSCENIC = 2
  RMALL = 3

  _VALUES_TO_NAMES = {
    0: "RCITY",
    1: "RDISTRICT",
    2: "RSCENIC",
    3: "RMALL",
  }

  _NAMES_TO_VALUES = {
    "RCITY": 0,
    "RDISTRICT": 1,
    "RSCENIC": 2,
    "RMALL": 3,
  }

class KeywordType:
  HOTEL = 0
  TUAN = 1
  APARTMENT = 2
  BRAND = 3
  DISTRICT = 4
  MALL = 5
  POI = 6
  NEIGHBOR = 7

  _VALUES_TO_NAMES = {
    0: "HOTEL",
    1: "TUAN",
    2: "APARTMENT",
    3: "BRAND",
    4: "DISTRICT",
    5: "MALL",
    6: "POI",
    7: "NEIGHBOR",
  }

  _NAMES_TO_VALUES = {
    "HOTEL": 0,
    "TUAN": 1,
    "APARTMENT": 2,
    "BRAND": 3,
    "DISTRICT": 4,
    "MALL": 5,
    "POI": 6,
    "NEIGHBOR": 7,
  }


class RegionRequest:
  """
  Attributes:
   - search
   - user_info
   - guest
   - langu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'search', None, None, ), # 1
    (2, TType.STRUCT, 'user_info', (cm.ttypes.UserInfo, cm.ttypes.UserInfo.thrift_spec), None, ), # 2
    (3, TType.I32, 'guest', None, None, ), # 3
    (4, TType.I32, 'langu', None, None, ), # 4
  )

  def __init__(self, search=None, user_info=None, guest=None, langu=None,):
    self.search = search
    self.user_info = user_info
    self.guest = guest
    self.langu = langu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.search = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_info = cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.guest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.langu = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegionRequest')
    if self.search is not None:
      oprot.writeFieldBegin('search', TType.STRING, 1)
      oprot.writeString(self.search)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 2)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.guest is not None:
      oprot.writeFieldBegin('guest', TType.I32, 3)
      oprot.writeI32(self.guest)
      oprot.writeFieldEnd()
    if self.langu is not None:
      oprot.writeFieldBegin('langu', TType.I32, 4)
      oprot.writeI32(self.langu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.guest)
    value = (value * 31) ^ hash(self.langu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegionResult:
  """
  Attributes:
   - region_id
   - region_id_v4
   - region_name
   - region_name_seo
   - is_skip
   - parent_id
   - parent_id_v4
   - parent_name
   - parent_name_seo
   - composed_name
   - hotel_num
   - region_type
   - langu
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.I32, 'region_id_v4', None, None, ), # 2
    (3, TType.STRING, 'region_name', None, None, ), # 3
    (4, TType.STRING, 'region_name_seo', None, None, ), # 4
    (5, TType.I32, 'is_skip', None, None, ), # 5
    (6, TType.I32, 'parent_id', None, None, ), # 6
    (7, TType.I32, 'parent_id_v4', None, None, ), # 7
    (8, TType.STRING, 'parent_name', None, None, ), # 8
    (9, TType.STRING, 'parent_name_seo', None, None, ), # 9
    (10, TType.STRING, 'composed_name', None, None, ), # 10
    (11, TType.I32, 'hotel_num', None, None, ), # 11
    (12, TType.I32, 'region_type', None, None, ), # 12
    (13, TType.I32, 'langu', None, None, ), # 13
  )

  def __init__(self, region_id=None, region_id_v4=None, region_name=None, region_name_seo=None, is_skip=None, parent_id=None, parent_id_v4=None, parent_name=None, parent_name_seo=None, composed_name=None, hotel_num=None, region_type=None, langu=None,):
    self.region_id = region_id
    self.region_id_v4 = region_id_v4
    self.region_name = region_name
    self.region_name_seo = region_name_seo
    self.is_skip = is_skip
    self.parent_id = parent_id
    self.parent_id_v4 = parent_id_v4
    self.parent_name = parent_name
    self.parent_name_seo = parent_name_seo
    self.composed_name = composed_name
    self.hotel_num = hotel_num
    self.region_type = region_type
    self.langu = langu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.region_id_v4 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.region_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.region_name_seo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.is_skip = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.parent_id_v4 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.parent_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.parent_name_seo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.composed_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.region_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.langu = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegionResult')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_id_v4 is not None:
      oprot.writeFieldBegin('region_id_v4', TType.I32, 2)
      oprot.writeI32(self.region_id_v4)
      oprot.writeFieldEnd()
    if self.region_name is not None:
      oprot.writeFieldBegin('region_name', TType.STRING, 3)
      oprot.writeString(self.region_name)
      oprot.writeFieldEnd()
    if self.region_name_seo is not None:
      oprot.writeFieldBegin('region_name_seo', TType.STRING, 4)
      oprot.writeString(self.region_name_seo)
      oprot.writeFieldEnd()
    if self.is_skip is not None:
      oprot.writeFieldBegin('is_skip', TType.I32, 5)
      oprot.writeI32(self.is_skip)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 6)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.parent_id_v4 is not None:
      oprot.writeFieldBegin('parent_id_v4', TType.I32, 7)
      oprot.writeI32(self.parent_id_v4)
      oprot.writeFieldEnd()
    if self.parent_name is not None:
      oprot.writeFieldBegin('parent_name', TType.STRING, 8)
      oprot.writeString(self.parent_name)
      oprot.writeFieldEnd()
    if self.parent_name_seo is not None:
      oprot.writeFieldBegin('parent_name_seo', TType.STRING, 9)
      oprot.writeString(self.parent_name_seo)
      oprot.writeFieldEnd()
    if self.composed_name is not None:
      oprot.writeFieldBegin('composed_name', TType.STRING, 10)
      oprot.writeString(self.composed_name)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 11)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.region_type is not None:
      oprot.writeFieldBegin('region_type', TType.I32, 12)
      oprot.writeI32(self.region_type)
      oprot.writeFieldEnd()
    if self.langu is not None:
      oprot.writeFieldBegin('langu', TType.I32, 13)
      oprot.writeI32(self.langu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_id_v4)
    value = (value * 31) ^ hash(self.region_name)
    value = (value * 31) ^ hash(self.region_name_seo)
    value = (value * 31) ^ hash(self.is_skip)
    value = (value * 31) ^ hash(self.parent_id)
    value = (value * 31) ^ hash(self.parent_id_v4)
    value = (value * 31) ^ hash(self.parent_name)
    value = (value * 31) ^ hash(self.parent_name_seo)
    value = (value * 31) ^ hash(self.composed_name)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.region_type)
    value = (value * 31) ^ hash(self.langu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegionResponseData:
  """
  Attributes:
   - status_code
   - region_response
   - search_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status_code', None, -1, ), # 1
    (2, TType.LIST, 'region_response', (TType.STRUCT,(RegionResult, RegionResult.thrift_spec)), None, ), # 2
    (3, TType.I64, 'search_id', None, None, ), # 3
  )

  def __init__(self, status_code=thrift_spec[1][4], region_response=None, search_id=None,):
    self.status_code = status_code
    self.region_response = region_response
    self.search_id = search_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.region_response = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = RegionResult()
            _elem5.read(iprot)
            self.region_response.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegionResponseData')
    if self.status_code is not None:
      oprot.writeFieldBegin('status_code', TType.I32, 1)
      oprot.writeI32(self.status_code)
      oprot.writeFieldEnd()
    if self.region_response is not None:
      oprot.writeFieldBegin('region_response', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.region_response))
      for iter6 in self.region_response:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 3)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status_code)
    value = (value * 31) ^ hash(self.region_response)
    value = (value * 31) ^ hash(self.search_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeywordResult:
  """
  Attributes:
   - type
   - keyword_id
   - keyword_id_v4
   - region_id
   - region_id_v4
   - keyword_name
   - geoinfo
   - weight
   - langu
   - hot_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'keyword_id', None, None, ), # 2
    (3, TType.I32, 'keyword_id_v4', None, None, ), # 3
    (4, TType.I32, 'region_id', None, None, ), # 4
    (5, TType.I32, 'region_id_v4', None, None, ), # 5
    (6, TType.STRING, 'keyword_name', None, None, ), # 6
    (7, TType.STRUCT, 'geoinfo', (cm.ttypes.GeoInfo, cm.ttypes.GeoInfo.thrift_spec), None, ), # 7
    (8, TType.I32, 'weight', None, None, ), # 8
    (9, TType.I32, 'langu', None, None, ), # 9
    (10, TType.I32, 'hot_count', None, None, ), # 10
  )

  def __init__(self, type=None, keyword_id=None, keyword_id_v4=None, region_id=None, region_id_v4=None, keyword_name=None, geoinfo=None, weight=None, langu=None, hot_count=None,):
    self.type = type
    self.keyword_id = keyword_id
    self.keyword_id_v4 = keyword_id_v4
    self.region_id = region_id
    self.region_id_v4 = region_id_v4
    self.keyword_name = keyword_name
    self.geoinfo = geoinfo
    self.weight = weight
    self.langu = langu
    self.hot_count = hot_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.keyword_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.keyword_id_v4 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.region_id_v4 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.keyword_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.geoinfo = cm.ttypes.GeoInfo()
          self.geoinfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.langu = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.hot_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeywordResult')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.keyword_id is not None:
      oprot.writeFieldBegin('keyword_id', TType.I32, 2)
      oprot.writeI32(self.keyword_id)
      oprot.writeFieldEnd()
    if self.keyword_id_v4 is not None:
      oprot.writeFieldBegin('keyword_id_v4', TType.I32, 3)
      oprot.writeI32(self.keyword_id_v4)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 4)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_id_v4 is not None:
      oprot.writeFieldBegin('region_id_v4', TType.I32, 5)
      oprot.writeI32(self.region_id_v4)
      oprot.writeFieldEnd()
    if self.keyword_name is not None:
      oprot.writeFieldBegin('keyword_name', TType.STRING, 6)
      oprot.writeString(self.keyword_name)
      oprot.writeFieldEnd()
    if self.geoinfo is not None:
      oprot.writeFieldBegin('geoinfo', TType.STRUCT, 7)
      self.geoinfo.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 8)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.langu is not None:
      oprot.writeFieldBegin('langu', TType.I32, 9)
      oprot.writeI32(self.langu)
      oprot.writeFieldEnd()
    if self.hot_count is not None:
      oprot.writeFieldBegin('hot_count', TType.I32, 10)
      oprot.writeI32(self.hot_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.keyword_id)
    value = (value * 31) ^ hash(self.keyword_id_v4)
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_id_v4)
    value = (value * 31) ^ hash(self.keyword_name)
    value = (value * 31) ^ hash(self.geoinfo)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.langu)
    value = (value * 31) ^ hash(self.hot_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeywordRequest:
  """
  Attributes:
   - region_id
   - search
   - user_info
   - guest
   - langu
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, -1, ), # 1
    (2, TType.STRING, 'search', None, None, ), # 2
    (3, TType.STRUCT, 'user_info', (cm.ttypes.UserInfo, cm.ttypes.UserInfo.thrift_spec), None, ), # 3
    (4, TType.I32, 'guest', None, None, ), # 4
    (5, TType.I32, 'langu', None, None, ), # 5
  )

  def __init__(self, region_id=thrift_spec[1][4], search=None, user_info=None, guest=None, langu=None,):
    self.region_id = region_id
    self.search = search
    self.user_info = user_info
    self.guest = guest
    self.langu = langu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.search = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.user_info = cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.guest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.langu = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeywordRequest')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.search is not None:
      oprot.writeFieldBegin('search', TType.STRING, 2)
      oprot.writeString(self.search)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 3)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.guest is not None:
      oprot.writeFieldBegin('guest', TType.I32, 4)
      oprot.writeI32(self.guest)
      oprot.writeFieldEnd()
    if self.langu is not None:
      oprot.writeFieldBegin('langu', TType.I32, 5)
      oprot.writeI32(self.langu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.search)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.guest)
    value = (value * 31) ^ hash(self.langu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeywordResponseData:
  """
  Attributes:
   - status_code
   - keyword_response
   - search_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status_code', None, -1, ), # 1
    (2, TType.LIST, 'keyword_response', (TType.STRUCT,(KeywordResult, KeywordResult.thrift_spec)), None, ), # 2
    (3, TType.I64, 'search_id', None, None, ), # 3
  )

  def __init__(self, status_code=thrift_spec[1][4], keyword_response=None, search_id=None,):
    self.status_code = status_code
    self.keyword_response = keyword_response
    self.search_id = search_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keyword_response = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = KeywordResult()
            _elem12.read(iprot)
            self.keyword_response.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeywordResponseData')
    if self.status_code is not None:
      oprot.writeFieldBegin('status_code', TType.I32, 1)
      oprot.writeI32(self.status_code)
      oprot.writeFieldEnd()
    if self.keyword_response is not None:
      oprot.writeFieldBegin('keyword_response', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.keyword_response))
      for iter13 in self.keyword_response:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 3)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status_code)
    value = (value * 31) ^ hash(self.keyword_response)
    value = (value * 31) ^ hash(self.search_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
