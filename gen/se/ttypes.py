#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
import  sys
sys.path.append('../')
sys.path.append('../gen/gen.cm/')
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import gen.cm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InnerSearchType:
  kRegionSearch = 1
  kNearBySearch = 2
  kBoundSearch = 3
  kDetailSearch = 4
  kStaticDigest = 5

  _VALUES_TO_NAMES = {
    1: "kRegionSearch",
    2: "kNearBySearch",
    3: "kBoundSearch",
    4: "kDetailSearch",
    5: "kStaticDigest",
  }

  _NAMES_TO_VALUES = {
    "kRegionSearch": 1,
    "kNearBySearch": 2,
    "kBoundSearch": 3,
    "kDetailSearch": 4,
    "kStaticDigest": 5,
  }

class FilterSearchType:
  kFilterSearch = 1

  _VALUES_TO_NAMES = {
    1: "kFilterSearch",
  }

  _NAMES_TO_VALUES = {
    "kFilterSearch": 1,
  }

class StrategyMode:
  kBoundTraitPriority = 1
  kInvalidStrategyMode = 999

  _VALUES_TO_NAMES = {
    1: "kBoundTraitPriority",
    999: "kInvalidStrategyMode",
  }

  _NAMES_TO_VALUES = {
    "kBoundTraitPriority": 1,
    "kInvalidStrategyMode": 999,
  }

class TraitType:
  kCommendTrait = 1
  kInvalidTraitType = 999

  _VALUES_TO_NAMES = {
    1: "kCommendTrait",
    999: "kInvalidTraitType",
  }

  _NAMES_TO_VALUES = {
    "kCommendTrait": 1,
    "kInvalidTraitType": 999,
  }


class ListRequest:
  """
  Attributes:
   - region_id
   - check_in_date
   - check_out_date
   - poi_id
   - poi_str
   - hotel_num
   - hotel_name
   - hotel_price_range
   - hotel_star
   - hotel_brand
   - hotel_type
   - hotel_facilitie
   - rank_type
   - rank_distance
   - page_info
   - hotel_distance
   - session_id
   - user_info
   - filter_ota
   - room_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.I64, 'check_in_date', None, None, ), # 2
    (3, TType.I64, 'check_out_date', None, None, ), # 3
    (4, TType.I32, 'poi_id', None, None, ), # 4
    (5, TType.STRING, 'poi_str', None, None, ), # 5
    (6, TType.I32, 'hotel_num', None, -1, ), # 6
    (7, TType.STRING, 'hotel_name', None, None, ), # 7
    (8, TType.LIST, 'hotel_price_range', (TType.STRUCT,(gen.cm.ttypes.PriceRange,gen.cm.ttypes.PriceRange.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'hotel_star', (TType.I32,None), None, ), # 9
    (10, TType.LIST, 'hotel_brand', (TType.I32,None), None, ), # 10
    (11, TType.LIST, 'hotel_type', (TType.I32,None), None, ), # 11
    (12, TType.LIST, 'hotel_facilitie', (TType.I32,None), None, ), # 12
    (13, TType.I32, 'rank_type', None, None, ), # 13
    (14, TType.I32, 'rank_distance', None, None, ), # 14
    None, # 15
    (16, TType.STRUCT, 'page_info', (gen.cm.ttypes.PageInfo, gen.cm.ttypes.PageInfo.thrift_spec), None, ), # 16
    (17, TType.I32, 'hotel_distance', None, None, ), # 17
    (18, TType.STRING, 'session_id', None, None, ), # 18
    (19, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 19
    (20, TType.I64, 'filter_ota', None, None, ), # 20
    (21, TType.LIST, 'room_info', (TType.STRUCT,(gen.cm.ttypes.RoomInfo, gen.cm.ttypes.RoomInfo.thrift_spec)), None, ), # 21
  )

  def __init__(self, region_id=None, check_in_date=None, check_out_date=None, poi_id=None, poi_str=None, hotel_num=thrift_spec[6][4], hotel_name=None, hotel_price_range=None, hotel_star=None, hotel_brand=None, hotel_type=None, hotel_facilitie=None, rank_type=None, rank_distance=None, page_info=None, hotel_distance=None, session_id=None, user_info=None, filter_ota=None, room_info=None,):
    self.region_id = region_id
    self.check_in_date = check_in_date
    self.check_out_date = check_out_date
    self.poi_id = poi_id
    self.poi_str = poi_str
    self.hotel_num = hotel_num
    self.hotel_name = hotel_name
    self.hotel_price_range = hotel_price_range
    self.hotel_star = hotel_star
    self.hotel_brand = hotel_brand
    self.hotel_type = hotel_type
    self.hotel_facilitie = hotel_facilitie
    self.rank_type = rank_type
    self.rank_distance = rank_distance
    self.page_info = page_info
    self.hotel_distance = hotel_distance
    self.session_id = session_id
    self.user_info = user_info
    self.filter_ota = filter_ota
    self.room_info = room_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.check_in_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.check_out_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.poi_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.poi_str = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.hotel_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.hotel_price_range = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = gen.cm.ttypes.PriceRange()
            _elem5.read(iprot)
            self.hotel_price_range.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.hotel_star = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.hotel_star.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.hotel_brand = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI32();
            self.hotel_brand.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.hotel_type = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.hotel_type.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.hotel_facilitie = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readI32();
            self.hotel_facilitie.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.rank_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.rank_distance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.page_info = gen.cm.ttypes.PageInfo()
          self.page_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.hotel_distance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.filter_ota = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.room_info = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = gen.cm.ttypes.RoomInfo()
            _elem35.read(iprot)
            self.room_info.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListRequest')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.check_in_date is not None:
      oprot.writeFieldBegin('check_in_date', TType.I64, 2)
      oprot.writeI64(self.check_in_date)
      oprot.writeFieldEnd()
    if self.check_out_date is not None:
      oprot.writeFieldBegin('check_out_date', TType.I64, 3)
      oprot.writeI64(self.check_out_date)
      oprot.writeFieldEnd()
    if self.poi_id is not None:
      oprot.writeFieldBegin('poi_id', TType.I32, 4)
      oprot.writeI32(self.poi_id)
      oprot.writeFieldEnd()
    if self.poi_str is not None:
      oprot.writeFieldBegin('poi_str', TType.STRING, 5)
      oprot.writeString(self.poi_str)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 6)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.hotel_name is not None:
      oprot.writeFieldBegin('hotel_name', TType.STRING, 7)
      oprot.writeString(self.hotel_name)
      oprot.writeFieldEnd()
    if self.hotel_price_range is not None:
      oprot.writeFieldBegin('hotel_price_range', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_price_range))
      for iter36 in self.hotel_price_range:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_star is not None:
      oprot.writeFieldBegin('hotel_star', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.hotel_star))
      for iter37 in self.hotel_star:
        oprot.writeI32(iter37)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_brand is not None:
      oprot.writeFieldBegin('hotel_brand', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.hotel_brand))
      for iter38 in self.hotel_brand:
        oprot.writeI32(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_type is not None:
      oprot.writeFieldBegin('hotel_type', TType.LIST, 11)
      oprot.writeListBegin(TType.I32, len(self.hotel_type))
      for iter39 in self.hotel_type:
        oprot.writeI32(iter39)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_facilitie is not None:
      oprot.writeFieldBegin('hotel_facilitie', TType.LIST, 12)
      oprot.writeListBegin(TType.I32, len(self.hotel_facilitie))
      for iter40 in self.hotel_facilitie:
        oprot.writeI32(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rank_type is not None:
      oprot.writeFieldBegin('rank_type', TType.I32, 13)
      oprot.writeI32(self.rank_type)
      oprot.writeFieldEnd()
    if self.rank_distance is not None:
      oprot.writeFieldBegin('rank_distance', TType.I32, 14)
      oprot.writeI32(self.rank_distance)
      oprot.writeFieldEnd()
    if self.page_info is not None:
      oprot.writeFieldBegin('page_info', TType.STRUCT, 16)
      self.page_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_distance is not None:
      oprot.writeFieldBegin('hotel_distance', TType.I32, 17)
      oprot.writeI32(self.hotel_distance)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 18)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 19)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_ota is not None:
      oprot.writeFieldBegin('filter_ota', TType.I64, 20)
      oprot.writeI64(self.filter_ota)
      oprot.writeFieldEnd()
    if self.room_info is not None:
      oprot.writeFieldBegin('room_info', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.room_info))
      for iter41 in self.room_info:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.check_in_date)
    value = (value * 31) ^ hash(self.check_out_date)
    value = (value * 31) ^ hash(self.poi_id)
    value = (value * 31) ^ hash(self.poi_str)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.hotel_name)
    value = (value * 31) ^ hash(self.hotel_price_range)
    value = (value * 31) ^ hash(self.hotel_star)
    value = (value * 31) ^ hash(self.hotel_brand)
    value = (value * 31) ^ hash(self.hotel_type)
    value = (value * 31) ^ hash(self.hotel_facilitie)
    value = (value * 31) ^ hash(self.rank_type)
    value = (value * 31) ^ hash(self.rank_distance)
    value = (value * 31) ^ hash(self.page_info)
    value = (value * 31) ^ hash(self.hotel_distance)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.filter_ota)
    value = (value * 31) ^ hash(self.room_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListResponse:
  """
  Attributes:
   - search_id
   - lowest_price
   - result_hotel_num
   - page_num
   - hotel_list
   - hotel_filter
   - center_coordinate
   - region_polygon
   - region_info
   - poi_info
   - rank_type
   - poi_lang
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.I32, 'lowest_price', None, None, ), # 2
    (3, TType.I32, 'result_hotel_num', None, None, ), # 3
    (4, TType.I32, 'page_num', None, None, ), # 4
    (5, TType.LIST, 'hotel_list', (TType.STRUCT,(gen.cm.ttypes.HotelInfoList, gen.cm.ttypes.HotelInfoList.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'hotel_filter', (gen.cm.ttypes.HotelFilter, gen.cm.ttypes.HotelFilter.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'center_coordinate', (gen.cm.ttypes.GeoInfo, gen.cm.ttypes.GeoInfo.thrift_spec), None, ), # 7
    (8, TType.LIST, 'region_polygon', (TType.STRUCT,(gen.cm.ttypes.GeoInfo, gen.cm.ttypes.GeoInfo.thrift_spec)), None, ), # 8
    (9, TType.STRUCT, 'region_info', (gen.cm.ttypes.RegionInfo, gen.cm.ttypes.RegionInfo.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'poi_info', (gen.cm.ttypes.POIData, gen.cm.ttypes.POIData.thrift_spec), None, ), # 10
    (11, TType.I32, 'rank_type', None, None, ), # 11
    (12, TType.I32, 'poi_lang', None, None, ), # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, lowest_price=None, result_hotel_num=None, page_num=None, hotel_list=None, hotel_filter=None, center_coordinate=None, region_polygon=None, region_info=None, poi_info=None, rank_type=None, poi_lang=None, status=None,):
    self.search_id = search_id
    self.lowest_price = lowest_price
    self.result_hotel_num = result_hotel_num
    self.page_num = page_num
    self.hotel_list = hotel_list
    self.hotel_filter = hotel_filter
    self.center_coordinate = center_coordinate
    self.region_polygon = region_polygon
    self.region_info = region_info
    self.poi_info = poi_info
    self.rank_type = rank_type
    self.poi_lang = poi_lang
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.lowest_price = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.result_hotel_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.hotel_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = gen.cm.ttypes.HotelInfoList()
            _elem47.read(iprot)
            self.hotel_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.hotel_filter = gen.cm.ttypes.HotelFilter()
          self.hotel_filter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.center_coordinate = gen.cm.ttypes.GeoInfo()
          self.center_coordinate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.region_polygon = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = gen.cm.ttypes.GeoInfo()
            _elem53.read(iprot)
            self.region_polygon.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.region_info = gen.cm.ttypes.RegionInfo()
          self.region_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.poi_info = gen.cm.ttypes.POIData()
          self.poi_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.rank_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.poi_lang = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.lowest_price is not None:
      oprot.writeFieldBegin('lowest_price', TType.I32, 2)
      oprot.writeI32(self.lowest_price)
      oprot.writeFieldEnd()
    if self.result_hotel_num is not None:
      oprot.writeFieldBegin('result_hotel_num', TType.I32, 3)
      oprot.writeI32(self.result_hotel_num)
      oprot.writeFieldEnd()
    if self.page_num is not None:
      oprot.writeFieldBegin('page_num', TType.I32, 4)
      oprot.writeI32(self.page_num)
      oprot.writeFieldEnd()
    if self.hotel_list is not None:
      oprot.writeFieldBegin('hotel_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_list))
      for iter54 in self.hotel_list:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_filter is not None:
      oprot.writeFieldBegin('hotel_filter', TType.STRUCT, 6)
      self.hotel_filter.write(oprot)
      oprot.writeFieldEnd()
    if self.center_coordinate is not None:
      oprot.writeFieldBegin('center_coordinate', TType.STRUCT, 7)
      self.center_coordinate.write(oprot)
      oprot.writeFieldEnd()
    if self.region_polygon is not None:
      oprot.writeFieldBegin('region_polygon', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.region_polygon))
      for iter55 in self.region_polygon:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.region_info is not None:
      oprot.writeFieldBegin('region_info', TType.STRUCT, 9)
      self.region_info.write(oprot)
      oprot.writeFieldEnd()
    if self.poi_info is not None:
      oprot.writeFieldBegin('poi_info', TType.STRUCT, 10)
      self.poi_info.write(oprot)
      oprot.writeFieldEnd()
    if self.rank_type is not None:
      oprot.writeFieldBegin('rank_type', TType.I32, 11)
      oprot.writeI32(self.rank_type)
      oprot.writeFieldEnd()
    if self.poi_lang is not None:
      oprot.writeFieldBegin('poi_lang', TType.I32, 12)
      oprot.writeI32(self.poi_lang)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.lowest_price)
    value = (value * 31) ^ hash(self.result_hotel_num)
    value = (value * 31) ^ hash(self.page_num)
    value = (value * 31) ^ hash(self.hotel_list)
    value = (value * 31) ^ hash(self.hotel_filter)
    value = (value * 31) ^ hash(self.center_coordinate)
    value = (value * 31) ^ hash(self.region_polygon)
    value = (value * 31) ^ hash(self.region_info)
    value = (value * 31) ^ hash(self.poi_info)
    value = (value * 31) ^ hash(self.rank_type)
    value = (value * 31) ^ hash(self.poi_lang)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListMapResponse:
  """
  Attributes:
   - search_id
   - hotel_info
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.LIST, 'hotel_info', (TType.STRUCT,(gen.cm.ttypes.HotelInfoMap, gen.cm.ttypes.HotelInfoMap.thrift_spec)), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, hotel_info=None, status=None,):
    self.search_id = search_id
    self.hotel_info = hotel_info
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hotel_info = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = gen.cm.ttypes.HotelInfoMap()
            _elem61.read(iprot)
            self.hotel_info.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListMapResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.hotel_info is not None:
      oprot.writeFieldBegin('hotel_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_info))
      for iter62 in self.hotel_info:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.hotel_info)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListRtsRequest:
  """
  Attributes:
   - hotel_list
   - check_in_date
   - check_out_date
   - search_id
   - session_id
   - user_info
   - filter_ota
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hotel_list', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'check_in_date', None, None, ), # 2
    (3, TType.I64, 'check_out_date', None, None, ), # 3
    (4, TType.I64, 'search_id', None, None, ), # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
    None, # 8
    (9, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 9
    (10, TType.I64, 'filter_ota', None, 0, ), # 10
  )

  def __init__(self, hotel_list=None, check_in_date=None, check_out_date=None, search_id=None, session_id=None, user_info=None, filter_ota=thrift_spec[10][4],):
    self.hotel_list = hotel_list
    self.check_in_date = check_in_date
    self.check_out_date = check_out_date
    self.search_id = search_id
    self.session_id = session_id
    self.user_info = user_info
    self.filter_ota = filter_ota

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hotel_list = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI64();
            self.hotel_list.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.check_in_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.check_out_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.filter_ota = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListRtsRequest')
    if self.hotel_list is not None:
      oprot.writeFieldBegin('hotel_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.hotel_list))
      for iter69 in self.hotel_list:
        oprot.writeI64(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.check_in_date is not None:
      oprot.writeFieldBegin('check_in_date', TType.I64, 2)
      oprot.writeI64(self.check_in_date)
      oprot.writeFieldEnd()
    if self.check_out_date is not None:
      oprot.writeFieldBegin('check_out_date', TType.I64, 3)
      oprot.writeI64(self.check_out_date)
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 4)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 9)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_ota is not None:
      oprot.writeFieldBegin('filter_ota', TType.I64, 10)
      oprot.writeI64(self.filter_ota)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_list)
    value = (value * 31) ^ hash(self.check_in_date)
    value = (value * 31) ^ hash(self.check_out_date)
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.filter_ota)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListRtsResponse:
  """
  Attributes:
   - search_id
   - hotel_rts_info
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.LIST, 'hotel_rts_info', (TType.STRUCT,(gen.cm.ttypes.HotelRtsInfo, gen.cm.ttypes.HotelRtsInfo.thrift_spec)), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, hotel_rts_info=None, status=None,):
    self.search_id = search_id
    self.hotel_rts_info = hotel_rts_info
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hotel_rts_info = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = gen.cm.ttypes.HotelRtsInfo()
            _elem75.read(iprot)
            self.hotel_rts_info.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListRtsResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.hotel_rts_info is not None:
      oprot.writeFieldBegin('hotel_rts_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_rts_info))
      for iter76 in self.hotel_rts_info:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.hotel_rts_info)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DetailRequest:
  """
  Attributes:
   - hotel_id
   - check_in_date
   - check_out_date
   - region_str
   - region_id
   - session_id
   - user_info
   - filter_ota
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.I64, 'check_in_date', None, None, ), # 2
    (3, TType.I64, 'check_out_date', None, None, ), # 3
    (4, TType.STRING, 'region_str', None, None, ), # 4
    (5, TType.I32, 'region_id', None, 0, ), # 5
    None, # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
    None, # 8
    (9, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 9
    (10, TType.I64, 'filter_ota', None, 0, ), # 10
  )

  def __init__(self, hotel_id=None, check_in_date=None, check_out_date=None, region_str=None, region_id=thrift_spec[5][4], session_id=None, user_info=None, filter_ota=thrift_spec[10][4],):
    self.hotel_id = hotel_id
    self.check_in_date = check_in_date
    self.check_out_date = check_out_date
    self.region_str = region_str
    self.region_id = region_id
    self.session_id = session_id
    self.user_info = user_info
    self.filter_ota = filter_ota

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.check_in_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.check_out_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.region_str = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.filter_ota = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DetailRequest')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.check_in_date is not None:
      oprot.writeFieldBegin('check_in_date', TType.I64, 2)
      oprot.writeI64(self.check_in_date)
      oprot.writeFieldEnd()
    if self.check_out_date is not None:
      oprot.writeFieldBegin('check_out_date', TType.I64, 3)
      oprot.writeI64(self.check_out_date)
      oprot.writeFieldEnd()
    if self.region_str is not None:
      oprot.writeFieldBegin('region_str', TType.STRING, 4)
      oprot.writeString(self.region_str)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 5)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 9)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_ota is not None:
      oprot.writeFieldBegin('filter_ota', TType.I64, 10)
      oprot.writeI64(self.filter_ota)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.check_in_date)
    value = (value * 31) ^ hash(self.check_out_date)
    value = (value * 31) ^ hash(self.region_str)
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.filter_ota)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DetailResponse:
  """
  Attributes:
   - search_id
   - hotel_info
   - provider_detail
   - region_info
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.STRUCT, 'hotel_info', (gen.cm.ttypes.HotelInfoDetail, gen.cm.ttypes.HotelInfoDetail.thrift_spec), None, ), # 2
    (3, TType.LIST, 'provider_detail', (TType.STRUCT,(gen.cm.ttypes.ProviderDetail, gen.cm.ttypes.ProviderDetail.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'region_info', (gen.cm.ttypes.RegionInfo, gen.cm.ttypes.RegionInfo.thrift_spec), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, hotel_info=None, provider_detail=None, region_info=None, status=None,):
    self.search_id = search_id
    self.hotel_info = hotel_info
    self.provider_detail = provider_detail
    self.region_info = region_info
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hotel_info = gen.cm.ttypes.HotelInfoDetail()
          self.hotel_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.provider_detail = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = gen.cm.ttypes.ProviderDetail()
            _elem82.read(iprot)
            self.provider_detail.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.region_info = gen.cm.ttypes.RegionInfo()
          self.region_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DetailResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.hotel_info is not None:
      oprot.writeFieldBegin('hotel_info', TType.STRUCT, 2)
      self.hotel_info.write(oprot)
      oprot.writeFieldEnd()
    if self.provider_detail is not None:
      oprot.writeFieldBegin('provider_detail', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.provider_detail))
      for iter83 in self.provider_detail:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.region_info is not None:
      oprot.writeFieldBegin('region_info', TType.STRUCT, 4)
      self.region_info.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.hotel_info)
    value = (value * 31) ^ hash(self.provider_detail)
    value = (value * 31) ^ hash(self.region_info)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotHotelResponse:
  """
  Attributes:
   - search_id
   - hot_hotel
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.LIST, 'hot_hotel', (TType.STRUCT,(gen.cm.ttypes.HotHotelInfo, gen.cm.ttypes.HotHotelInfo.thrift_spec)), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, hot_hotel=None, status=None,):
    self.search_id = search_id
    self.hot_hotel = hot_hotel
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hot_hotel = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = gen.cm.ttypes.HotHotelInfo()
            _elem89.read(iprot)
            self.hot_hotel.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotHotelResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.hot_hotel is not None:
      oprot.writeFieldBegin('hot_hotel', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hot_hotel))
      for iter90 in self.hot_hotel:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.hot_hotel)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DetailRtsRequest:
  """
  Attributes:
   - hotel_id
   - check_in_date
   - check_out_date
   - search_id
   - provider_list
   - session_id
   - user_info
   - filter_ota
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.I64, 'check_in_date', None, None, ), # 2
    (3, TType.I64, 'check_out_date', None, None, ), # 3
    (4, TType.I64, 'search_id', None, None, ), # 4
    (5, TType.LIST, 'provider_list', (TType.I64,None), None, ), # 5
    None, # 6
    None, # 7
    (8, TType.STRING, 'session_id', None, None, ), # 8
    (9, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 9
    (10, TType.I64, 'filter_ota', None, 0, ), # 10
  )

  def __init__(self, hotel_id=None, check_in_date=None, check_out_date=None, search_id=None, provider_list=None, session_id=None, user_info=None, filter_ota=thrift_spec[10][4],):
    self.hotel_id = hotel_id
    self.check_in_date = check_in_date
    self.check_out_date = check_out_date
    self.search_id = search_id
    self.provider_list = provider_list
    self.session_id = session_id
    self.user_info = user_info
    self.filter_ota = filter_ota

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.check_in_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.check_out_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.provider_list = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readI64();
            self.provider_list.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.filter_ota = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DetailRtsRequest')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.check_in_date is not None:
      oprot.writeFieldBegin('check_in_date', TType.I64, 2)
      oprot.writeI64(self.check_in_date)
      oprot.writeFieldEnd()
    if self.check_out_date is not None:
      oprot.writeFieldBegin('check_out_date', TType.I64, 3)
      oprot.writeI64(self.check_out_date)
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 4)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.provider_list is not None:
      oprot.writeFieldBegin('provider_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.provider_list))
      for iter97 in self.provider_list:
        oprot.writeI64(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 8)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 9)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_ota is not None:
      oprot.writeFieldBegin('filter_ota', TType.I64, 10)
      oprot.writeI64(self.filter_ota)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.check_in_date)
    value = (value * 31) ^ hash(self.check_out_date)
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.provider_list)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.filter_ota)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DetailRtsResponse:
  """
  Attributes:
   - search_id
   - provider_detail
   - session_id
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.LIST, 'provider_detail', (TType.STRUCT,(gen.cm.ttypes.ProviderDetailInc, gen.cm.ttypes.ProviderDetailInc.thrift_spec)), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, provider_detail=None, session_id=None, status=None,):
    self.search_id = search_id
    self.provider_detail = provider_detail
    self.session_id = session_id
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.provider_detail = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = gen.cm.ttypes.ProviderDetailInc()
            _elem103.read(iprot)
            self.provider_detail.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DetailRtsResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.provider_detail is not None:
      oprot.writeFieldBegin('provider_detail', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.provider_detail))
      for iter104 in self.provider_detail:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.provider_detail)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FastFilterInfo:
  """
  Attributes:
   - type_id
   - keyword_cn
   - keyword_en
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_id', None, None, ), # 1
    (2, TType.STRING, 'keyword_cn', None, None, ), # 2
    (3, TType.STRING, 'keyword_en', None, None, ), # 3
    (4, TType.I32, 'count', None, None, ), # 4
  )

  def __init__(self, type_id=None, keyword_cn=None, keyword_en=None, count=None,):
    self.type_id = type_id
    self.keyword_cn = keyword_cn
    self.keyword_en = keyword_en
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.keyword_cn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.keyword_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FastFilterInfo')
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 1)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.keyword_cn is not None:
      oprot.writeFieldBegin('keyword_cn', TType.STRING, 2)
      oprot.writeString(self.keyword_cn)
      oprot.writeFieldEnd()
    if self.keyword_en is not None:
      oprot.writeFieldBegin('keyword_en', TType.STRING, 3)
      oprot.writeString(self.keyword_en)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type_id)
    value = (value * 31) ^ hash(self.keyword_cn)
    value = (value * 31) ^ hash(self.keyword_en)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotHotelRequest:
  """
  Attributes:
   - region_id
   - user_info
   - session_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'region_id', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
  )

  def __init__(self, region_id=None, user_info=None, session_id=None,):
    self.region_id = region_id
    self.user_info = user_info
    self.session_id = session_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.region_id = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = iprot.readI32();
            self.region_id.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotHotelRequest')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.region_id))
      for iter111 in self.region_id:
        oprot.writeI32(iter111)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 2)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.session_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearbyRequest:
  """
  Attributes:
   - hotel_id
   - region_id
   - session_id
   - user_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.I32, 'region_id', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'session_id', None, None, ), # 7
    None, # 8
    (9, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 9
  )

  def __init__(self, hotel_id=None, region_id=None, session_id=None, user_info=None,):
    self.hotel_id = hotel_id
    self.region_id = region_id
    self.session_id = session_id
    self.user_info = user_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.region_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearbyRequest')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 2)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 7)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 9)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.user_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearbyResponse:
  """
  Attributes:
   - search_id
   - hotel_name_cn
   - hotel_name_en
   - poi
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_id', None, None, ), # 1
    (2, TType.STRING, 'hotel_name_cn', None, None, ), # 2
    (3, TType.STRING, 'hotel_name_en', None, None, ), # 3
    (4, TType.LIST, 'poi', (TType.STRUCT,(gen.cm.ttypes.NearbyPOI, gen.cm.ttypes.NearbyPOI.thrift_spec)), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 13
  )

  def __init__(self, search_id=None, hotel_name_cn=None, hotel_name_en=None, poi=None, status=None,):
    self.search_id = search_id
    self.hotel_name_cn = hotel_name_cn
    self.hotel_name_en = hotel_name_en
    self.poi = poi
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hotel_name_cn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_name_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.poi = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = gen.cm.ttypes.NearbyPOI()
            _elem117.read(iprot)
            self.poi.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearbyResponse')
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 1)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.hotel_name_cn is not None:
      oprot.writeFieldBegin('hotel_name_cn', TType.STRING, 2)
      oprot.writeString(self.hotel_name_cn)
      oprot.writeFieldEnd()
    if self.hotel_name_en is not None:
      oprot.writeFieldBegin('hotel_name_en', TType.STRING, 3)
      oprot.writeString(self.hotel_name_en)
      oprot.writeFieldEnd()
    if self.poi is not None:
      oprot.writeFieldBegin('poi', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.poi))
      for iter118 in self.poi:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 13)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.hotel_name_cn)
    value = (value * 31) ^ hash(self.hotel_name_en)
    value = (value * 31) ^ hash(self.poi)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InnerSearchRequest:
  """
  Attributes:
   - inner_search_type
   - hotel_attr
   - room_attr
   - product_attr
   - geo_attr
   - customer_attr
   - page_rank_attr
   - caller_attr
   - return_attr
   - user_info
   - filter_attr
   - rec_attr
   - fastfilter_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'inner_search_type', None, None, ), # 1
    (2, TType.STRUCT, 'hotel_attr', (gen.cm.ttypes.HotelAttribute, gen.cm.ttypes.HotelAttribute.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'room_attr', (gen.cm.ttypes.RoomAttribute, gen.cm.ttypes.RoomAttribute.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'product_attr', (gen.cm.ttypes.ProductAttribute, gen.cm.ttypes.ProductAttribute.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'geo_attr', (gen.cm.ttypes.GeoAttribute, gen.cm.ttypes.GeoAttribute.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'customer_attr', (gen.cm.ttypes.CustomerAttribute, gen.cm.ttypes.CustomerAttribute.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'page_rank_attr', (gen.cm.ttypes.PageRankAttribute, gen.cm.ttypes.PageRankAttribute.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'caller_attr', (gen.cm.ttypes.CallerAttribute, gen.cm.ttypes.CallerAttribute.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'return_attr', (gen.cm.ttypes.ReturnAttribute, gen.cm.ttypes.ReturnAttribute.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'filter_attr', (gen.cm.ttypes.FilterAttribute, gen.cm.ttypes.FilterAttribute.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'rec_attr', (gen.cm.ttypes.RecommendAttribute, gen.cm.ttypes.RecommendAttribute.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'fastfilter_attr', (gen.cm.ttypes.FastFilterAttribute, gen.cm.ttypes.FastFilterAttribute.thrift_spec), None, ), # 13
  )

  def __init__(self, inner_search_type=None, hotel_attr=None, room_attr=None, product_attr=None, geo_attr=None, customer_attr=None, page_rank_attr=None, caller_attr=None, return_attr=None, user_info=None, filter_attr=None, rec_attr=None, fastfilter_attr=None,):
    self.inner_search_type = inner_search_type
    self.hotel_attr = hotel_attr
    self.room_attr = room_attr
    self.product_attr = product_attr
    self.geo_attr = geo_attr
    self.customer_attr = customer_attr
    self.page_rank_attr = page_rank_attr
    self.caller_attr = caller_attr
    self.return_attr = return_attr
    self.user_info = user_info
    self.filter_attr = filter_attr
    self.rec_attr = rec_attr
    self.fastfilter_attr = fastfilter_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.inner_search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.hotel_attr = gen.cm.ttypes.HotelAttribute()
          self.hotel_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.room_attr = gen.cm.ttypes.RoomAttribute()
          self.room_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.product_attr = gen.cm.ttypes.ProductAttribute()
          self.product_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.geo_attr = gen.cm.ttypes.GeoAttribute()
          self.geo_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.customer_attr = gen.cm.ttypes.CustomerAttribute()
          self.customer_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.page_rank_attr = gen.cm.ttypes.PageRankAttribute()
          self.page_rank_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.caller_attr = gen.cm.ttypes.CallerAttribute()
          self.caller_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.return_attr = gen.cm.ttypes.ReturnAttribute()
          self.return_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.filter_attr = gen.cm.ttypes.FilterAttribute()
          self.filter_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.rec_attr = gen.cm.ttypes.RecommendAttribute()
          self.rec_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.fastfilter_attr = gen.cm.ttypes.FastFilterAttribute()
          self.fastfilter_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InnerSearchRequest')
    if self.inner_search_type is not None:
      oprot.writeFieldBegin('inner_search_type', TType.I32, 1)
      oprot.writeI32(self.inner_search_type)
      oprot.writeFieldEnd()
    if self.hotel_attr is not None:
      oprot.writeFieldBegin('hotel_attr', TType.STRUCT, 2)
      self.hotel_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.room_attr is not None:
      oprot.writeFieldBegin('room_attr', TType.STRUCT, 3)
      self.room_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.product_attr is not None:
      oprot.writeFieldBegin('product_attr', TType.STRUCT, 4)
      self.product_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.geo_attr is not None:
      oprot.writeFieldBegin('geo_attr', TType.STRUCT, 5)
      self.geo_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.customer_attr is not None:
      oprot.writeFieldBegin('customer_attr', TType.STRUCT, 6)
      self.customer_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.page_rank_attr is not None:
      oprot.writeFieldBegin('page_rank_attr', TType.STRUCT, 7)
      self.page_rank_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.caller_attr is not None:
      oprot.writeFieldBegin('caller_attr', TType.STRUCT, 8)
      self.caller_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.return_attr is not None:
      oprot.writeFieldBegin('return_attr', TType.STRUCT, 9)
      self.return_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 10)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_attr is not None:
      oprot.writeFieldBegin('filter_attr', TType.STRUCT, 11)
      self.filter_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.rec_attr is not None:
      oprot.writeFieldBegin('rec_attr', TType.STRUCT, 12)
      self.rec_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.fastfilter_attr is not None:
      oprot.writeFieldBegin('fastfilter_attr', TType.STRUCT, 13)
      self.fastfilter_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.inner_search_type)
    value = (value * 31) ^ hash(self.hotel_attr)
    value = (value * 31) ^ hash(self.room_attr)
    value = (value * 31) ^ hash(self.product_attr)
    value = (value * 31) ^ hash(self.geo_attr)
    value = (value * 31) ^ hash(self.customer_attr)
    value = (value * 31) ^ hash(self.page_rank_attr)
    value = (value * 31) ^ hash(self.caller_attr)
    value = (value * 31) ^ hash(self.return_attr)
    value = (value * 31) ^ hash(self.user_info)
    value = (value * 31) ^ hash(self.filter_attr)
    value = (value * 31) ^ hash(self.rec_attr)
    value = (value * 31) ^ hash(self.fastfilter_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InnerSearchResponse:
  """
  Attributes:
   - status
   - total
   - count
   - page_size
   - page_index
   - hotels_details
   - statistics
   - query_parse_result
   - min_weifang_price
   - promotion_group
   - debug_info
   - filter_result
   - fast_filter_info
   - debug_response
   - filter_list
   - rec_response
   - common_conf
   - user_track
   - grandson
   - discounts
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 1
    (2, TType.I32, 'total', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
    (4, TType.I32, 'page_size', None, None, ), # 4
    (5, TType.I32, 'page_index', None, None, ), # 5
    (6, TType.LIST, 'hotels_details', (TType.STRUCT,(gen.cm.ttypes.HotelDetail, gen.cm.ttypes.HotelDetail.thrift_spec)), None, ), # 6
    (7, TType.STRUCT, 'statistics', (gen.cm.ttypes.Statistics, gen.cm.ttypes.Statistics.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'query_parse_result', (gen.cm.ttypes.QueryParseResult, gen.cm.ttypes.QueryParseResult.thrift_spec), None, ), # 8
    (9, TType.I32, 'min_weifang_price', None, None, ), # 9
    (10, TType.LIST, 'promotion_group', (TType.STRUCT,(gen.cm.ttypes.PromotionGroup, gen.cm.ttypes.PromotionGroup.thrift_spec)), None, ), # 10
    None, # 11
    (12, TType.STRUCT, 'filter_result', (gen.cm.ttypes.FilterResult, gen.cm.ttypes.FilterResult.thrift_spec), None, ), # 12
    (13, TType.LIST, 'fast_filter_info', (TType.STRUCT,(FastFilterInfo, FastFilterInfo.thrift_spec)), None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.STRING, 'debug_info', None, None, ), # 21
    (22, TType.LIST, 'debug_response', (TType.STRUCT,(gen.cm.ttypes.DebugResponse, gen.cm.ttypes.DebugResponse.thrift_spec)), None, ), # 22
    (23, TType.LIST, 'filter_list', (TType.STRUCT,(gen.cm.ttypes.FilterList, gen.cm.ttypes.FilterList.thrift_spec)), None, ), # 23
    (24, TType.STRUCT, 'rec_response', (gen.cm.ttypes.Recommend, gen.cm.ttypes.Recommend.thrift_spec), None, ), # 24
    (25, TType.STRUCT, 'common_conf', (gen.cm.ttypes.CommonConf, gen.cm.ttypes.CommonConf.thrift_spec), None, ), # 25
    (26, TType.STRUCT, 'user_track', (gen.cm.ttypes.UserTrack, gen.cm.ttypes.UserTrack.thrift_spec), None, ), # 26
    (27, TType.I32, 'grandson', None, None, ), # 27
    (28, TType.LIST, 'discounts', (TType.DOUBLE,None), None, ), # 28
  )

  def __init__(self, status=None, total=None, count=None, page_size=None, page_index=None, hotels_details=None, statistics=None, query_parse_result=None, min_weifang_price=None, promotion_group=None, debug_info=None, filter_result=None, fast_filter_info=None, debug_response=None, filter_list=None, rec_response=None, common_conf=None, user_track=None, grandson=None, discounts=None,):
    self.status = status
    self.total = total
    self.count = count
    self.page_size = page_size
    self.page_index = page_index
    self.hotels_details = hotels_details
    self.statistics = statistics
    self.query_parse_result = query_parse_result
    self.min_weifang_price = min_weifang_price
    self.promotion_group = promotion_group
    self.debug_info = debug_info
    self.filter_result = filter_result
    self.fast_filter_info = fast_filter_info
    self.debug_response = debug_response
    self.filter_list = filter_list
    self.rec_response = rec_response
    self.common_conf = common_conf
    self.user_track = user_track
    self.grandson = grandson
    self.discounts = discounts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.page_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.hotels_details = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = gen.cm.ttypes.HotelDetail()
            _elem124.read(iprot)
            self.hotels_details.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.statistics = gen.cm.ttypes.Statistics()
          self.statistics.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.query_parse_result = gen.cm.ttypes.QueryParseResult()
          self.query_parse_result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.min_weifang_price = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.promotion_group = []
          (_etype128, _size125) = iprot.readListBegin()
          for _i129 in xrange(_size125):
            _elem130 = gen.cm.ttypes.PromotionGroup()
            _elem130.read(iprot)
            self.promotion_group.append(_elem130)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.debug_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.filter_result = gen.cm.ttypes.FilterResult()
          self.filter_result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.fast_filter_info = []
          (_etype134, _size131) = iprot.readListBegin()
          for _i135 in xrange(_size131):
            _elem136 = FastFilterInfo()
            _elem136.read(iprot)
            self.fast_filter_info.append(_elem136)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.debug_response = []
          (_etype140, _size137) = iprot.readListBegin()
          for _i141 in xrange(_size137):
            _elem142 = gen.cm.ttypes.DebugResponse()
            _elem142.read(iprot)
            self.debug_response.append(_elem142)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.filter_list = []
          (_etype146, _size143) = iprot.readListBegin()
          for _i147 in xrange(_size143):
            _elem148 = gen.cm.ttypes.FilterList()
            _elem148.read(iprot)
            self.filter_list.append(_elem148)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRUCT:
          self.rec_response = gen.cm.ttypes.Recommend()
          self.rec_response.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRUCT:
          self.common_conf = gen.cm.ttypes.CommonConf()
          self.common_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.user_track = gen.cm.ttypes.UserTrack()
          self.user_track.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.grandson = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.discounts = []
          (_etype152, _size149) = iprot.readListBegin()
          for _i153 in xrange(_size149):
            _elem154 = iprot.readDouble();
            self.discounts.append(_elem154)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InnerSearchResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 2)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 4)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    if self.page_index is not None:
      oprot.writeFieldBegin('page_index', TType.I32, 5)
      oprot.writeI32(self.page_index)
      oprot.writeFieldEnd()
    if self.hotels_details is not None:
      oprot.writeFieldBegin('hotels_details', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.hotels_details))
      for iter155 in self.hotels_details:
        iter155.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.statistics is not None:
      oprot.writeFieldBegin('statistics', TType.STRUCT, 7)
      self.statistics.write(oprot)
      oprot.writeFieldEnd()
    if self.query_parse_result is not None:
      oprot.writeFieldBegin('query_parse_result', TType.STRUCT, 8)
      self.query_parse_result.write(oprot)
      oprot.writeFieldEnd()
    if self.min_weifang_price is not None:
      oprot.writeFieldBegin('min_weifang_price', TType.I32, 9)
      oprot.writeI32(self.min_weifang_price)
      oprot.writeFieldEnd()
    if self.promotion_group is not None:
      oprot.writeFieldBegin('promotion_group', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group))
      for iter156 in self.promotion_group:
        iter156.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_result is not None:
      oprot.writeFieldBegin('filter_result', TType.STRUCT, 12)
      self.filter_result.write(oprot)
      oprot.writeFieldEnd()
    if self.fast_filter_info is not None:
      oprot.writeFieldBegin('fast_filter_info', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.fast_filter_info))
      for iter157 in self.fast_filter_info:
        iter157.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.debug_info is not None:
      oprot.writeFieldBegin('debug_info', TType.STRING, 21)
      oprot.writeString(self.debug_info)
      oprot.writeFieldEnd()
    if self.debug_response is not None:
      oprot.writeFieldBegin('debug_response', TType.LIST, 22)
      oprot.writeListBegin(TType.STRUCT, len(self.debug_response))
      for iter158 in self.debug_response:
        iter158.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_list is not None:
      oprot.writeFieldBegin('filter_list', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_list))
      for iter159 in self.filter_list:
        iter159.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rec_response is not None:
      oprot.writeFieldBegin('rec_response', TType.STRUCT, 24)
      self.rec_response.write(oprot)
      oprot.writeFieldEnd()
    if self.common_conf is not None:
      oprot.writeFieldBegin('common_conf', TType.STRUCT, 25)
      self.common_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.user_track is not None:
      oprot.writeFieldBegin('user_track', TType.STRUCT, 26)
      self.user_track.write(oprot)
      oprot.writeFieldEnd()
    if self.grandson is not None:
      oprot.writeFieldBegin('grandson', TType.I32, 27)
      oprot.writeI32(self.grandson)
      oprot.writeFieldEnd()
    if self.discounts is not None:
      oprot.writeFieldBegin('discounts', TType.LIST, 28)
      oprot.writeListBegin(TType.DOUBLE, len(self.discounts))
      for iter160 in self.discounts:
        oprot.writeDouble(iter160)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.page_size)
    value = (value * 31) ^ hash(self.page_index)
    value = (value * 31) ^ hash(self.hotels_details)
    value = (value * 31) ^ hash(self.statistics)
    value = (value * 31) ^ hash(self.query_parse_result)
    value = (value * 31) ^ hash(self.min_weifang_price)
    value = (value * 31) ^ hash(self.promotion_group)
    value = (value * 31) ^ hash(self.debug_info)
    value = (value * 31) ^ hash(self.filter_result)
    value = (value * 31) ^ hash(self.fast_filter_info)
    value = (value * 31) ^ hash(self.debug_response)
    value = (value * 31) ^ hash(self.filter_list)
    value = (value * 31) ^ hash(self.rec_response)
    value = (value * 31) ^ hash(self.common_conf)
    value = (value * 31) ^ hash(self.user_track)
    value = (value * 31) ^ hash(self.grandson)
    value = (value * 31) ^ hash(self.discounts)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterSearchRequest:
  """
  Attributes:
   - filter_search_type
   - geo_attr
   - caller_attr
   - filter_attr
   - user_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'filter_search_type', None, None, ), # 1
    (2, TType.STRUCT, 'geo_attr', (gen.cm.ttypes.GeoAttribute, gen.cm.ttypes.GeoAttribute.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'caller_attr', (gen.cm.ttypes.CallerAttribute, gen.cm.ttypes.CallerAttribute.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'filter_attr', (gen.cm.ttypes.FilterAttribute, gen.cm.ttypes.FilterAttribute.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'user_info', (gen.cm.ttypes.UserInfo, gen.cm.ttypes.UserInfo.thrift_spec), None, ), # 5
  )

  def __init__(self, filter_search_type=None, geo_attr=None, caller_attr=None, filter_attr=None, user_info=None,):
    self.filter_search_type = filter_search_type
    self.geo_attr = geo_attr
    self.caller_attr = caller_attr
    self.filter_attr = filter_attr
    self.user_info = user_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.filter_search_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.geo_attr = gen.cm.ttypes.GeoAttribute()
          self.geo_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.caller_attr = gen.cm.ttypes.CallerAttribute()
          self.caller_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.filter_attr = gen.cm.ttypes.FilterAttribute()
          self.filter_attr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.user_info = gen.cm.ttypes.UserInfo()
          self.user_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterSearchRequest')
    if self.filter_search_type is not None:
      oprot.writeFieldBegin('filter_search_type', TType.I32, 1)
      oprot.writeI32(self.filter_search_type)
      oprot.writeFieldEnd()
    if self.geo_attr is not None:
      oprot.writeFieldBegin('geo_attr', TType.STRUCT, 2)
      self.geo_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.caller_attr is not None:
      oprot.writeFieldBegin('caller_attr', TType.STRUCT, 3)
      self.caller_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_attr is not None:
      oprot.writeFieldBegin('filter_attr', TType.STRUCT, 4)
      self.filter_attr.write(oprot)
      oprot.writeFieldEnd()
    if self.user_info is not None:
      oprot.writeFieldBegin('user_info', TType.STRUCT, 5)
      self.user_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_search_type)
    value = (value * 31) ^ hash(self.geo_attr)
    value = (value * 31) ^ hash(self.caller_attr)
    value = (value * 31) ^ hash(self.filter_attr)
    value = (value * 31) ^ hash(self.user_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterSearchResponse:
  """
  Attributes:
   - status
   - filter_result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'status', (gen.cm.ttypes.ServerStatus, gen.cm.ttypes.ServerStatus.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'filter_result', (gen.cm.ttypes.FilterResult, gen.cm.ttypes.FilterResult.thrift_spec), None, ), # 2
  )

  def __init__(self, status=None, filter_result=None,):
    self.status = status
    self.filter_result = filter_result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.status = gen.cm.ttypes.ServerStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.filter_result = gen.cm.ttypes.FilterResult()
          self.filter_result.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterSearchResponse')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 1)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_result is not None:
      oprot.writeFieldBegin('filter_result', TType.STRUCT, 2)
      self.filter_result.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.filter_result)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearByInfoRequest:
  """
  Attributes:
   - nearbyitem_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nearbyitem_list', (TType.STRUCT,(gen.cm.ttypes.NearBySearchInfo, gen.cm.ttypes.NearBySearchInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, nearbyitem_list=None,):
    self.nearbyitem_list = nearbyitem_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nearbyitem_list = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = gen.cm.ttypes.NearBySearchInfo()
            _elem166.read(iprot)
            self.nearbyitem_list.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearByInfoRequest')
    if self.nearbyitem_list is not None:
      oprot.writeFieldBegin('nearbyitem_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nearbyitem_list))
      for iter167 in self.nearbyitem_list:
        iter167.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nearbyitem_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearByInfoResponse:
  """
  Attributes:
   - nearbyitem_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nearbyitem_list', (TType.STRUCT,(gen.cm.ttypes.NearBySearchResult, gen.cm.ttypes.NearBySearchResult.thrift_spec)), None, ), # 1
  )

  def __init__(self, nearbyitem_list=None,):
    self.nearbyitem_list = nearbyitem_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nearbyitem_list = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = gen.cm.ttypes.NearBySearchResult()
            _elem173.read(iprot)
            self.nearbyitem_list.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearByInfoResponse')
    if self.nearbyitem_list is not None:
      oprot.writeFieldBegin('nearbyitem_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nearbyitem_list))
      for iter174 in self.nearbyitem_list:
        iter174.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nearbyitem_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PersonalTraitRequest:
  """
  Attributes:
   - personal_info
   - trait_type
   - strategy_mode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'personal_info', (gen.cm.ttypes.PersonalInfo, gen.cm.ttypes.PersonalInfo.thrift_spec), None, ), # 1
    (2, TType.I32, 'trait_type', None, None, ), # 2
    (3, TType.I32, 'strategy_mode', None, None, ), # 3
  )

  def __init__(self, personal_info=None, trait_type=None, strategy_mode=None,):
    self.personal_info = personal_info
    self.trait_type = trait_type
    self.strategy_mode = strategy_mode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.personal_info = gen.cm.ttypes.PersonalInfo()
          self.personal_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.trait_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.strategy_mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PersonalTraitRequest')
    if self.personal_info is not None:
      oprot.writeFieldBegin('personal_info', TType.STRUCT, 1)
      self.personal_info.write(oprot)
      oprot.writeFieldEnd()
    if self.trait_type is not None:
      oprot.writeFieldBegin('trait_type', TType.I32, 2)
      oprot.writeI32(self.trait_type)
      oprot.writeFieldEnd()
    if self.strategy_mode is not None:
      oprot.writeFieldBegin('strategy_mode', TType.I32, 3)
      oprot.writeI32(self.strategy_mode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.personal_info)
    value = (value * 31) ^ hash(self.trait_type)
    value = (value * 31) ^ hash(self.strategy_mode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PersonalTraitResponse:
  """
  Attributes:
   - personaltrait_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'personaltrait_list', (TType.STRUCT,(gen.cm.ttypes.PersonalTraitResult, gen.cm.ttypes.PersonalTraitResult.thrift_spec)), None, ), # 1
  )

  def __init__(self, personaltrait_list=None,):
    self.personaltrait_list = personaltrait_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.personaltrait_list = []
          (_etype178, _size175) = iprot.readListBegin()
          for _i179 in xrange(_size175):
            _elem180 = gen.cm.ttypes.PersonalTraitResult()
            _elem180.read(iprot)
            self.personaltrait_list.append(_elem180)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PersonalTraitResponse')
    if self.personaltrait_list is not None:
      oprot.writeFieldBegin('personaltrait_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.personaltrait_list))
      for iter181 in self.personaltrait_list:
        iter181.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.personaltrait_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
