#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class LangType:
  LANG_CN = 0
  LANG_EN = 1

  _VALUES_TO_NAMES = {
    0: "LANG_CN",
    1: "LANG_EN",
  }

  _NAMES_TO_VALUES = {
    "LANG_CN": 0,
    "LANG_EN": 1,
  }

class FilterRegionType:
  DOWNTOWN = 0
  ADMIN_AREA = 1

  _VALUES_TO_NAMES = {
    0: "DOWNTOWN",
    1: "ADMIN_AREA",
  }

  _NAMES_TO_VALUES = {
    "DOWNTOWN": 0,
    "ADMIN_AREA": 1,
  }

class BookingStatus:
  BOOKING_FAIL = 0
  BOOKING_SUCC = 3

  _VALUES_TO_NAMES = {
    0: "BOOKING_FAIL",
    3: "BOOKING_SUCC",
  }

  _NAMES_TO_VALUES = {
    "BOOKING_FAIL": 0,
    "BOOKING_SUCC": 3,
  }

class PromotionType:
  SCORECARD = 0
  CASHBACK = 1
  GIFTCARD = 2
  DISCOUNT = 3
  PROMOTION_UNKNONW = 9

  _VALUES_TO_NAMES = {
    0: "SCORECARD",
    1: "CASHBACK",
    2: "GIFTCARD",
    3: "DISCOUNT",
    9: "PROMOTION_UNKNONW",
  }

  _NAMES_TO_VALUES = {
    "SCORECARD": 0,
    "CASHBACK": 1,
    "GIFTCARD": 2,
    "DISCOUNT": 3,
    "PROMOTION_UNKNONW": 9,
  }

class POIType:
  AIR = 0
  METRO = 1
  BUS = 2
  SIGHT = 3

  _VALUES_TO_NAMES = {
    0: "AIR",
    1: "METRO",
    2: "BUS",
    3: "SIGHT",
  }

  _NAMES_TO_VALUES = {
    "AIR": 0,
    "METRO": 1,
    "BUS": 2,
    "SIGHT": 3,
  }

class RankType:
  DEFAULT = 0
  PRICEASC = 1
  PRICEDESC = 2
  STARASC = 3
  STARDESC = 4
  SCOREDESC = 5
  DISTANCEASC = 6
  UNKONWN = 7

  _VALUES_TO_NAMES = {
    0: "DEFAULT",
    1: "PRICEASC",
    2: "PRICEDESC",
    3: "STARASC",
    4: "STARDESC",
    5: "SCOREDESC",
    6: "DISTANCEASC",
    7: "UNKONWN",
  }

  _NAMES_TO_VALUES = {
    "DEFAULT": 0,
    "PRICEASC": 1,
    "PRICEDESC": 2,
    "STARASC": 3,
    "STARDESC": 4,
    "SCOREDESC": 5,
    "DISTANCEASC": 6,
    "UNKONWN": 7,
  }

class HotelStarType:
  NOLIMITED = 0
  STAR1 = 1
  STAR2 = 2
  STAR3 = 3
  STAR4 = 4
  STAR5 = 5

  _VALUES_TO_NAMES = {
    0: "NOLIMITED",
    1: "STAR1",
    2: "STAR2",
    3: "STAR3",
    4: "STAR4",
    5: "STAR5",
  }

  _NAMES_TO_VALUES = {
    "NOLIMITED": 0,
    "STAR1": 1,
    "STAR2": 2,
    "STAR3": 3,
    "STAR4": 4,
    "STAR5": 5,
  }

class CrawStatus:
  NORMAL = 0
  CRAWLING = 1
  CRAW_SUCC = 2
  CRAW_FAILED = 3
  PA_FAILED = 4
  TIMEOUT = 5
  TOOBUSY = 6

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "CRAWLING",
    2: "CRAW_SUCC",
    3: "CRAW_FAILED",
    4: "PA_FAILED",
    5: "TIMEOUT",
    6: "TOOBUSY",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "CRAWLING": 1,
    "CRAW_SUCC": 2,
    "CRAW_FAILED": 3,
    "PA_FAILED": 4,
    "TIMEOUT": 5,
    "TOOBUSY": 6,
  }

class StatusCode:
  SUCCESS = 0
  PARAMETER_ERR = 1
  INTERNEL_ERR = 2

  _VALUES_TO_NAMES = {
    0: "SUCCESS",
    1: "PARAMETER_ERR",
    2: "INTERNEL_ERR",
  }

  _NAMES_TO_VALUES = {
    "SUCCESS": 0,
    "PARAMETER_ERR": 1,
    "INTERNEL_ERR": 2,
  }

class FuzzySearchType:
  kUndefined = 0
  kTitle = 1
  kGeo = 2

  _VALUES_TO_NAMES = {
    0: "kUndefined",
    1: "kTitle",
    2: "kGeo",
  }

  _NAMES_TO_VALUES = {
    "kUndefined": 0,
    "kTitle": 1,
    "kGeo": 2,
  }

class BedLargeType:
  kBedLargeTypeAll = 0
  kSingeBed = 1
  kDoubleBed = 2

  _VALUES_TO_NAMES = {
    0: "kBedLargeTypeAll",
    1: "kSingeBed",
    2: "kDoubleBed",
  }

  _NAMES_TO_VALUES = {
    "kBedLargeTypeAll": 0,
    "kSingeBed": 1,
    "kDoubleBed": 2,
  }

class PaymentMethods:
  kAllPaymentMethods = 0
  kThePackage = 1
  kCollectionAndPayment = 2

  _VALUES_TO_NAMES = {
    0: "kAllPaymentMethods",
    1: "kThePackage",
    2: "kCollectionAndPayment",
  }

  _NAMES_TO_VALUES = {
    "kAllPaymentMethods": 0,
    "kThePackage": 1,
    "kCollectionAndPayment": 2,
  }

class PriceType:
  kAllPriceType = 0
  kUnified = 1
  kWith = 2
  kForeign = 3
  kSpecialDistrict = 4
  kJappan = 5

  _VALUES_TO_NAMES = {
    0: "kAllPriceType",
    1: "kUnified",
    2: "kWith",
    3: "kForeign",
    4: "kSpecialDistrict",
    5: "kJappan",
  }

  _NAMES_TO_VALUES = {
    "kAllPriceType": 0,
    "kUnified": 1,
    "kWith": 2,
    "kForeign": 3,
    "kSpecialDistrict": 4,
    "kJappan": 5,
  }

class DistrictType:
  kBussiness = 1
  kAdministration = 2
  kTrafficHub = 3
  kSubway = 4
  kScenicArea = 5

  _VALUES_TO_NAMES = {
    1: "kBussiness",
    2: "kAdministration",
    3: "kTrafficHub",
    4: "kSubway",
    5: "kScenicArea",
  }

  _NAMES_TO_VALUES = {
    "kBussiness": 1,
    "kAdministration": 2,
    "kTrafficHub": 3,
    "kSubway": 4,
    "kScenicArea": 5,
  }

class GeoType:
  kNull = 0
  kNearBy = 1
  kBound = 2
  kMulPoi = 3

  _VALUES_TO_NAMES = {
    0: "kNull",
    1: "kNearBy",
    2: "kBound",
    3: "kMulPoi",
  }

  _NAMES_TO_VALUES = {
    "kNull": 0,
    "kNearBy": 1,
    "kBound": 2,
    "kMulPoi": 3,
  }

class BookingChannel:
  kAllBookingChannel = 0
  kOnline = 1
  kOffline = 2
  kScoreSquare = 3
  kPhone = 4
  kSupply = 5

  _VALUES_TO_NAMES = {
    0: "kAllBookingChannel",
    1: "kOnline",
    2: "kOffline",
    3: "kScoreSquare",
    4: "kPhone",
    5: "kSupply",
  }

  _NAMES_TO_VALUES = {
    "kAllBookingChannel": 0,
    "kOnline": 1,
    "kOffline": 2,
    "kScoreSquare": 3,
    "kPhone": 4,
    "kSupply": 5,
  }

class SellChannel:
  kAllSellChannel = 0
  kA = 1
  kB = 2
  kC = 3
  kD = 4
  kE = 5
  kF = 6
  kG = 7
  kH = 8
  kI = 9
  kJ = 10

  _VALUES_TO_NAMES = {
    0: "kAllSellChannel",
    1: "kA",
    2: "kB",
    3: "kC",
    4: "kD",
    5: "kE",
    6: "kF",
    7: "kG",
    8: "kH",
    9: "kI",
    10: "kJ",
  }

  _NAMES_TO_VALUES = {
    "kAllSellChannel": 0,
    "kA": 1,
    "kB": 2,
    "kC": 3,
    "kD": 4,
    "kE": 5,
    "kF": 6,
    "kG": 7,
    "kH": 8,
    "kI": 9,
    "kJ": 10,
  }

class MemberLevel:
  kAllMemberLevel = 0
  kCommon = 1
  kVip = 2
  kLong = 3
  kMuser = 4

  _VALUES_TO_NAMES = {
    0: "kAllMemberLevel",
    1: "kCommon",
    2: "kVip",
    3: "kLong",
    4: "kMuser",
  }

  _NAMES_TO_VALUES = {
    "kAllMemberLevel": 0,
    "kCommon": 1,
    "kVip": 2,
    "kLong": 3,
    "kMuser": 4,
  }

class ProductType:
  kAllProductType = 0
  kSalesAlone = 1
  kInternational = 2
  kTimeRush = 3
  kSalesPackage = 4
  kPartOfHousing = 5
  kImplicitPrice = 6
  kGroupPurchase = 7
  kHotelPrice = 8
  kNearyByPrice = 9
  kNineYuan = 10

  _VALUES_TO_NAMES = {
    0: "kAllProductType",
    1: "kSalesAlone",
    2: "kInternational",
    3: "kTimeRush",
    4: "kSalesPackage",
    5: "kPartOfHousing",
    6: "kImplicitPrice",
    7: "kGroupPurchase",
    8: "kHotelPrice",
    9: "kNearyByPrice",
    10: "kNineYuan",
  }

  _NAMES_TO_VALUES = {
    "kAllProductType": 0,
    "kSalesAlone": 1,
    "kInternational": 2,
    "kTimeRush": 3,
    "kSalesPackage": 4,
    "kPartOfHousing": 5,
    "kImplicitPrice": 6,
    "kGroupPurchase": 7,
    "kHotelPrice": 8,
    "kNearyByPrice": 9,
    "kNineYuan": 10,
  }

class SortingMethod:
  kDefault = 0
  kPrice = 1
  kDistance = 2
  kWordOfMouth = 3
  kStarRate = 4
  kSalesVolume = 5
  kFromMe = 7

  _VALUES_TO_NAMES = {
    0: "kDefault",
    1: "kPrice",
    2: "kDistance",
    3: "kWordOfMouth",
    4: "kStarRate",
    5: "kSalesVolume",
    7: "kFromMe",
  }

  _NAMES_TO_VALUES = {
    "kDefault": 0,
    "kPrice": 1,
    "kDistance": 2,
    "kWordOfMouth": 3,
    "kStarRate": 4,
    "kSalesVolume": 5,
    "kFromMe": 7,
  }

class SortingDirection:
  kAsc = 1
  kDesc = 2

  _VALUES_TO_NAMES = {
    1: "kAsc",
    2: "kDesc",
  }

  _NAMES_TO_VALUES = {
    "kAsc": 1,
    "kDesc": 2,
  }

class SortItem:
  kWeiFang = 1
  kLongCui = 2
  kClose = 3
  kSigned = 4
  kBooking = 5
  kSubCity = 6
  kNearByProduct = 7
  kThemes = 8
  kStars = 9
  kUserCollection = 10
  kOrange = 11
  kAllBuyRoom = 12
  kUserPrice = 13
  kBrands = 14

  _VALUES_TO_NAMES = {
    1: "kWeiFang",
    2: "kLongCui",
    3: "kClose",
    4: "kSigned",
    5: "kBooking",
    6: "kSubCity",
    7: "kNearByProduct",
    8: "kThemes",
    9: "kStars",
    10: "kUserCollection",
    11: "kOrange",
    12: "kAllBuyRoom",
    13: "kUserPrice",
    14: "kBrands",
  }

  _NAMES_TO_VALUES = {
    "kWeiFang": 1,
    "kLongCui": 2,
    "kClose": 3,
    "kSigned": 4,
    "kBooking": 5,
    "kSubCity": 6,
    "kNearByProduct": 7,
    "kThemes": 8,
    "kStars": 9,
    "kUserCollection": 10,
    "kOrange": 11,
    "kAllBuyRoom": 12,
    "kUserPrice": 13,
    "kBrands": 14,
  }

class BookingMenu:
  kGeneralMenu = 1
  kHourRoomMenu = 2
  kGroupBuyMenu = 3

  _VALUES_TO_NAMES = {
    1: "kGeneralMenu",
    2: "kHourRoomMenu",
    3: "kGroupBuyMenu",
  }

  _NAMES_TO_VALUES = {
    "kGeneralMenu": 1,
    "kHourRoomMenu": 2,
    "kGroupBuyMenu": 3,
  }

class SortItemPolicy:
  kPriority = 1
  kDelay = 2

  _VALUES_TO_NAMES = {
    1: "kPriority",
    2: "kDelay",
  }

  _NAMES_TO_VALUES = {
    "kPriority": 1,
    "kDelay": 2,
  }

class PTPromotionType:
  kCoupon = 1
  kPoint = 2
  kDiscount = 3
  kGift = 4
  kReturnMoney = 5
  kS1 = 6
  kS2 = 7
  kImmediateDiscount = 9
  kHongBao = 10
  kHongBaoPrepay = 11
  kBuy5Send1 = 12
  kCashAccount = 9999

  _VALUES_TO_NAMES = {
    1: "kCoupon",
    2: "kPoint",
    3: "kDiscount",
    4: "kGift",
    5: "kReturnMoney",
    6: "kS1",
    7: "kS2",
    9: "kImmediateDiscount",
    10: "kHongBao",
    11: "kHongBaoPrepay",
    12: "kBuy5Send1",
    9999: "kCashAccount",
  }

  _NAMES_TO_VALUES = {
    "kCoupon": 1,
    "kPoint": 2,
    "kDiscount": 3,
    "kGift": 4,
    "kReturnMoney": 5,
    "kS1": 6,
    "kS2": 7,
    "kImmediateDiscount": 9,
    "kHongBao": 10,
    "kHongBaoPrepay": 11,
    "kBuy5Send1": 12,
    "kCashAccount": 9999,
  }

class DateType:
  kBookingDate = 1
  kCheckinDate = 2
  kAtRoomDate = 3

  _VALUES_TO_NAMES = {
    1: "kBookingDate",
    2: "kCheckinDate",
    3: "kAtRoomDate",
  }

  _NAMES_TO_VALUES = {
    "kBookingDate": 1,
    "kCheckinDate": 2,
    "kAtRoomDate": 3,
  }

class SHotelGiftWayOfGiving:
  kEveryRoom = 1
  kEveryRoomPerDay = 2
  kOther = 3

  _VALUES_TO_NAMES = {
    1: "kEveryRoom",
    2: "kEveryRoomPerDay",
    3: "kOther",
  }

  _NAMES_TO_VALUES = {
    "kEveryRoom": 1,
    "kEveryRoomPerDay": 2,
    "kOther": 3,
  }

class HotelGiftHourType:
  kHours24 = 0
  kXHourBefore = 1
  kXHourAfter = 2

  _VALUES_TO_NAMES = {
    0: "kHours24",
    1: "kXHourBefore",
    2: "kXHourAfter",
  }

  _NAMES_TO_VALUES = {
    "kHours24": 0,
    "kXHourBefore": 1,
    "kXHourAfter": 2,
  }

class HotelBookingRuleType:
  kNoneRule = 1
  kNeedNationality = 2
  kPerRoomPerName = 3
  kForeignerNeedEnName = 4
  kRejectCheckinTime = 5
  kNeedPhoneNo = 6

  _VALUES_TO_NAMES = {
    1: "kNoneRule",
    2: "kNeedNationality",
    3: "kPerRoomPerName",
    4: "kForeignerNeedEnName",
    5: "kRejectCheckinTime",
    6: "kNeedPhoneNo",
  }

  _NAMES_TO_VALUES = {
    "kNoneRule": 1,
    "kNeedNationality": 2,
    "kPerRoomPerName": 3,
    "kForeignerNeedEnName": 4,
    "kRejectCheckinTime": 5,
    "kNeedPhoneNo": 6,
  }

class VouchWay:
  kCreditCard = 1

  _VALUES_TO_NAMES = {
    1: "kCreditCard",
  }

  _NAMES_TO_VALUES = {
    "kCreditCard": 1,
  }

class VouchMoneyType:
  kFirstNightCost = 1
  kFullNightCost = 2

  _VALUES_TO_NAMES = {
    1: "kFirstNightCost",
    2: "kFullNightCost",
  }

  _NAMES_TO_VALUES = {
    "kFirstNightCost": 1,
    "kFullNightCost": 2,
  }

class VouchRuleType:
  kVouchNoChange = 1
  kVouchNeedSomeDay = 2
  kVouchNeedCheckinTime = 3
  kVouchNeedCheckin24hour = 4

  _VALUES_TO_NAMES = {
    1: "kVouchNoChange",
    2: "kVouchNeedSomeDay",
    3: "kVouchNeedCheckinTime",
    4: "kVouchNeedCheckin24hour",
  }

  _NAMES_TO_VALUES = {
    "kVouchNoChange": 1,
    "kVouchNeedSomeDay": 2,
    "kVouchNeedCheckinTime": 3,
    "kVouchNeedCheckin24hour": 4,
  }

class RuleTargetType:
  kHotel = 1
  kCustomer = 2

  _VALUES_TO_NAMES = {
    1: "kHotel",
    2: "kCustomer",
  }

  _NAMES_TO_VALUES = {
    "kHotel": 1,
    "kCustomer": 2,
  }

class PrePayRuleType:
  kPrepayNoChange = 1
  kPrepayNeedSomeDay = 2
  kPrepayNeedOneTime = 3

  _VALUES_TO_NAMES = {
    1: "kPrepayNoChange",
    2: "kPrepayNeedSomeDay",
    3: "kPrepayNeedOneTime",
  }

  _NAMES_TO_VALUES = {
    "kPrepayNoChange": 1,
    "kPrepayNeedSomeDay": 2,
    "kPrepayNeedOneTime": 3,
  }

class CutType:
  kMoney = 1
  kPercent = 2
  kFirstNight = 3

  _VALUES_TO_NAMES = {
    1: "kMoney",
    2: "kPercent",
    3: "kFirstNight",
  }

  _NAMES_TO_VALUES = {
    "kMoney": 1,
    "kPercent": 2,
    "kFirstNight": 3,
  }

class ActionType:
  kSend = 0
  kUse = 1

  _VALUES_TO_NAMES = {
    0: "kSend",
    1: "kUse",
  }

  _NAMES_TO_VALUES = {
    "kSend": 0,
    "kUse": 1,
  }

class ProExclusiveType:
  kInclusive = 0
  kExclusive = 1

  _VALUES_TO_NAMES = {
    0: "kInclusive",
    1: "kExclusive",
  }

  _NAMES_TO_VALUES = {
    "kInclusive": 0,
    "kExclusive": 1,
  }

class InventoryStatus:
  kEveryDayHasInv = 1
  kPartialHasInv = 2
  kNoneInv = 3

  _VALUES_TO_NAMES = {
    1: "kEveryDayHasInv",
    2: "kPartialHasInv",
    3: "kNoneInv",
  }

  _NAMES_TO_VALUES = {
    "kEveryDayHasInv": 1,
    "kPartialHasInv": 2,
    "kNoneInv": 3,
  }

class PriceStatus:
  kEveryDayHasPrice = 1
  kPartialHasPrice = 2
  kNonePrice = 3

  _VALUES_TO_NAMES = {
    1: "kEveryDayHasPrice",
    2: "kPartialHasPrice",
    3: "kNonePrice",
  }

  _NAMES_TO_VALUES = {
    "kEveryDayHasPrice": 1,
    "kPartialHasPrice": 2,
    "kNonePrice": 3,
  }

class ReturnCode:
  kSuccess = 0
  kRequestIsNULL = 1
  kBeginSearchFailed = 2
  kEndSearchFailed = 3
  kCheckinSmallerBookingAndCheckoutNotLargerCheckin = 4
  kCheckinSmallerBooking = 5
  kCheckoutNotLargerCheckin = 6
  kCheckinIndexTooSmallOrTooLarger = 7
  kCheckoutIndexTooSmallOrTooLarger = 8

  _VALUES_TO_NAMES = {
    0: "kSuccess",
    1: "kRequestIsNULL",
    2: "kBeginSearchFailed",
    3: "kEndSearchFailed",
    4: "kCheckinSmallerBookingAndCheckoutNotLargerCheckin",
    5: "kCheckinSmallerBooking",
    6: "kCheckoutNotLargerCheckin",
    7: "kCheckinIndexTooSmallOrTooLarger",
    8: "kCheckoutIndexTooSmallOrTooLarger",
  }

  _NAMES_TO_VALUES = {
    "kSuccess": 0,
    "kRequestIsNULL": 1,
    "kBeginSearchFailed": 2,
    "kEndSearchFailed": 3,
    "kCheckinSmallerBookingAndCheckoutNotLargerCheckin": 4,
    "kCheckinSmallerBooking": 5,
    "kCheckoutNotLargerCheckin": 6,
    "kCheckinIndexTooSmallOrTooLarger": 7,
    "kCheckoutIndexTooSmallOrTooLarger": 8,
  }

class ERoomAdditionsType:
  kBedType = 1
  kFloorType = 2
  kInternetService = 3
  kInternetServiceType = 4
  kWindowType = 5
  kSmokingRoom = 6
  kBedNumbers = 7
  kPersonNumber = 8
  kBathroom = 9
  kFaceDirection = 10
  kScene = 11
  kOtherservice = 12
  kOpaqueHotel = 13
  kLobbyAndBedRoom = 14

  _VALUES_TO_NAMES = {
    1: "kBedType",
    2: "kFloorType",
    3: "kInternetService",
    4: "kInternetServiceType",
    5: "kWindowType",
    6: "kSmokingRoom",
    7: "kBedNumbers",
    8: "kPersonNumber",
    9: "kBathroom",
    10: "kFaceDirection",
    11: "kScene",
    12: "kOtherservice",
    13: "kOpaqueHotel",
    14: "kLobbyAndBedRoom",
  }

  _NAMES_TO_VALUES = {
    "kBedType": 1,
    "kFloorType": 2,
    "kInternetService": 3,
    "kInternetServiceType": 4,
    "kWindowType": 5,
    "kSmokingRoom": 6,
    "kBedNumbers": 7,
    "kPersonNumber": 8,
    "kBathroom": 9,
    "kFaceDirection": 10,
    "kScene": 11,
    "kOtherservice": 12,
    "kOpaqueHotel": 13,
    "kLobbyAndBedRoom": 14,
  }

class ParseItemType:
  kPoi = 1
  kRegion = 2
  kTitle = 3
  kBrand = 4
  kBigPoi = 5
  kStar = 6
  kFacility = 7
  kTheme = 8
  kHotelName = 9

  _VALUES_TO_NAMES = {
    1: "kPoi",
    2: "kRegion",
    3: "kTitle",
    4: "kBrand",
    5: "kBigPoi",
    6: "kStar",
    7: "kFacility",
    8: "kTheme",
    9: "kHotelName",
  }

  _NAMES_TO_VALUES = {
    "kPoi": 1,
    "kRegion": 2,
    "kTitle": 3,
    "kBrand": 4,
    "kBigPoi": 5,
    "kStar": 6,
    "kFacility": 7,
    "kTheme": 8,
    "kHotelName": 9,
  }

class FPoiType:
  SKI_PARK = 0
  SPRING = 1
  ZBY = 2
  COLLEGE = 3
  STATION = 4
  SUBPOI = 5

  _VALUES_TO_NAMES = {
    0: "SKI_PARK",
    1: "SPRING",
    2: "ZBY",
    3: "COLLEGE",
    4: "STATION",
    5: "SUBPOI",
  }

  _NAMES_TO_VALUES = {
    "SKI_PARK": 0,
    "SPRING": 1,
    "ZBY": 2,
    "COLLEGE": 3,
    "STATION": 4,
    "SUBPOI": 5,
  }

class BigPoiType:
  SUBWAY = 0

  _VALUES_TO_NAMES = {
    0: "SUBWAY",
  }

  _NAMES_TO_VALUES = {
    "SUBWAY": 0,
  }

class FILTYPE:
  F_STAR = 0
  F_BRAND = 1
  F_RENSHU = 2
  F_FACILITY = 3
  F_THEME = 4

  _VALUES_TO_NAMES = {
    0: "F_STAR",
    1: "F_BRAND",
    2: "F_RENSHU",
    3: "F_FACILITY",
    4: "F_THEME",
  }

  _NAMES_TO_VALUES = {
    "F_STAR": 0,
    "F_BRAND": 1,
    "F_RENSHU": 2,
    "F_FACILITY": 3,
    "F_THEME": 4,
  }

class PAYTYPE:
  PREPAY = 0
  NOVOUNCH = 1

  _VALUES_TO_NAMES = {
    0: "PREPAY",
    1: "NOVOUNCH",
  }

  _NAMES_TO_VALUES = {
    "PREPAY": 0,
    "NOVOUNCH": 1,
  }

class FPROMOTIONTYPE:
  COUPON = 0
  FLASH_SALE = 1

  _VALUES_TO_NAMES = {
    0: "COUPON",
    1: "FLASH_SALE",
  }

  _NAMES_TO_VALUES = {
    "COUPON": 0,
    "FLASH_SALE": 1,
  }


class CancelPolicy:
  """
  Attributes:
   - id
   - cancel_policy_cn
   - cancel_policy_en
   - other_info_cn
   - other_info_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'id', None, None, ), # 1
    (2, TType.STRING, 'cancel_policy_cn', None, None, ), # 2
    (3, TType.STRING, 'cancel_policy_en', None, None, ), # 3
    (4, TType.STRING, 'other_info_cn', None, None, ), # 4
    (5, TType.STRING, 'other_info_en', None, None, ), # 5
  )

  def __init__(self, id=None, cancel_policy_cn=None, cancel_policy_en=None, other_info_cn=None, other_info_en=None,):
    self.id = id
    self.cancel_policy_cn = cancel_policy_cn
    self.cancel_policy_en = cancel_policy_en
    self.other_info_cn = other_info_cn
    self.other_info_en = other_info_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.id = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cancel_policy_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cancel_policy_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.other_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.other_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancelPolicy')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I16, 1)
      oprot.writeI16(self.id)
      oprot.writeFieldEnd()
    if self.cancel_policy_cn is not None:
      oprot.writeFieldBegin('cancel_policy_cn', TType.STRING, 2)
      oprot.writeString(self.cancel_policy_cn)
      oprot.writeFieldEnd()
    if self.cancel_policy_en is not None:
      oprot.writeFieldBegin('cancel_policy_en', TType.STRING, 3)
      oprot.writeString(self.cancel_policy_en)
      oprot.writeFieldEnd()
    if self.other_info_cn is not None:
      oprot.writeFieldBegin('other_info_cn', TType.STRING, 4)
      oprot.writeString(self.other_info_cn)
      oprot.writeFieldEnd()
    if self.other_info_en is not None:
      oprot.writeFieldBegin('other_info_en', TType.STRING, 5)
      oprot.writeString(self.other_info_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.cancel_policy_cn)
    value = (value * 31) ^ hash(self.cancel_policy_en)
    value = (value * 31) ^ hash(self.other_info_cn)
    value = (value * 31) ^ hash(self.other_info_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceDay:
  """
  Attributes:
   - date
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.DOUBLE, 'price', None, None, ), # 2
  )

  def __init__(self, date=None, price=None,):
    self.date = date
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceDay')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatePlan:
  """
  Attributes:
   - rp_id
   - rp_name
   - promotion_type
   - price_breaks
   - breakfast_info_cn
   - breakfast_info_en
   - internet_cn
   - internet_en
   - cancel_policy
   - price_detail
   - arrive_start_time
   - arrive_end_time
   - room_inventory
   - max_person
   - bed_type_cn
   - bed_type_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rp_id', None, None, ), # 1
    (2, TType.STRING, 'rp_name', None, None, ), # 2
    (3, TType.I32, 'promotion_type', None, None, ), # 3
    (4, TType.I32, 'price_breaks', None, None, ), # 4
    None, # 5
    None, # 6
    (7, TType.STRING, 'breakfast_info_cn', None, None, ), # 7
    (8, TType.STRING, 'breakfast_info_en', None, None, ), # 8
    (9, TType.STRING, 'internet_cn', None, None, ), # 9
    (10, TType.STRING, 'internet_en', None, None, ), # 10
    (11, TType.STRUCT, 'cancel_policy', (CancelPolicy, CancelPolicy.thrift_spec), None, ), # 11
    (12, TType.LIST, 'price_detail', (TType.STRUCT,(PriceDay, PriceDay.thrift_spec)), None, ), # 12
    (13, TType.STRING, 'arrive_start_time', None, None, ), # 13
    (14, TType.STRING, 'arrive_end_time', None, None, ), # 14
    (15, TType.I32, 'room_inventory', None, None, ), # 15
    (16, TType.I32, 'max_person', None, None, ), # 16
    (17, TType.STRING, 'bed_type_cn', None, None, ), # 17
    (18, TType.STRING, 'bed_type_en', None, None, ), # 18
  )

  def __init__(self, rp_id=None, rp_name=None, promotion_type=None, price_breaks=None, breakfast_info_cn=None, breakfast_info_en=None, internet_cn=None, internet_en=None, cancel_policy=None, price_detail=None, arrive_start_time=None, arrive_end_time=None, room_inventory=None, max_person=None, bed_type_cn=None, bed_type_en=None,):
    self.rp_id = rp_id
    self.rp_name = rp_name
    self.promotion_type = promotion_type
    self.price_breaks = price_breaks
    self.breakfast_info_cn = breakfast_info_cn
    self.breakfast_info_en = breakfast_info_en
    self.internet_cn = internet_cn
    self.internet_en = internet_en
    self.cancel_policy = cancel_policy
    self.price_detail = price_detail
    self.arrive_start_time = arrive_start_time
    self.arrive_end_time = arrive_end_time
    self.room_inventory = room_inventory
    self.max_person = max_person
    self.bed_type_cn = bed_type_cn
    self.bed_type_en = bed_type_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.rp_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.price_breaks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.breakfast_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.breakfast_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.internet_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.internet_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.cancel_policy = CancelPolicy()
          self.cancel_policy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.price_detail = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = PriceDay()
            _elem5.read(iprot)
            self.price_detail.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.arrive_start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.arrive_end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.room_inventory = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.max_person = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.bed_type_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.bed_type_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatePlan')
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 1)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.rp_name is not None:
      oprot.writeFieldBegin('rp_name', TType.STRING, 2)
      oprot.writeString(self.rp_name)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 3)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.price_breaks is not None:
      oprot.writeFieldBegin('price_breaks', TType.I32, 4)
      oprot.writeI32(self.price_breaks)
      oprot.writeFieldEnd()
    if self.breakfast_info_cn is not None:
      oprot.writeFieldBegin('breakfast_info_cn', TType.STRING, 7)
      oprot.writeString(self.breakfast_info_cn)
      oprot.writeFieldEnd()
    if self.breakfast_info_en is not None:
      oprot.writeFieldBegin('breakfast_info_en', TType.STRING, 8)
      oprot.writeString(self.breakfast_info_en)
      oprot.writeFieldEnd()
    if self.internet_cn is not None:
      oprot.writeFieldBegin('internet_cn', TType.STRING, 9)
      oprot.writeString(self.internet_cn)
      oprot.writeFieldEnd()
    if self.internet_en is not None:
      oprot.writeFieldBegin('internet_en', TType.STRING, 10)
      oprot.writeString(self.internet_en)
      oprot.writeFieldEnd()
    if self.cancel_policy is not None:
      oprot.writeFieldBegin('cancel_policy', TType.STRUCT, 11)
      self.cancel_policy.write(oprot)
      oprot.writeFieldEnd()
    if self.price_detail is not None:
      oprot.writeFieldBegin('price_detail', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.price_detail))
      for iter6 in self.price_detail:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.arrive_start_time is not None:
      oprot.writeFieldBegin('arrive_start_time', TType.STRING, 13)
      oprot.writeString(self.arrive_start_time)
      oprot.writeFieldEnd()
    if self.arrive_end_time is not None:
      oprot.writeFieldBegin('arrive_end_time', TType.STRING, 14)
      oprot.writeString(self.arrive_end_time)
      oprot.writeFieldEnd()
    if self.room_inventory is not None:
      oprot.writeFieldBegin('room_inventory', TType.I32, 15)
      oprot.writeI32(self.room_inventory)
      oprot.writeFieldEnd()
    if self.max_person is not None:
      oprot.writeFieldBegin('max_person', TType.I32, 16)
      oprot.writeI32(self.max_person)
      oprot.writeFieldEnd()
    if self.bed_type_cn is not None:
      oprot.writeFieldBegin('bed_type_cn', TType.STRING, 17)
      oprot.writeString(self.bed_type_cn)
      oprot.writeFieldEnd()
    if self.bed_type_en is not None:
      oprot.writeFieldBegin('bed_type_en', TType.STRING, 18)
      oprot.writeString(self.bed_type_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.rp_name)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.price_breaks)
    value = (value * 31) ^ hash(self.breakfast_info_cn)
    value = (value * 31) ^ hash(self.breakfast_info_en)
    value = (value * 31) ^ hash(self.internet_cn)
    value = (value * 31) ^ hash(self.internet_en)
    value = (value * 31) ^ hash(self.cancel_policy)
    value = (value * 31) ^ hash(self.price_detail)
    value = (value * 31) ^ hash(self.arrive_start_time)
    value = (value * 31) ^ hash(self.arrive_end_time)
    value = (value * 31) ^ hash(self.room_inventory)
    value = (value * 31) ^ hash(self.max_person)
    value = (value * 31) ^ hash(self.bed_type_cn)
    value = (value * 31) ^ hash(self.bed_type_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PictureInfo:
  """
  Attributes:
   - type
   - url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
  )

  def __init__(self, type=None, url=None,):
    self.type = type
    self.url = url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PictureInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.url)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PictureList:
  """
  Attributes:
   - picture
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'picture', (TType.STRUCT,(PictureInfo, PictureInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, picture=None,):
    self.picture = picture

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.picture = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = PictureInfo()
            _elem12.read(iprot)
            self.picture.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PictureList')
    if self.picture is not None:
      oprot.writeFieldBegin('picture', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.picture))
      for iter13 in self.picture:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.picture)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderBrief:
  """
  Attributes:
   - provider_id
   - provider_name_cn
   - provider_name_en
   - lowest_price
   - picture
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'provider_id', None, None, ), # 1
    (2, TType.STRING, 'provider_name_cn', None, None, ), # 2
    (3, TType.STRING, 'provider_name_en', None, None, ), # 3
    (4, TType.I32, 'lowest_price', None, None, ), # 4
    (5, TType.STRUCT, 'picture', (PictureInfo, PictureInfo.thrift_spec), None, ), # 5
  )

  def __init__(self, provider_id=None, provider_name_cn=None, provider_name_en=None, lowest_price=None, picture=None,):
    self.provider_id = provider_id
    self.provider_name_cn = provider_name_cn
    self.provider_name_en = provider_name_en
    self.lowest_price = lowest_price
    self.picture = picture

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.provider_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.provider_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.provider_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.lowest_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.picture = PictureInfo()
          self.picture.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderBrief')
    if self.provider_id is not None:
      oprot.writeFieldBegin('provider_id', TType.I32, 1)
      oprot.writeI32(self.provider_id)
      oprot.writeFieldEnd()
    if self.provider_name_cn is not None:
      oprot.writeFieldBegin('provider_name_cn', TType.STRING, 2)
      oprot.writeString(self.provider_name_cn)
      oprot.writeFieldEnd()
    if self.provider_name_en is not None:
      oprot.writeFieldBegin('provider_name_en', TType.STRING, 3)
      oprot.writeString(self.provider_name_en)
      oprot.writeFieldEnd()
    if self.lowest_price is not None:
      oprot.writeFieldBegin('lowest_price', TType.I32, 4)
      oprot.writeI32(self.lowest_price)
      oprot.writeFieldEnd()
    if self.picture is not None:
      oprot.writeFieldBegin('picture', TType.STRUCT, 5)
      self.picture.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_id)
    value = (value * 31) ^ hash(self.provider_name_cn)
    value = (value * 31) ^ hash(self.provider_name_en)
    value = (value * 31) ^ hash(self.lowest_price)
    value = (value * 31) ^ hash(self.picture)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GeoInfo:
  """
  Attributes:
   - geo_longitude
   - geo_latitude
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'geo_longitude', None, None, ), # 1
    (2, TType.DOUBLE, 'geo_latitude', None, None, ), # 2
  )

  def __init__(self, geo_longitude=None, geo_latitude=None,):
    self.geo_longitude = geo_longitude
    self.geo_latitude = geo_latitude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.geo_longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.geo_latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GeoInfo')
    if self.geo_longitude is not None:
      oprot.writeFieldBegin('geo_longitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.geo_longitude)
      oprot.writeFieldEnd()
    if self.geo_latitude is not None:
      oprot.writeFieldBegin('geo_latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.geo_latitude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.geo_longitude)
    value = (value * 31) ^ hash(self.geo_latitude)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegionInfo:
  """
  Attributes:
   - region_id
   - region_name_cn
   - region_name_en
   - region_center_coordinate
   - country_code
   - country_name_cn
   - country_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.STRING, 'region_name_cn', None, None, ), # 2
    (3, TType.STRING, 'region_name_en', None, None, ), # 3
    (4, TType.STRUCT, 'region_center_coordinate', (GeoInfo, GeoInfo.thrift_spec), None, ), # 4
    (5, TType.STRING, 'country_code', None, None, ), # 5
    (6, TType.STRING, 'country_name_cn', None, None, ), # 6
    (7, TType.STRING, 'country_name_en', None, None, ), # 7
  )

  def __init__(self, region_id=None, region_name_cn=None, region_name_en=None, region_center_coordinate=None, country_code=None, country_name_cn=None, country_name_en=None,):
    self.region_id = region_id
    self.region_name_cn = region_name_cn
    self.region_name_en = region_name_en
    self.region_center_coordinate = region_center_coordinate
    self.country_code = country_code
    self.country_name_cn = country_name_cn
    self.country_name_en = country_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.region_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.region_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.region_center_coordinate = GeoInfo()
          self.region_center_coordinate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.country_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.country_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.country_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegionInfo')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_name_cn is not None:
      oprot.writeFieldBegin('region_name_cn', TType.STRING, 2)
      oprot.writeString(self.region_name_cn)
      oprot.writeFieldEnd()
    if self.region_name_en is not None:
      oprot.writeFieldBegin('region_name_en', TType.STRING, 3)
      oprot.writeString(self.region_name_en)
      oprot.writeFieldEnd()
    if self.region_center_coordinate is not None:
      oprot.writeFieldBegin('region_center_coordinate', TType.STRUCT, 4)
      self.region_center_coordinate.write(oprot)
      oprot.writeFieldEnd()
    if self.country_code is not None:
      oprot.writeFieldBegin('country_code', TType.STRING, 5)
      oprot.writeString(self.country_code)
      oprot.writeFieldEnd()
    if self.country_name_cn is not None:
      oprot.writeFieldBegin('country_name_cn', TType.STRING, 6)
      oprot.writeString(self.country_name_cn)
      oprot.writeFieldEnd()
    if self.country_name_en is not None:
      oprot.writeFieldBegin('country_name_en', TType.STRING, 7)
      oprot.writeString(self.country_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_name_cn)
    value = (value * 31) ^ hash(self.region_name_en)
    value = (value * 31) ^ hash(self.region_center_coordinate)
    value = (value * 31) ^ hash(self.country_code)
    value = (value * 31) ^ hash(self.country_name_cn)
    value = (value * 31) ^ hash(self.country_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommentInfo:
  """
  Attributes:
   - comment_score
   - comment_count
   - comment_site_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'comment_score', None, None, ), # 1
    (2, TType.I32, 'comment_count', None, None, ), # 2
    (3, TType.I32, 'comment_site_num', None, None, ), # 3
  )

  def __init__(self, comment_score=None, comment_count=None, comment_site_num=None,):
    self.comment_score = comment_score
    self.comment_count = comment_count
    self.comment_site_num = comment_site_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.comment_score = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.comment_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.comment_site_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommentInfo')
    if self.comment_score is not None:
      oprot.writeFieldBegin('comment_score', TType.STRING, 1)
      oprot.writeString(self.comment_score)
      oprot.writeFieldEnd()
    if self.comment_count is not None:
      oprot.writeFieldBegin('comment_count', TType.I32, 2)
      oprot.writeI32(self.comment_count)
      oprot.writeFieldEnd()
    if self.comment_site_num is not None:
      oprot.writeFieldBegin('comment_site_num', TType.I32, 3)
      oprot.writeI32(self.comment_site_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.comment_score)
    value = (value * 31) ^ hash(self.comment_count)
    value = (value * 31) ^ hash(self.comment_site_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class POIData:
  """
  Attributes:
   - poi_id
   - poi_name_cn
   - poi_name_en
   - distance
   - geo_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'poi_id', None, None, ), # 1
    (2, TType.STRING, 'poi_name_cn', None, None, ), # 2
    (3, TType.STRING, 'poi_name_en', None, None, ), # 3
    (4, TType.STRING, 'distance', None, None, ), # 4
    (5, TType.STRUCT, 'geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 5
  )

  def __init__(self, poi_id=None, poi_name_cn=None, poi_name_en=None, distance=None, geo_info=None,):
    self.poi_id = poi_id
    self.poi_name_cn = poi_name_cn
    self.poi_name_en = poi_name_en
    self.distance = distance
    self.geo_info = geo_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.poi_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.poi_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.poi_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.distance = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.geo_info = GeoInfo()
          self.geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('POIData')
    if self.poi_id is not None:
      oprot.writeFieldBegin('poi_id', TType.I32, 1)
      oprot.writeI32(self.poi_id)
      oprot.writeFieldEnd()
    if self.poi_name_cn is not None:
      oprot.writeFieldBegin('poi_name_cn', TType.STRING, 2)
      oprot.writeString(self.poi_name_cn)
      oprot.writeFieldEnd()
    if self.poi_name_en is not None:
      oprot.writeFieldBegin('poi_name_en', TType.STRING, 3)
      oprot.writeString(self.poi_name_en)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.STRING, 4)
      oprot.writeString(self.distance)
      oprot.writeFieldEnd()
    if self.geo_info is not None:
      oprot.writeFieldBegin('geo_info', TType.STRUCT, 5)
      self.geo_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.poi_id)
    value = (value * 31) ^ hash(self.poi_name_cn)
    value = (value * 31) ^ hash(self.poi_name_en)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.geo_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearbyPOI:
  """
  Attributes:
   - poi_type
   - poi_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'poi_type', None, None, ), # 1
    (2, TType.LIST, 'poi_data', (TType.STRUCT,(POIData, POIData.thrift_spec)), None, ), # 2
  )

  def __init__(self, poi_type=None, poi_data=None,):
    self.poi_type = poi_type
    self.poi_data = poi_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.poi_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.poi_data = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = POIData()
            _elem19.read(iprot)
            self.poi_data.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearbyPOI')
    if self.poi_type is not None:
      oprot.writeFieldBegin('poi_type', TType.I32, 1)
      oprot.writeI32(self.poi_type)
      oprot.writeFieldEnd()
    if self.poi_data is not None:
      oprot.writeFieldBegin('poi_data', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.poi_data))
      for iter20 in self.poi_data:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.poi_type)
    value = (value * 31) ^ hash(self.poi_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceRange:
  """
  Attributes:
   - price_low
   - price_high
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'price_low', None, None, ), # 1
    (2, TType.I32, 'price_high', None, None, ), # 2
  )

  def __init__(self, price_low=None, price_high=None,):
    self.price_low = price_low
    self.price_high = price_high

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.price_low = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price_high = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceRange')
    if self.price_low is not None:
      oprot.writeFieldBegin('price_low', TType.I32, 1)
      oprot.writeI32(self.price_low)
      oprot.writeFieldEnd()
    if self.price_high is not None:
      oprot.writeFieldBegin('price_high', TType.I32, 2)
      oprot.writeI32(self.price_high)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price_low)
    value = (value * 31) ^ hash(self.price_high)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AllBuyRoomMessage:
  """
  Attributes:
   - has_allbuyroom_pro
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_allbuyroom_pro', None, True, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_allbuyroom_pro=thrift_spec[1][4], type=None,):
    self.has_allbuyroom_pro = has_allbuyroom_pro
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_allbuyroom_pro = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AllBuyRoomMessage')
    if self.has_allbuyroom_pro is not None:
      oprot.writeFieldBegin('has_allbuyroom_pro', TType.BOOL, 1)
      oprot.writeBool(self.has_allbuyroom_pro)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_allbuyroom_pro)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageInfo:
  """
  Attributes:
   - page_no
   - page_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page_no', None, 1, ), # 1
    (2, TType.I16, 'page_size', None, 15, ), # 2
  )

  def __init__(self, page_no=thrift_spec[1][4], page_size=thrift_spec[2][4],):
    self.page_no = page_no
    self.page_size = page_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page_no = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.page_size = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageInfo')
    if self.page_no is not None:
      oprot.writeFieldBegin('page_no', TType.I32, 1)
      oprot.writeI32(self.page_no)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I16, 2)
      oprot.writeI16(self.page_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page_no)
    value = (value * 31) ^ hash(self.page_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFacility:
  """
  Attributes:
   - id
   - facility_name_cn
   - facility_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'facility_name_cn', None, None, ), # 2
    (3, TType.STRING, 'facility_name_en', None, None, ), # 3
  )

  def __init__(self, id=None, facility_name_cn=None, facility_name_en=None,):
    self.id = id
    self.facility_name_cn = facility_name_cn
    self.facility_name_en = facility_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.facility_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.facility_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFacility')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.facility_name_cn is not None:
      oprot.writeFieldBegin('facility_name_cn', TType.STRING, 2)
      oprot.writeString(self.facility_name_cn)
      oprot.writeFieldEnd()
    if self.facility_name_en is not None:
      oprot.writeFieldBegin('facility_name_en', TType.STRING, 3)
      oprot.writeString(self.facility_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.facility_name_cn)
    value = (value * 31) ^ hash(self.facility_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelLeisure:
  """
  Attributes:
   - id
   - leisure_name_cn
   - leisure_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'leisure_name_cn', None, None, ), # 2
    (3, TType.STRING, 'leisure_name_en', None, None, ), # 3
  )

  def __init__(self, id=None, leisure_name_cn=None, leisure_name_en=None,):
    self.id = id
    self.leisure_name_cn = leisure_name_cn
    self.leisure_name_en = leisure_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.leisure_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.leisure_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelLeisure')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.leisure_name_cn is not None:
      oprot.writeFieldBegin('leisure_name_cn', TType.STRING, 2)
      oprot.writeString(self.leisure_name_cn)
      oprot.writeFieldEnd()
    if self.leisure_name_en is not None:
      oprot.writeFieldBegin('leisure_name_en', TType.STRING, 3)
      oprot.writeString(self.leisure_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.leisure_name_cn)
    value = (value * 31) ^ hash(self.leisure_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelService:
  """
  Attributes:
   - id
   - service_name_cn
   - service_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'service_name_cn', None, None, ), # 2
    (3, TType.STRING, 'service_name_en', None, None, ), # 3
  )

  def __init__(self, id=None, service_name_cn=None, service_name_en=None,):
    self.id = id
    self.service_name_cn = service_name_cn
    self.service_name_en = service_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.service_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.service_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelService')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.service_name_cn is not None:
      oprot.writeFieldBegin('service_name_cn', TType.STRING, 2)
      oprot.writeString(self.service_name_cn)
      oprot.writeFieldEnd()
    if self.service_name_en is not None:
      oprot.writeFieldBegin('service_name_en', TType.STRING, 3)
      oprot.writeString(self.service_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.service_name_cn)
    value = (value * 31) ^ hash(self.service_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelInfoMap:
  """
  Attributes:
   - hotel_id
   - geo_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.STRUCT, 'geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, hotel_id=None, geo_info=None,):
    self.hotel_id = hotel_id
    self.geo_info = geo_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.geo_info = GeoInfo()
          self.geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelInfoMap')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.geo_info is not None:
      oprot.writeFieldBegin('geo_info', TType.STRUCT, 2)
      self.geo_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.geo_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelInfoList:
  """
  Attributes:
   - hotel_id
   - hotel_name_cn
   - hotel_name_en
   - hotel_star
   - hotel_geo_info
   - hotel_address_cn
   - hotel_address_en
   - hotel_comment_info
   - hotel_lowest_price
   - distance
   - hotel_picture_id
   - hotel_booking_status
   - provider_brief
   - self_signed
   - ean_promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.STRING, 'hotel_name_cn', None, None, ), # 2
    (3, TType.STRING, 'hotel_name_en', None, None, ), # 3
    None, # 4
    (5, TType.STRING, 'hotel_star', None, None, ), # 5
    (6, TType.STRUCT, 'hotel_geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 6
    (7, TType.STRING, 'hotel_address_cn', None, None, ), # 7
    None, # 8
    (9, TType.STRING, 'hotel_address_en', None, None, ), # 9
    (10, TType.STRUCT, 'hotel_comment_info', (CommentInfo, CommentInfo.thrift_spec), None, ), # 10
    (11, TType.I32, 'hotel_lowest_price', None, None, ), # 11
    (12, TType.STRING, 'distance', None, None, ), # 12
    (13, TType.STRUCT, 'hotel_picture_id', (PictureInfo, PictureInfo.thrift_spec), None, ), # 13
    (14, TType.I32, 'hotel_booking_status', None, None, ), # 14
    (15, TType.LIST, 'provider_brief', (TType.STRUCT,(ProviderBrief, ProviderBrief.thrift_spec)), None, ), # 15
    (16, TType.I32, 'self_signed', None, None, ), # 16
    (17, TType.I32, 'ean_promotion_type', None, None, ), # 17
  )

  def __init__(self, hotel_id=None, hotel_name_cn=None, hotel_name_en=None, hotel_star=None, hotel_geo_info=None, hotel_address_cn=None, hotel_address_en=None, hotel_comment_info=None, hotel_lowest_price=None, distance=None, hotel_picture_id=None, hotel_booking_status=None, provider_brief=None, self_signed=None, ean_promotion_type=None,):
    self.hotel_id = hotel_id
    self.hotel_name_cn = hotel_name_cn
    self.hotel_name_en = hotel_name_en
    self.hotel_star = hotel_star
    self.hotel_geo_info = hotel_geo_info
    self.hotel_address_cn = hotel_address_cn
    self.hotel_address_en = hotel_address_en
    self.hotel_comment_info = hotel_comment_info
    self.hotel_lowest_price = hotel_lowest_price
    self.distance = distance
    self.hotel_picture_id = hotel_picture_id
    self.hotel_booking_status = hotel_booking_status
    self.provider_brief = provider_brief
    self.self_signed = self_signed
    self.ean_promotion_type = ean_promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hotel_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hotel_star = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.hotel_geo_info = GeoInfo()
          self.hotel_geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.hotel_address_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.hotel_address_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.hotel_comment_info = CommentInfo()
          self.hotel_comment_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.hotel_lowest_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.distance = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.hotel_picture_id = PictureInfo()
          self.hotel_picture_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.hotel_booking_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.provider_brief = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ProviderBrief()
            _elem26.read(iprot)
            self.provider_brief.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.self_signed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.ean_promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelInfoList')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.hotel_name_cn is not None:
      oprot.writeFieldBegin('hotel_name_cn', TType.STRING, 2)
      oprot.writeString(self.hotel_name_cn)
      oprot.writeFieldEnd()
    if self.hotel_name_en is not None:
      oprot.writeFieldBegin('hotel_name_en', TType.STRING, 3)
      oprot.writeString(self.hotel_name_en)
      oprot.writeFieldEnd()
    if self.hotel_star is not None:
      oprot.writeFieldBegin('hotel_star', TType.STRING, 5)
      oprot.writeString(self.hotel_star)
      oprot.writeFieldEnd()
    if self.hotel_geo_info is not None:
      oprot.writeFieldBegin('hotel_geo_info', TType.STRUCT, 6)
      self.hotel_geo_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_address_cn is not None:
      oprot.writeFieldBegin('hotel_address_cn', TType.STRING, 7)
      oprot.writeString(self.hotel_address_cn)
      oprot.writeFieldEnd()
    if self.hotel_address_en is not None:
      oprot.writeFieldBegin('hotel_address_en', TType.STRING, 9)
      oprot.writeString(self.hotel_address_en)
      oprot.writeFieldEnd()
    if self.hotel_comment_info is not None:
      oprot.writeFieldBegin('hotel_comment_info', TType.STRUCT, 10)
      self.hotel_comment_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_lowest_price is not None:
      oprot.writeFieldBegin('hotel_lowest_price', TType.I32, 11)
      oprot.writeI32(self.hotel_lowest_price)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.STRING, 12)
      oprot.writeString(self.distance)
      oprot.writeFieldEnd()
    if self.hotel_picture_id is not None:
      oprot.writeFieldBegin('hotel_picture_id', TType.STRUCT, 13)
      self.hotel_picture_id.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_booking_status is not None:
      oprot.writeFieldBegin('hotel_booking_status', TType.I32, 14)
      oprot.writeI32(self.hotel_booking_status)
      oprot.writeFieldEnd()
    if self.provider_brief is not None:
      oprot.writeFieldBegin('provider_brief', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.provider_brief))
      for iter27 in self.provider_brief:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.self_signed is not None:
      oprot.writeFieldBegin('self_signed', TType.I32, 16)
      oprot.writeI32(self.self_signed)
      oprot.writeFieldEnd()
    if self.ean_promotion_type is not None:
      oprot.writeFieldBegin('ean_promotion_type', TType.I32, 17)
      oprot.writeI32(self.ean_promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.hotel_name_cn)
    value = (value * 31) ^ hash(self.hotel_name_en)
    value = (value * 31) ^ hash(self.hotel_star)
    value = (value * 31) ^ hash(self.hotel_geo_info)
    value = (value * 31) ^ hash(self.hotel_address_cn)
    value = (value * 31) ^ hash(self.hotel_address_en)
    value = (value * 31) ^ hash(self.hotel_comment_info)
    value = (value * 31) ^ hash(self.hotel_lowest_price)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.hotel_picture_id)
    value = (value * 31) ^ hash(self.hotel_booking_status)
    value = (value * 31) ^ hash(self.provider_brief)
    value = (value * 31) ^ hash(self.self_signed)
    value = (value * 31) ^ hash(self.ean_promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelInfoDetail:
  """
  Attributes:
   - hotel_id
   - hotel_name_cn
   - hotel_name_en
   - hotel_openning_date
   - hotel_last_decorate_date
   - hotel_star
   - hotel_geo_info
   - hotel_comment_info
   - hotel_lowest_price
   - hotel_summary_cn
   - hotel_summary_en
   - hotel_picture_id
   - hotel_address_cn
   - hotel_address_en
   - hotel_booking_status
   - hotel_facility
   - hotel_service
   - accept_credit_card
   - hotel_leisure
   - mapped_ota_count
   - self_signed
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.STRING, 'hotel_name_cn', None, None, ), # 2
    (3, TType.STRING, 'hotel_name_en', None, None, ), # 3
    None, # 4
    (5, TType.STRING, 'hotel_openning_date', None, None, ), # 5
    (6, TType.STRING, 'hotel_last_decorate_date', None, None, ), # 6
    (7, TType.STRING, 'hotel_star', None, None, ), # 7
    (8, TType.STRUCT, 'hotel_geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'hotel_comment_info', (CommentInfo, CommentInfo.thrift_spec), None, ), # 9
    (10, TType.I32, 'hotel_lowest_price', None, None, ), # 10
    None, # 11
    (12, TType.STRING, 'hotel_summary_cn', None, None, ), # 12
    (13, TType.STRING, 'hotel_summary_en', None, None, ), # 13
    (14, TType.LIST, 'hotel_picture_id', (TType.STRUCT,(PictureList, PictureList.thrift_spec)), None, ), # 14
    (15, TType.STRING, 'hotel_address_cn', None, None, ), # 15
    (16, TType.STRING, 'hotel_address_en', None, None, ), # 16
    (17, TType.I32, 'hotel_booking_status', None, None, ), # 17
    (18, TType.LIST, 'hotel_facility', (TType.STRUCT,(HotelFacility, HotelFacility.thrift_spec)), None, ), # 18
    (19, TType.LIST, 'hotel_service', (TType.STRUCT,(HotelService, HotelService.thrift_spec)), None, ), # 19
    (20, TType.LIST, 'accept_credit_card', (TType.STRING,None), None, ), # 20
    (21, TType.LIST, 'hotel_leisure', (TType.STRUCT,(HotelLeisure, HotelLeisure.thrift_spec)), None, ), # 21
    None, # 22
    (23, TType.I32, 'mapped_ota_count', None, None, ), # 23
    (24, TType.I32, 'self_signed', None, None, ), # 24
  )

  def __init__(self, hotel_id=None, hotel_name_cn=None, hotel_name_en=None, hotel_openning_date=None, hotel_last_decorate_date=None, hotel_star=None, hotel_geo_info=None, hotel_comment_info=None, hotel_lowest_price=None, hotel_summary_cn=None, hotel_summary_en=None, hotel_picture_id=None, hotel_address_cn=None, hotel_address_en=None, hotel_booking_status=None, hotel_facility=None, hotel_service=None, accept_credit_card=None, hotel_leisure=None, mapped_ota_count=None, self_signed=None,):
    self.hotel_id = hotel_id
    self.hotel_name_cn = hotel_name_cn
    self.hotel_name_en = hotel_name_en
    self.hotel_openning_date = hotel_openning_date
    self.hotel_last_decorate_date = hotel_last_decorate_date
    self.hotel_star = hotel_star
    self.hotel_geo_info = hotel_geo_info
    self.hotel_comment_info = hotel_comment_info
    self.hotel_lowest_price = hotel_lowest_price
    self.hotel_summary_cn = hotel_summary_cn
    self.hotel_summary_en = hotel_summary_en
    self.hotel_picture_id = hotel_picture_id
    self.hotel_address_cn = hotel_address_cn
    self.hotel_address_en = hotel_address_en
    self.hotel_booking_status = hotel_booking_status
    self.hotel_facility = hotel_facility
    self.hotel_service = hotel_service
    self.accept_credit_card = accept_credit_card
    self.hotel_leisure = hotel_leisure
    self.mapped_ota_count = mapped_ota_count
    self.self_signed = self_signed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hotel_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hotel_openning_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.hotel_last_decorate_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.hotel_star = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.hotel_geo_info = GeoInfo()
          self.hotel_geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.hotel_comment_info = CommentInfo()
          self.hotel_comment_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.hotel_lowest_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.hotel_summary_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.hotel_summary_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.hotel_picture_id = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = PictureList()
            _elem33.read(iprot)
            self.hotel_picture_id.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.hotel_address_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.hotel_address_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.hotel_booking_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.hotel_facility = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = HotelFacility()
            _elem39.read(iprot)
            self.hotel_facility.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.hotel_service = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = HotelService()
            _elem45.read(iprot)
            self.hotel_service.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.accept_credit_card = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = iprot.readString()
            self.accept_credit_card.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.hotel_leisure = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = HotelLeisure()
            _elem57.read(iprot)
            self.hotel_leisure.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.mapped_ota_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.self_signed = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelInfoDetail')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.hotel_name_cn is not None:
      oprot.writeFieldBegin('hotel_name_cn', TType.STRING, 2)
      oprot.writeString(self.hotel_name_cn)
      oprot.writeFieldEnd()
    if self.hotel_name_en is not None:
      oprot.writeFieldBegin('hotel_name_en', TType.STRING, 3)
      oprot.writeString(self.hotel_name_en)
      oprot.writeFieldEnd()
    if self.hotel_openning_date is not None:
      oprot.writeFieldBegin('hotel_openning_date', TType.STRING, 5)
      oprot.writeString(self.hotel_openning_date)
      oprot.writeFieldEnd()
    if self.hotel_last_decorate_date is not None:
      oprot.writeFieldBegin('hotel_last_decorate_date', TType.STRING, 6)
      oprot.writeString(self.hotel_last_decorate_date)
      oprot.writeFieldEnd()
    if self.hotel_star is not None:
      oprot.writeFieldBegin('hotel_star', TType.STRING, 7)
      oprot.writeString(self.hotel_star)
      oprot.writeFieldEnd()
    if self.hotel_geo_info is not None:
      oprot.writeFieldBegin('hotel_geo_info', TType.STRUCT, 8)
      self.hotel_geo_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_comment_info is not None:
      oprot.writeFieldBegin('hotel_comment_info', TType.STRUCT, 9)
      self.hotel_comment_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_lowest_price is not None:
      oprot.writeFieldBegin('hotel_lowest_price', TType.I32, 10)
      oprot.writeI32(self.hotel_lowest_price)
      oprot.writeFieldEnd()
    if self.hotel_summary_cn is not None:
      oprot.writeFieldBegin('hotel_summary_cn', TType.STRING, 12)
      oprot.writeString(self.hotel_summary_cn)
      oprot.writeFieldEnd()
    if self.hotel_summary_en is not None:
      oprot.writeFieldBegin('hotel_summary_en', TType.STRING, 13)
      oprot.writeString(self.hotel_summary_en)
      oprot.writeFieldEnd()
    if self.hotel_picture_id is not None:
      oprot.writeFieldBegin('hotel_picture_id', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_picture_id))
      for iter58 in self.hotel_picture_id:
        iter58.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_address_cn is not None:
      oprot.writeFieldBegin('hotel_address_cn', TType.STRING, 15)
      oprot.writeString(self.hotel_address_cn)
      oprot.writeFieldEnd()
    if self.hotel_address_en is not None:
      oprot.writeFieldBegin('hotel_address_en', TType.STRING, 16)
      oprot.writeString(self.hotel_address_en)
      oprot.writeFieldEnd()
    if self.hotel_booking_status is not None:
      oprot.writeFieldBegin('hotel_booking_status', TType.I32, 17)
      oprot.writeI32(self.hotel_booking_status)
      oprot.writeFieldEnd()
    if self.hotel_facility is not None:
      oprot.writeFieldBegin('hotel_facility', TType.LIST, 18)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_facility))
      for iter59 in self.hotel_facility:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_service is not None:
      oprot.writeFieldBegin('hotel_service', TType.LIST, 19)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_service))
      for iter60 in self.hotel_service:
        iter60.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.accept_credit_card is not None:
      oprot.writeFieldBegin('accept_credit_card', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.accept_credit_card))
      for iter61 in self.accept_credit_card:
        oprot.writeString(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_leisure is not None:
      oprot.writeFieldBegin('hotel_leisure', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_leisure))
      for iter62 in self.hotel_leisure:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mapped_ota_count is not None:
      oprot.writeFieldBegin('mapped_ota_count', TType.I32, 23)
      oprot.writeI32(self.mapped_ota_count)
      oprot.writeFieldEnd()
    if self.self_signed is not None:
      oprot.writeFieldBegin('self_signed', TType.I32, 24)
      oprot.writeI32(self.self_signed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.hotel_name_cn)
    value = (value * 31) ^ hash(self.hotel_name_en)
    value = (value * 31) ^ hash(self.hotel_openning_date)
    value = (value * 31) ^ hash(self.hotel_last_decorate_date)
    value = (value * 31) ^ hash(self.hotel_star)
    value = (value * 31) ^ hash(self.hotel_geo_info)
    value = (value * 31) ^ hash(self.hotel_comment_info)
    value = (value * 31) ^ hash(self.hotel_lowest_price)
    value = (value * 31) ^ hash(self.hotel_summary_cn)
    value = (value * 31) ^ hash(self.hotel_summary_en)
    value = (value * 31) ^ hash(self.hotel_picture_id)
    value = (value * 31) ^ hash(self.hotel_address_cn)
    value = (value * 31) ^ hash(self.hotel_address_en)
    value = (value * 31) ^ hash(self.hotel_booking_status)
    value = (value * 31) ^ hash(self.hotel_facility)
    value = (value * 31) ^ hash(self.hotel_service)
    value = (value * 31) ^ hash(self.accept_credit_card)
    value = (value * 31) ^ hash(self.hotel_leisure)
    value = (value * 31) ^ hash(self.mapped_ota_count)
    value = (value * 31) ^ hash(self.self_signed)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceRangeStat:
  """
  Attributes:
   - price_range
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'price_range', (PriceRange, PriceRange.thrift_spec), None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, price_range=None, count=None,):
    self.price_range = price_range
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.price_range = PriceRange()
          self.price_range.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceRangeStat')
    if self.price_range is not None:
      oprot.writeFieldBegin('price_range', TType.STRUCT, 1)
      self.price_range.write(oprot)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price_range)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelStarStat:
  """
  Attributes:
   - hotel_star
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_star', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, hotel_star=None, count=None,):
    self.hotel_star = hotel_star
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_star = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelStarStat')
    if self.hotel_star is not None:
      oprot.writeFieldBegin('hotel_star', TType.I32, 1)
      oprot.writeI32(self.hotel_star)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_star)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelBrandStat:
  """
  Attributes:
   - hotel_brand
   - count
   - brand_name_cn
   - brand_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_brand', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.STRING, 'brand_name_cn', None, None, ), # 3
    (4, TType.STRING, 'brand_name_en', None, None, ), # 4
  )

  def __init__(self, hotel_brand=None, count=None, brand_name_cn=None, brand_name_en=None,):
    self.hotel_brand = hotel_brand
    self.count = count
    self.brand_name_cn = brand_name_cn
    self.brand_name_en = brand_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_brand = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.brand_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.brand_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelBrandStat')
    if self.hotel_brand is not None:
      oprot.writeFieldBegin('hotel_brand', TType.I32, 1)
      oprot.writeI32(self.hotel_brand)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.brand_name_cn is not None:
      oprot.writeFieldBegin('brand_name_cn', TType.STRING, 3)
      oprot.writeString(self.brand_name_cn)
      oprot.writeFieldEnd()
    if self.brand_name_en is not None:
      oprot.writeFieldBegin('brand_name_en', TType.STRING, 4)
      oprot.writeString(self.brand_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_brand)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.brand_name_cn)
    value = (value * 31) ^ hash(self.brand_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelTypeStat:
  """
  Attributes:
   - hotel_type
   - count
   - type_name_cn
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_type', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.STRING, 'type_name_cn', None, None, ), # 3
    (4, TType.STRING, 'type_name_en', None, None, ), # 4
  )

  def __init__(self, hotel_type=None, count=None, type_name_cn=None, type_name_en=None,):
    self.hotel_type = hotel_type
    self.count = count
    self.type_name_cn = type_name_cn
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelTypeStat')
    if self.hotel_type is not None:
      oprot.writeFieldBegin('hotel_type', TType.I32, 1)
      oprot.writeI32(self.hotel_type)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.type_name_cn is not None:
      oprot.writeFieldBegin('type_name_cn', TType.STRING, 3)
      oprot.writeString(self.type_name_cn)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 4)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_type)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.type_name_cn)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFacilityStat:
  """
  Attributes:
   - hotel_facility
   - count
   - facility_name_cn
   - facility_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_facility', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.STRING, 'facility_name_cn', None, None, ), # 3
    (4, TType.STRING, 'facility_name_en', None, None, ), # 4
  )

  def __init__(self, hotel_facility=None, count=None, facility_name_cn=None, facility_name_en=None,):
    self.hotel_facility = hotel_facility
    self.count = count
    self.facility_name_cn = facility_name_cn
    self.facility_name_en = facility_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_facility = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.facility_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.facility_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFacilityStat')
    if self.hotel_facility is not None:
      oprot.writeFieldBegin('hotel_facility', TType.I32, 1)
      oprot.writeI32(self.hotel_facility)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.facility_name_cn is not None:
      oprot.writeFieldBegin('facility_name_cn', TType.STRING, 3)
      oprot.writeString(self.facility_name_cn)
      oprot.writeFieldEnd()
    if self.facility_name_en is not None:
      oprot.writeFieldBegin('facility_name_en', TType.STRING, 4)
      oprot.writeString(self.facility_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_facility)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.facility_name_cn)
    value = (value * 31) ^ hash(self.facility_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFilter:
  """
  Attributes:
   - price_range_stat
   - hotel_star_stat
   - hotel_brand_stat
   - hotel_type_stat
   - hotel_facility_stat
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'price_range_stat', (TType.STRUCT,(PriceRangeStat, PriceRangeStat.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'hotel_star_stat', (TType.STRUCT,(HotelStarStat, HotelStarStat.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'hotel_brand_stat', (TType.STRUCT,(HotelBrandStat, HotelBrandStat.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'hotel_type_stat', (TType.STRUCT,(HotelTypeStat, HotelTypeStat.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'hotel_facility_stat', (TType.STRUCT,(HotelFacilityStat, HotelFacilityStat.thrift_spec)), None, ), # 5
  )

  def __init__(self, price_range_stat=None, hotel_star_stat=None, hotel_brand_stat=None, hotel_type_stat=None, hotel_facility_stat=None,):
    self.price_range_stat = price_range_stat
    self.hotel_star_stat = hotel_star_stat
    self.hotel_brand_stat = hotel_brand_stat
    self.hotel_type_stat = hotel_type_stat
    self.hotel_facility_stat = hotel_facility_stat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.price_range_stat = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = PriceRangeStat()
            _elem68.read(iprot)
            self.price_range_stat.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hotel_star_stat = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = HotelStarStat()
            _elem74.read(iprot)
            self.hotel_star_stat.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hotel_brand_stat = []
          (_etype78, _size75) = iprot.readListBegin()
          for _i79 in xrange(_size75):
            _elem80 = HotelBrandStat()
            _elem80.read(iprot)
            self.hotel_brand_stat.append(_elem80)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.hotel_type_stat = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = HotelTypeStat()
            _elem86.read(iprot)
            self.hotel_type_stat.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.hotel_facility_stat = []
          (_etype90, _size87) = iprot.readListBegin()
          for _i91 in xrange(_size87):
            _elem92 = HotelFacilityStat()
            _elem92.read(iprot)
            self.hotel_facility_stat.append(_elem92)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFilter')
    if self.price_range_stat is not None:
      oprot.writeFieldBegin('price_range_stat', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.price_range_stat))
      for iter93 in self.price_range_stat:
        iter93.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_star_stat is not None:
      oprot.writeFieldBegin('hotel_star_stat', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_star_stat))
      for iter94 in self.hotel_star_stat:
        iter94.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_brand_stat is not None:
      oprot.writeFieldBegin('hotel_brand_stat', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_brand_stat))
      for iter95 in self.hotel_brand_stat:
        iter95.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_type_stat is not None:
      oprot.writeFieldBegin('hotel_type_stat', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_type_stat))
      for iter96 in self.hotel_type_stat:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_facility_stat is not None:
      oprot.writeFieldBegin('hotel_facility_stat', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_facility_stat))
      for iter97 in self.hotel_facility_stat:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price_range_stat)
    value = (value * 31) ^ hash(self.hotel_star_stat)
    value = (value * 31) ^ hash(self.hotel_brand_stat)
    value = (value * 31) ^ hash(self.hotel_type_stat)
    value = (value * 31) ^ hash(self.hotel_facility_stat)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerStatus:
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerStatus')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EanRoomPrice:
  """
  Attributes:
   - promotion_type
   - price_breaks
   - origin_price
   - room_code
   - coupon_code
   - breakfast_info_cn
   - breakfast_info_en
   - internet_cn
   - internet_en
   - cancel_policy
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotion_type', None, None, ), # 1
    (2, TType.I32, 'price_breaks', None, None, ), # 2
    (3, TType.I32, 'origin_price', None, None, ), # 3
    None, # 4
    (5, TType.I32, 'room_code', None, None, ), # 5
    (6, TType.STRING, 'coupon_code', None, None, ), # 6
    (7, TType.STRING, 'breakfast_info_cn', None, None, ), # 7
    (8, TType.STRING, 'breakfast_info_en', None, None, ), # 8
    (9, TType.STRING, 'internet_cn', None, None, ), # 9
    (10, TType.STRING, 'internet_en', None, None, ), # 10
    (11, TType.STRUCT, 'cancel_policy', (CancelPolicy, CancelPolicy.thrift_spec), None, ), # 11
  )

  def __init__(self, promotion_type=None, price_breaks=None, origin_price=None, room_code=None, coupon_code=None, breakfast_info_cn=None, breakfast_info_en=None, internet_cn=None, internet_en=None, cancel_policy=None,):
    self.promotion_type = promotion_type
    self.price_breaks = price_breaks
    self.origin_price = origin_price
    self.room_code = room_code
    self.coupon_code = coupon_code
    self.breakfast_info_cn = breakfast_info_cn
    self.breakfast_info_en = breakfast_info_en
    self.internet_cn = internet_cn
    self.internet_en = internet_en
    self.cancel_policy = cancel_policy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price_breaks = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.origin_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.room_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.coupon_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.breakfast_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.breakfast_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.internet_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.internet_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.cancel_policy = CancelPolicy()
          self.cancel_policy.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EanRoomPrice')
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 1)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.price_breaks is not None:
      oprot.writeFieldBegin('price_breaks', TType.I32, 2)
      oprot.writeI32(self.price_breaks)
      oprot.writeFieldEnd()
    if self.origin_price is not None:
      oprot.writeFieldBegin('origin_price', TType.I32, 3)
      oprot.writeI32(self.origin_price)
      oprot.writeFieldEnd()
    if self.room_code is not None:
      oprot.writeFieldBegin('room_code', TType.I32, 5)
      oprot.writeI32(self.room_code)
      oprot.writeFieldEnd()
    if self.coupon_code is not None:
      oprot.writeFieldBegin('coupon_code', TType.STRING, 6)
      oprot.writeString(self.coupon_code)
      oprot.writeFieldEnd()
    if self.breakfast_info_cn is not None:
      oprot.writeFieldBegin('breakfast_info_cn', TType.STRING, 7)
      oprot.writeString(self.breakfast_info_cn)
      oprot.writeFieldEnd()
    if self.breakfast_info_en is not None:
      oprot.writeFieldBegin('breakfast_info_en', TType.STRING, 8)
      oprot.writeString(self.breakfast_info_en)
      oprot.writeFieldEnd()
    if self.internet_cn is not None:
      oprot.writeFieldBegin('internet_cn', TType.STRING, 9)
      oprot.writeString(self.internet_cn)
      oprot.writeFieldEnd()
    if self.internet_en is not None:
      oprot.writeFieldBegin('internet_en', TType.STRING, 10)
      oprot.writeString(self.internet_en)
      oprot.writeFieldEnd()
    if self.cancel_policy is not None:
      oprot.writeFieldBegin('cancel_policy', TType.STRUCT, 11)
      self.cancel_policy.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.price_breaks)
    value = (value * 31) ^ hash(self.origin_price)
    value = (value * 31) ^ hash(self.room_code)
    value = (value * 31) ^ hash(self.coupon_code)
    value = (value * 31) ^ hash(self.breakfast_info_cn)
    value = (value * 31) ^ hash(self.breakfast_info_en)
    value = (value * 31) ^ hash(self.internet_cn)
    value = (value * 31) ^ hash(self.internet_en)
    value = (value * 31) ^ hash(self.cancel_policy)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderRoomDetailInc:
  """
  Attributes:
   - room_id
   - average_price
   - booking_status
   - product_id
   - ean_price
   - breakfast_info_cn
   - breakfast_info_en
   - internet_cn
   - internet_en
   - cancel_policy
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'room_id', None, None, ), # 1
    (2, TType.I32, 'average_price', None, None, ), # 2
    (3, TType.I32, 'booking_status', None, None, ), # 3
    (4, TType.I32, 'product_id', None, None, ), # 4
    None, # 5
    None, # 6
    (7, TType.STRUCT, 'ean_price', (EanRoomPrice, EanRoomPrice.thrift_spec), None, ), # 7
    (8, TType.STRING, 'breakfast_info_cn', None, None, ), # 8
    (9, TType.STRING, 'breakfast_info_en', None, None, ), # 9
    (10, TType.STRING, 'internet_cn', None, None, ), # 10
    (11, TType.STRING, 'internet_en', None, None, ), # 11
    (12, TType.STRUCT, 'cancel_policy', (CancelPolicy, CancelPolicy.thrift_spec), None, ), # 12
  )

  def __init__(self, room_id=None, average_price=None, booking_status=None, product_id=None, ean_price=None, breakfast_info_cn=None, breakfast_info_en=None, internet_cn=None, internet_en=None, cancel_policy=None,):
    self.room_id = room_id
    self.average_price = average_price
    self.booking_status = booking_status
    self.product_id = product_id
    self.ean_price = ean_price
    self.breakfast_info_cn = breakfast_info_cn
    self.breakfast_info_en = breakfast_info_en
    self.internet_cn = internet_cn
    self.internet_en = internet_en
    self.cancel_policy = cancel_policy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.room_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.average_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.booking_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.ean_price = EanRoomPrice()
          self.ean_price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.breakfast_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.breakfast_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.internet_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.internet_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.cancel_policy = CancelPolicy()
          self.cancel_policy.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderRoomDetailInc')
    if self.room_id is not None:
      oprot.writeFieldBegin('room_id', TType.I64, 1)
      oprot.writeI64(self.room_id)
      oprot.writeFieldEnd()
    if self.average_price is not None:
      oprot.writeFieldBegin('average_price', TType.I32, 2)
      oprot.writeI32(self.average_price)
      oprot.writeFieldEnd()
    if self.booking_status is not None:
      oprot.writeFieldBegin('booking_status', TType.I32, 3)
      oprot.writeI32(self.booking_status)
      oprot.writeFieldEnd()
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 4)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.ean_price is not None:
      oprot.writeFieldBegin('ean_price', TType.STRUCT, 7)
      self.ean_price.write(oprot)
      oprot.writeFieldEnd()
    if self.breakfast_info_cn is not None:
      oprot.writeFieldBegin('breakfast_info_cn', TType.STRING, 8)
      oprot.writeString(self.breakfast_info_cn)
      oprot.writeFieldEnd()
    if self.breakfast_info_en is not None:
      oprot.writeFieldBegin('breakfast_info_en', TType.STRING, 9)
      oprot.writeString(self.breakfast_info_en)
      oprot.writeFieldEnd()
    if self.internet_cn is not None:
      oprot.writeFieldBegin('internet_cn', TType.STRING, 10)
      oprot.writeString(self.internet_cn)
      oprot.writeFieldEnd()
    if self.internet_en is not None:
      oprot.writeFieldBegin('internet_en', TType.STRING, 11)
      oprot.writeString(self.internet_en)
      oprot.writeFieldEnd()
    if self.cancel_policy is not None:
      oprot.writeFieldBegin('cancel_policy', TType.STRUCT, 12)
      self.cancel_policy.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.room_id)
    value = (value * 31) ^ hash(self.average_price)
    value = (value * 31) ^ hash(self.booking_status)
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.ean_price)
    value = (value * 31) ^ hash(self.breakfast_info_cn)
    value = (value * 31) ^ hash(self.breakfast_info_en)
    value = (value * 31) ^ hash(self.internet_cn)
    value = (value * 31) ^ hash(self.internet_en)
    value = (value * 31) ^ hash(self.cancel_policy)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderDetailInc:
  """
  Attributes:
   - provider_id
   - booking_url
   - craw_status
   - provider_hotel_id
   - room_detail_inc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'provider_id', None, None, ), # 1
    (2, TType.STRING, 'booking_url', None, None, ), # 2
    (3, TType.I32, 'craw_status', None, None, ), # 3
    (4, TType.I32, 'provider_hotel_id', None, None, ), # 4
    (5, TType.LIST, 'room_detail_inc', (TType.STRUCT,(ProviderRoomDetailInc, ProviderRoomDetailInc.thrift_spec)), None, ), # 5
  )

  def __init__(self, provider_id=None, booking_url=None, craw_status=None, provider_hotel_id=None, room_detail_inc=None,):
    self.provider_id = provider_id
    self.booking_url = booking_url
    self.craw_status = craw_status
    self.provider_hotel_id = provider_hotel_id
    self.room_detail_inc = room_detail_inc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.provider_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.booking_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.craw_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.provider_hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.room_detail_inc = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = ProviderRoomDetailInc()
            _elem103.read(iprot)
            self.room_detail_inc.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderDetailInc')
    if self.provider_id is not None:
      oprot.writeFieldBegin('provider_id', TType.I32, 1)
      oprot.writeI32(self.provider_id)
      oprot.writeFieldEnd()
    if self.booking_url is not None:
      oprot.writeFieldBegin('booking_url', TType.STRING, 2)
      oprot.writeString(self.booking_url)
      oprot.writeFieldEnd()
    if self.craw_status is not None:
      oprot.writeFieldBegin('craw_status', TType.I32, 3)
      oprot.writeI32(self.craw_status)
      oprot.writeFieldEnd()
    if self.provider_hotel_id is not None:
      oprot.writeFieldBegin('provider_hotel_id', TType.I32, 4)
      oprot.writeI32(self.provider_hotel_id)
      oprot.writeFieldEnd()
    if self.room_detail_inc is not None:
      oprot.writeFieldBegin('room_detail_inc', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.room_detail_inc))
      for iter104 in self.room_detail_inc:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_id)
    value = (value * 31) ^ hash(self.booking_url)
    value = (value * 31) ^ hash(self.craw_status)
    value = (value * 31) ^ hash(self.provider_hotel_id)
    value = (value * 31) ^ hash(self.room_detail_inc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderRoomDetail:
  """
  Attributes:
   - room_id
   - booking_status
   - room_name_cn
   - room_name_en
   - bed_type_cn
   - bed_type_en
   - breakfast_info_cn
   - breakfast_info_en
   - internet_cn
   - internet_en
   - cancel_policy
   - average_price
   - room_area
   - floor_info_cn
   - floor_info_en
   - other_info_cn
   - other_info_en
   - picture
   - booking_url
   - ean_price
   - product_id
   - rp_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'room_id', None, None, ), # 1
    (2, TType.I32, 'booking_status', None, None, ), # 2
    (3, TType.STRING, 'room_name_cn', None, None, ), # 3
    (4, TType.STRING, 'room_name_en', None, None, ), # 4
    (5, TType.STRING, 'bed_type_cn', None, None, ), # 5
    (6, TType.STRING, 'bed_type_en', None, None, ), # 6
    (7, TType.STRING, 'breakfast_info_cn', None, None, ), # 7
    (8, TType.STRING, 'breakfast_info_en', None, None, ), # 8
    (9, TType.STRING, 'internet_cn', None, None, ), # 9
    (10, TType.STRING, 'internet_en', None, None, ), # 10
    (11, TType.STRUCT, 'cancel_policy', (CancelPolicy, CancelPolicy.thrift_spec), None, ), # 11
    (12, TType.I32, 'average_price', None, None, ), # 12
    None, # 13
    None, # 14
    (15, TType.I32, 'room_area', None, None, ), # 15
    None, # 16
    None, # 17
    (18, TType.STRING, 'floor_info_cn', None, None, ), # 18
    (19, TType.STRING, 'floor_info_en', None, None, ), # 19
    None, # 20
    (21, TType.STRING, 'other_info_cn', None, None, ), # 21
    (22, TType.STRING, 'other_info_en', None, None, ), # 22
    None, # 23
    None, # 24
    (25, TType.LIST, 'picture', (TType.STRUCT,(PictureList, PictureList.thrift_spec)), None, ), # 25
    (26, TType.STRING, 'booking_url', None, None, ), # 26
    (27, TType.STRUCT, 'ean_price', (EanRoomPrice, EanRoomPrice.thrift_spec), None, ), # 27
    (28, TType.I32, 'product_id', None, None, ), # 28
    (29, TType.STRUCT, 'rp_info', (RatePlan, RatePlan.thrift_spec), None, ), # 29
  )

  def __init__(self, room_id=None, booking_status=None, room_name_cn=None, room_name_en=None, bed_type_cn=None, bed_type_en=None, breakfast_info_cn=None, breakfast_info_en=None, internet_cn=None, internet_en=None, cancel_policy=None, average_price=None, room_area=None, floor_info_cn=None, floor_info_en=None, other_info_cn=None, other_info_en=None, picture=None, booking_url=None, ean_price=None, product_id=None, rp_info=None,):
    self.room_id = room_id
    self.booking_status = booking_status
    self.room_name_cn = room_name_cn
    self.room_name_en = room_name_en
    self.bed_type_cn = bed_type_cn
    self.bed_type_en = bed_type_en
    self.breakfast_info_cn = breakfast_info_cn
    self.breakfast_info_en = breakfast_info_en
    self.internet_cn = internet_cn
    self.internet_en = internet_en
    self.cancel_policy = cancel_policy
    self.average_price = average_price
    self.room_area = room_area
    self.floor_info_cn = floor_info_cn
    self.floor_info_en = floor_info_en
    self.other_info_cn = other_info_cn
    self.other_info_en = other_info_en
    self.picture = picture
    self.booking_url = booking_url
    self.ean_price = ean_price
    self.product_id = product_id
    self.rp_info = rp_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.room_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.booking_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.room_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.room_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bed_type_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bed_type_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.breakfast_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.breakfast_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.internet_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.internet_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.cancel_policy = CancelPolicy()
          self.cancel_policy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.average_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.room_area = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.floor_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.floor_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.other_info_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.other_info_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.picture = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = PictureList()
            _elem110.read(iprot)
            self.picture.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.booking_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRUCT:
          self.ean_price = EanRoomPrice()
          self.ean_price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.rp_info = RatePlan()
          self.rp_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderRoomDetail')
    if self.room_id is not None:
      oprot.writeFieldBegin('room_id', TType.I64, 1)
      oprot.writeI64(self.room_id)
      oprot.writeFieldEnd()
    if self.booking_status is not None:
      oprot.writeFieldBegin('booking_status', TType.I32, 2)
      oprot.writeI32(self.booking_status)
      oprot.writeFieldEnd()
    if self.room_name_cn is not None:
      oprot.writeFieldBegin('room_name_cn', TType.STRING, 3)
      oprot.writeString(self.room_name_cn)
      oprot.writeFieldEnd()
    if self.room_name_en is not None:
      oprot.writeFieldBegin('room_name_en', TType.STRING, 4)
      oprot.writeString(self.room_name_en)
      oprot.writeFieldEnd()
    if self.bed_type_cn is not None:
      oprot.writeFieldBegin('bed_type_cn', TType.STRING, 5)
      oprot.writeString(self.bed_type_cn)
      oprot.writeFieldEnd()
    if self.bed_type_en is not None:
      oprot.writeFieldBegin('bed_type_en', TType.STRING, 6)
      oprot.writeString(self.bed_type_en)
      oprot.writeFieldEnd()
    if self.breakfast_info_cn is not None:
      oprot.writeFieldBegin('breakfast_info_cn', TType.STRING, 7)
      oprot.writeString(self.breakfast_info_cn)
      oprot.writeFieldEnd()
    if self.breakfast_info_en is not None:
      oprot.writeFieldBegin('breakfast_info_en', TType.STRING, 8)
      oprot.writeString(self.breakfast_info_en)
      oprot.writeFieldEnd()
    if self.internet_cn is not None:
      oprot.writeFieldBegin('internet_cn', TType.STRING, 9)
      oprot.writeString(self.internet_cn)
      oprot.writeFieldEnd()
    if self.internet_en is not None:
      oprot.writeFieldBegin('internet_en', TType.STRING, 10)
      oprot.writeString(self.internet_en)
      oprot.writeFieldEnd()
    if self.cancel_policy is not None:
      oprot.writeFieldBegin('cancel_policy', TType.STRUCT, 11)
      self.cancel_policy.write(oprot)
      oprot.writeFieldEnd()
    if self.average_price is not None:
      oprot.writeFieldBegin('average_price', TType.I32, 12)
      oprot.writeI32(self.average_price)
      oprot.writeFieldEnd()
    if self.room_area is not None:
      oprot.writeFieldBegin('room_area', TType.I32, 15)
      oprot.writeI32(self.room_area)
      oprot.writeFieldEnd()
    if self.floor_info_cn is not None:
      oprot.writeFieldBegin('floor_info_cn', TType.STRING, 18)
      oprot.writeString(self.floor_info_cn)
      oprot.writeFieldEnd()
    if self.floor_info_en is not None:
      oprot.writeFieldBegin('floor_info_en', TType.STRING, 19)
      oprot.writeString(self.floor_info_en)
      oprot.writeFieldEnd()
    if self.other_info_cn is not None:
      oprot.writeFieldBegin('other_info_cn', TType.STRING, 21)
      oprot.writeString(self.other_info_cn)
      oprot.writeFieldEnd()
    if self.other_info_en is not None:
      oprot.writeFieldBegin('other_info_en', TType.STRING, 22)
      oprot.writeString(self.other_info_en)
      oprot.writeFieldEnd()
    if self.picture is not None:
      oprot.writeFieldBegin('picture', TType.LIST, 25)
      oprot.writeListBegin(TType.STRUCT, len(self.picture))
      for iter111 in self.picture:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_url is not None:
      oprot.writeFieldBegin('booking_url', TType.STRING, 26)
      oprot.writeString(self.booking_url)
      oprot.writeFieldEnd()
    if self.ean_price is not None:
      oprot.writeFieldBegin('ean_price', TType.STRUCT, 27)
      self.ean_price.write(oprot)
      oprot.writeFieldEnd()
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 28)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.rp_info is not None:
      oprot.writeFieldBegin('rp_info', TType.STRUCT, 29)
      self.rp_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.room_id)
    value = (value * 31) ^ hash(self.booking_status)
    value = (value * 31) ^ hash(self.room_name_cn)
    value = (value * 31) ^ hash(self.room_name_en)
    value = (value * 31) ^ hash(self.bed_type_cn)
    value = (value * 31) ^ hash(self.bed_type_en)
    value = (value * 31) ^ hash(self.breakfast_info_cn)
    value = (value * 31) ^ hash(self.breakfast_info_en)
    value = (value * 31) ^ hash(self.internet_cn)
    value = (value * 31) ^ hash(self.internet_en)
    value = (value * 31) ^ hash(self.cancel_policy)
    value = (value * 31) ^ hash(self.average_price)
    value = (value * 31) ^ hash(self.room_area)
    value = (value * 31) ^ hash(self.floor_info_cn)
    value = (value * 31) ^ hash(self.floor_info_en)
    value = (value * 31) ^ hash(self.other_info_cn)
    value = (value * 31) ^ hash(self.other_info_en)
    value = (value * 31) ^ hash(self.picture)
    value = (value * 31) ^ hash(self.booking_url)
    value = (value * 31) ^ hash(self.ean_price)
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.rp_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderDetail:
  """
  Attributes:
   - provider_brief
   - booking_url
   - provider_hotel_id
   - provider_room_info
   - ean_promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'provider_brief', (ProviderBrief, ProviderBrief.thrift_spec), None, ), # 1
    (2, TType.STRING, 'booking_url', None, None, ), # 2
    (3, TType.I32, 'provider_hotel_id', None, None, ), # 3
    (4, TType.LIST, 'provider_room_info', (TType.STRUCT,(ProviderRoomDetail, ProviderRoomDetail.thrift_spec)), None, ), # 4
    (5, TType.I32, 'ean_promotion_type', None,     3, ), # 5
  )

  def __init__(self, provider_brief=None, booking_url=None, provider_hotel_id=None, provider_room_info=None, ean_promotion_type=thrift_spec[5][4],):
    self.provider_brief = provider_brief
    self.booking_url = booking_url
    self.provider_hotel_id = provider_hotel_id
    self.provider_room_info = provider_room_info
    self.ean_promotion_type = ean_promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.provider_brief = ProviderBrief()
          self.provider_brief.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.booking_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.provider_hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.provider_room_info = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = ProviderRoomDetail()
            _elem117.read(iprot)
            self.provider_room_info.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.ean_promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderDetail')
    if self.provider_brief is not None:
      oprot.writeFieldBegin('provider_brief', TType.STRUCT, 1)
      self.provider_brief.write(oprot)
      oprot.writeFieldEnd()
    if self.booking_url is not None:
      oprot.writeFieldBegin('booking_url', TType.STRING, 2)
      oprot.writeString(self.booking_url)
      oprot.writeFieldEnd()
    if self.provider_hotel_id is not None:
      oprot.writeFieldBegin('provider_hotel_id', TType.I32, 3)
      oprot.writeI32(self.provider_hotel_id)
      oprot.writeFieldEnd()
    if self.provider_room_info is not None:
      oprot.writeFieldBegin('provider_room_info', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.provider_room_info))
      for iter118 in self.provider_room_info:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ean_promotion_type is not None:
      oprot.writeFieldBegin('ean_promotion_type', TType.I32, 5)
      oprot.writeI32(self.ean_promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_brief)
    value = (value * 31) ^ hash(self.booking_url)
    value = (value * 31) ^ hash(self.provider_hotel_id)
    value = (value * 31) ^ hash(self.provider_room_info)
    value = (value * 31) ^ hash(self.ean_promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProviderRtsPrice:
  """
  Attributes:
   - provider_id
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'provider_id', None, None, ), # 1
    (2, TType.I32, 'price', None, None, ), # 2
  )

  def __init__(self, provider_id=None, price=None,):
    self.provider_id = provider_id
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.provider_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProviderRtsPrice')
    if self.provider_id is not None:
      oprot.writeFieldBegin('provider_id', TType.I32, 1)
      oprot.writeI32(self.provider_id)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 2)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_id)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelRtsInfo:
  """
  Attributes:
   - hotel_id
   - craw_status
   - price
   - provider_price
   - booking_status
   - ean_promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'hotel_id', None, None, ), # 1
    (2, TType.I32, 'craw_status', None, None, ), # 2
    (3, TType.I32, 'price', None, None, ), # 3
    (4, TType.LIST, 'provider_price', (TType.STRUCT,(ProviderRtsPrice, ProviderRtsPrice.thrift_spec)), None, ), # 4
    (5, TType.I32, 'booking_status', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    (12, TType.I32, 'ean_promotion_type', None, None, ), # 12
  )

  def __init__(self, hotel_id=None, craw_status=None, price=None, provider_price=None, booking_status=None, ean_promotion_type=None,):
    self.hotel_id = hotel_id
    self.craw_status = craw_status
    self.price = price
    self.provider_price = provider_price
    self.booking_status = booking_status
    self.ean_promotion_type = ean_promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.craw_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.provider_price = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = ProviderRtsPrice()
            _elem124.read(iprot)
            self.provider_price.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.booking_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.ean_promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelRtsInfo')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 1)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.craw_status is not None:
      oprot.writeFieldBegin('craw_status', TType.I32, 2)
      oprot.writeI32(self.craw_status)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 3)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.provider_price is not None:
      oprot.writeFieldBegin('provider_price', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.provider_price))
      for iter125 in self.provider_price:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_status is not None:
      oprot.writeFieldBegin('booking_status', TType.I32, 5)
      oprot.writeI32(self.booking_status)
      oprot.writeFieldEnd()
    if self.ean_promotion_type is not None:
      oprot.writeFieldBegin('ean_promotion_type', TType.I32, 12)
      oprot.writeI32(self.ean_promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.craw_status)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.provider_price)
    value = (value * 31) ^ hash(self.booking_status)
    value = (value * 31) ^ hash(self.ean_promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotHotelInfo:
  """
  Attributes:
   - region_id
   - hotel_num
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.I32, 'hotel_num', None, None, ), # 2
    (3, TType.I32, 'price', None, None, ), # 3
  )

  def __init__(self, region_id=None, hotel_num=None, price=None,):
    self.region_id = region_id
    self.hotel_num = hotel_num
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotHotelInfo')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 2)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 3)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - user_ip
   - session_id
   - cookie_id
   - user_agent
   - account
   - card_number
   - level
   - reg_date
   - referer
   - idfa
   - appid
   - os
   - os_version
   - brand
   - model
   - carrier
   - channel
   - geo_info
   - session_flow_id
   - at_current_city
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_ip', None, None, ), # 1
    (2, TType.STRING, 'session_id', None, None, ), # 2
    (3, TType.STRING, 'cookie_id', None, None, ), # 3
    (4, TType.STRING, 'user_agent', None, None, ), # 4
    (5, TType.STRING, 'account', None, None, ), # 5
    (6, TType.STRING, 'card_number', None, None, ), # 6
    (7, TType.I32, 'level', None, None, ), # 7
    (8, TType.STRING, 'reg_date', None, None, ), # 8
    (9, TType.STRING, 'referer', None, None, ), # 9
    (10, TType.STRING, 'idfa', None, None, ), # 10
    (11, TType.STRING, 'appid', None, None, ), # 11
    (12, TType.STRING, 'os', None, None, ), # 12
    (13, TType.STRING, 'os_version', None, None, ), # 13
    (14, TType.STRING, 'brand', None, None, ), # 14
    (15, TType.STRING, 'model', None, None, ), # 15
    (16, TType.STRING, 'carrier', None, None, ), # 16
    (17, TType.STRING, 'channel', None, None, ), # 17
    (18, TType.STRUCT, 'geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 18
    (19, TType.STRING, 'session_flow_id', None, None, ), # 19
    (20, TType.BOOL, 'at_current_city', None, None, ), # 20
  )

  def __init__(self, user_ip=None, session_id=None, cookie_id=None, user_agent=None, account=None, card_number=None, level=None, reg_date=None, referer=None, idfa=None, appid=None, os=None, os_version=None, brand=None, model=None, carrier=None, channel=None, geo_info=None, session_flow_id=None, at_current_city=None,):
    self.user_ip = user_ip
    self.session_id = session_id
    self.cookie_id = cookie_id
    self.user_agent = user_agent
    self.account = account
    self.card_number = card_number
    self.level = level
    self.reg_date = reg_date
    self.referer = referer
    self.idfa = idfa
    self.appid = appid
    self.os = os
    self.os_version = os_version
    self.brand = brand
    self.model = model
    self.carrier = carrier
    self.channel = channel
    self.geo_info = geo_info
    self.session_flow_id = session_flow_id
    self.at_current_city = at_current_city

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.session_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cookie_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.account = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.card_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.reg_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.referer = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.idfa = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.os = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.os_version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.brand = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.model = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.carrier = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.channel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.geo_info = GeoInfo()
          self.geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.session_flow_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.at_current_city = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.user_ip is not None:
      oprot.writeFieldBegin('user_ip', TType.STRING, 1)
      oprot.writeString(self.user_ip)
      oprot.writeFieldEnd()
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.STRING, 2)
      oprot.writeString(self.session_id)
      oprot.writeFieldEnd()
    if self.cookie_id is not None:
      oprot.writeFieldBegin('cookie_id', TType.STRING, 3)
      oprot.writeString(self.cookie_id)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 4)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.account is not None:
      oprot.writeFieldBegin('account', TType.STRING, 5)
      oprot.writeString(self.account)
      oprot.writeFieldEnd()
    if self.card_number is not None:
      oprot.writeFieldBegin('card_number', TType.STRING, 6)
      oprot.writeString(self.card_number)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 7)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.reg_date is not None:
      oprot.writeFieldBegin('reg_date', TType.STRING, 8)
      oprot.writeString(self.reg_date)
      oprot.writeFieldEnd()
    if self.referer is not None:
      oprot.writeFieldBegin('referer', TType.STRING, 9)
      oprot.writeString(self.referer)
      oprot.writeFieldEnd()
    if self.idfa is not None:
      oprot.writeFieldBegin('idfa', TType.STRING, 10)
      oprot.writeString(self.idfa)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 11)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.os is not None:
      oprot.writeFieldBegin('os', TType.STRING, 12)
      oprot.writeString(self.os)
      oprot.writeFieldEnd()
    if self.os_version is not None:
      oprot.writeFieldBegin('os_version', TType.STRING, 13)
      oprot.writeString(self.os_version)
      oprot.writeFieldEnd()
    if self.brand is not None:
      oprot.writeFieldBegin('brand', TType.STRING, 14)
      oprot.writeString(self.brand)
      oprot.writeFieldEnd()
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRING, 15)
      oprot.writeString(self.model)
      oprot.writeFieldEnd()
    if self.carrier is not None:
      oprot.writeFieldBegin('carrier', TType.STRING, 16)
      oprot.writeString(self.carrier)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 17)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.geo_info is not None:
      oprot.writeFieldBegin('geo_info', TType.STRUCT, 18)
      self.geo_info.write(oprot)
      oprot.writeFieldEnd()
    if self.session_flow_id is not None:
      oprot.writeFieldBegin('session_flow_id', TType.STRING, 19)
      oprot.writeString(self.session_flow_id)
      oprot.writeFieldEnd()
    if self.at_current_city is not None:
      oprot.writeFieldBegin('at_current_city', TType.BOOL, 20)
      oprot.writeBool(self.at_current_city)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_ip)
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.cookie_id)
    value = (value * 31) ^ hash(self.user_agent)
    value = (value * 31) ^ hash(self.account)
    value = (value * 31) ^ hash(self.card_number)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.reg_date)
    value = (value * 31) ^ hash(self.referer)
    value = (value * 31) ^ hash(self.idfa)
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.os)
    value = (value * 31) ^ hash(self.os_version)
    value = (value * 31) ^ hash(self.brand)
    value = (value * 31) ^ hash(self.model)
    value = (value * 31) ^ hash(self.carrier)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.geo_info)
    value = (value * 31) ^ hash(self.session_flow_id)
    value = (value * 31) ^ hash(self.at_current_city)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomInfo:
  """
  Attributes:
   - adult_num
   - children_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'adult_num', None, None, ), # 1
    (2, TType.I16, 'children_num', None, None, ), # 2
  )

  def __init__(self, adult_num=None, children_num=None,):
    self.adult_num = adult_num
    self.children_num = children_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.adult_num = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.children_num = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomInfo')
    if self.adult_num is not None:
      oprot.writeFieldBegin('adult_num', TType.I16, 1)
      oprot.writeI16(self.adult_num)
      oprot.writeFieldEnd()
    if self.children_num is not None:
      oprot.writeFieldBegin('children_num', TType.I16, 2)
      oprot.writeI16(self.children_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.adult_num)
    value = (value * 31) ^ hash(self.children_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReturnAttribute:
  """
  Attributes:
   - return_hotel_id_only
   - return_products
   - return_hotel_static_info
   - return_rateplan_info
   - return_static_info_level
   - return_fast_filter_info
   - return_new_recall_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'return_hotel_id_only', None, None, ), # 1
    (2, TType.BOOL, 'return_products', None, None, ), # 2
    (3, TType.BOOL, 'return_hotel_static_info', None, None, ), # 3
    (4, TType.BOOL, 'return_rateplan_info', None, None, ), # 4
    (5, TType.I32, 'return_static_info_level', None, None, ), # 5
    (6, TType.BOOL, 'return_fast_filter_info', None, None, ), # 6
    None, # 7
    (8, TType.BOOL, 'return_new_recall_info', None, None, ), # 8
  )

  def __init__(self, return_hotel_id_only=None, return_products=None, return_hotel_static_info=None, return_rateplan_info=None, return_static_info_level=None, return_fast_filter_info=None, return_new_recall_info=None,):
    self.return_hotel_id_only = return_hotel_id_only
    self.return_products = return_products
    self.return_hotel_static_info = return_hotel_static_info
    self.return_rateplan_info = return_rateplan_info
    self.return_static_info_level = return_static_info_level
    self.return_fast_filter_info = return_fast_filter_info
    self.return_new_recall_info = return_new_recall_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.return_hotel_id_only = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.return_products = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.return_hotel_static_info = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.return_rateplan_info = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.return_static_info_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.return_fast_filter_info = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.return_new_recall_info = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReturnAttribute')
    if self.return_hotel_id_only is not None:
      oprot.writeFieldBegin('return_hotel_id_only', TType.BOOL, 1)
      oprot.writeBool(self.return_hotel_id_only)
      oprot.writeFieldEnd()
    if self.return_products is not None:
      oprot.writeFieldBegin('return_products', TType.BOOL, 2)
      oprot.writeBool(self.return_products)
      oprot.writeFieldEnd()
    if self.return_hotel_static_info is not None:
      oprot.writeFieldBegin('return_hotel_static_info', TType.BOOL, 3)
      oprot.writeBool(self.return_hotel_static_info)
      oprot.writeFieldEnd()
    if self.return_rateplan_info is not None:
      oprot.writeFieldBegin('return_rateplan_info', TType.BOOL, 4)
      oprot.writeBool(self.return_rateplan_info)
      oprot.writeFieldEnd()
    if self.return_static_info_level is not None:
      oprot.writeFieldBegin('return_static_info_level', TType.I32, 5)
      oprot.writeI32(self.return_static_info_level)
      oprot.writeFieldEnd()
    if self.return_fast_filter_info is not None:
      oprot.writeFieldBegin('return_fast_filter_info', TType.BOOL, 6)
      oprot.writeBool(self.return_fast_filter_info)
      oprot.writeFieldEnd()
    if self.return_new_recall_info is not None:
      oprot.writeFieldBegin('return_new_recall_info', TType.BOOL, 8)
      oprot.writeBool(self.return_new_recall_info)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.return_hotel_id_only)
    value = (value * 31) ^ hash(self.return_products)
    value = (value * 31) ^ hash(self.return_hotel_static_info)
    value = (value * 31) ^ hash(self.return_rateplan_info)
    value = (value * 31) ^ hash(self.return_static_info_level)
    value = (value * 31) ^ hash(self.return_fast_filter_info)
    value = (value * 31) ^ hash(self.return_new_recall_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionDescription:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionDescription')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionTypeMsg:
  """
  Attributes:
   - id
   - is_effective_price
   - priority_level
   - is_special
   - promotion_cities
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.BOOL, 'is_effective_price', None, None, ), # 2
    (3, TType.I32, 'priority_level', None, None, ), # 3
    (4, TType.I32, 'is_special', None, None, ), # 4
    (5, TType.MAP, 'promotion_cities', (TType.I32,None,TType.I32,None), None, ), # 5
  )

  def __init__(self, id=None, is_effective_price=None, priority_level=None, is_special=None, promotion_cities=None,):
    self.id = id
    self.is_effective_price = is_effective_price
    self.priority_level = priority_level
    self.is_special = is_special
    self.promotion_cities = promotion_cities

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_effective_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priority_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.is_special = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.promotion_cities = {}
          (_ktype127, _vtype128, _size126 ) = iprot.readMapBegin()
          for _i130 in xrange(_size126):
            _key131 = iprot.readI32()
            _val132 = iprot.readI32()
            self.promotion_cities[_key131] = _val132
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionTypeMsg')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.is_effective_price is not None:
      oprot.writeFieldBegin('is_effective_price', TType.BOOL, 2)
      oprot.writeBool(self.is_effective_price)
      oprot.writeFieldEnd()
    if self.priority_level is not None:
      oprot.writeFieldBegin('priority_level', TType.I32, 3)
      oprot.writeI32(self.priority_level)
      oprot.writeFieldEnd()
    if self.is_special is not None:
      oprot.writeFieldBegin('is_special', TType.I32, 4)
      oprot.writeI32(self.is_special)
      oprot.writeFieldEnd()
    if self.promotion_cities is not None:
      oprot.writeFieldBegin('promotion_cities', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.promotion_cities))
      for kiter133,viter134 in self.promotion_cities.items():
        oprot.writeI32(kiter133)
        oprot.writeI32(viter134)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.is_effective_price is None:
      raise TProtocol.TProtocolException(message='Required field is_effective_price is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.is_effective_price)
    value = (value * 31) ^ hash(self.priority_level)
    value = (value * 31) ^ hash(self.is_special)
    value = (value * 31) ^ hash(self.promotion_cities)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupRelation:
  """
  Attributes:
   - group_id
   - type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.LIST, 'type_list', (TType.STRUCT,(PromotionTypeMsg, PromotionTypeMsg.thrift_spec)), None, ), # 2
  )

  def __init__(self, group_id=None, type_list=None,):
    self.group_id = group_id
    self.type_list = type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype138, _size135) = iprot.readListBegin()
          for _i139 in xrange(_size135):
            _elem140 = PromotionTypeMsg()
            _elem140.read(iprot)
            self.type_list.append(_elem140)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupRelation')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.type_list))
      for iter141 in self.type_list:
        iter141.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.type_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupType:
  """
  Attributes:
   - group_type_type
   - promotion_group_relation
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_type_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_group_relation', (TType.STRUCT,(PromotionGroupRelation, PromotionGroupRelation.thrift_spec)), None, ), # 2
  )

  def __init__(self, group_type_type=None, promotion_group_relation=None,):
    self.group_type_type = group_type_type
    self.promotion_group_relation = promotion_group_relation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_type_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_group_relation = []
          (_etype145, _size142) = iprot.readListBegin()
          for _i146 in xrange(_size142):
            _elem147 = PromotionGroupRelation()
            _elem147.read(iprot)
            self.promotion_group_relation.append(_elem147)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupType')
    if self.group_type_type is not None:
      oprot.writeFieldBegin('group_type_type', TType.I32, 1)
      oprot.writeI32(self.group_type_type)
      oprot.writeFieldEnd()
    if self.promotion_group_relation is not None:
      oprot.writeFieldBegin('promotion_group_relation', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group_relation))
      for iter148 in self.promotion_group_relation:
        iter148.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_type_type is None:
      raise TProtocol.TProtocolException(message='Required field group_type_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_type_type)
    value = (value * 31) ^ hash(self.promotion_group_relation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionBusiness:
  """
  Attributes:
   - business_type
   - promotion_group_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'business_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_group_type', (TType.STRUCT,(PromotionGroupType, PromotionGroupType.thrift_spec)), None, ), # 2
  )

  def __init__(self, business_type=None, promotion_group_type=None,):
    self.business_type = business_type
    self.promotion_group_type = promotion_group_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.business_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_group_type = []
          (_etype152, _size149) = iprot.readListBegin()
          for _i153 in xrange(_size149):
            _elem154 = PromotionGroupType()
            _elem154.read(iprot)
            self.promotion_group_type.append(_elem154)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionBusiness')
    if self.business_type is not None:
      oprot.writeFieldBegin('business_type', TType.I32, 1)
      oprot.writeI32(self.business_type)
      oprot.writeFieldEnd()
    if self.promotion_group_type is not None:
      oprot.writeFieldBegin('promotion_group_type', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_group_type))
      for iter155 in self.promotion_group_type:
        iter155.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.business_type is None:
      raise TProtocol.TProtocolException(message='Required field business_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.business_type)
    value = (value * 31) ^ hash(self.promotion_group_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionCount:
  """
  Attributes:
   - promotion_type
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'promotion_type', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, promotion_type=None, count=None,):
    self.promotion_type = promotion_type
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionCount')
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 1)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionOrderFromLine:
  """
  Attributes:
   - order_from_type
   - promotion_business
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'order_from_type', None, None, ), # 1
    (2, TType.LIST, 'promotion_business', (TType.STRUCT,(PromotionBusiness, PromotionBusiness.thrift_spec)), None, ), # 2
  )

  def __init__(self, order_from_type=None, promotion_business=None,):
    self.order_from_type = order_from_type
    self.promotion_business = promotion_business

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.order_from_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_business = []
          (_etype159, _size156) = iprot.readListBegin()
          for _i160 in xrange(_size156):
            _elem161 = PromotionBusiness()
            _elem161.read(iprot)
            self.promotion_business.append(_elem161)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionOrderFromLine')
    if self.order_from_type is not None:
      oprot.writeFieldBegin('order_from_type', TType.I32, 1)
      oprot.writeI32(self.order_from_type)
      oprot.writeFieldEnd()
    if self.promotion_business is not None:
      oprot.writeFieldBegin('promotion_business', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_business))
      for iter162 in self.promotion_business:
        iter162.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.order_from_type is None:
      raise TProtocol.TProtocolException(message='Required field order_from_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_from_type)
    value = (value * 31) ^ hash(self.promotion_business)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroupRoot:
  """
  Attributes:
   - promotion_order_from_line
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'promotion_order_from_line', (TType.STRUCT,(PromotionOrderFromLine, PromotionOrderFromLine.thrift_spec)), None, ), # 1
  )

  def __init__(self, promotion_order_from_line=None,):
    self.promotion_order_from_line = promotion_order_from_line

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.promotion_order_from_line = []
          (_etype166, _size163) = iprot.readListBegin()
          for _i167 in xrange(_size163):
            _elem168 = PromotionOrderFromLine()
            _elem168.read(iprot)
            self.promotion_order_from_line.append(_elem168)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroupRoot')
    if self.promotion_order_from_line is not None:
      oprot.writeFieldBegin('promotion_order_from_line', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_order_from_line))
      for iter169 in self.promotion_order_from_line:
        iter169.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_order_from_line)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommonConf:
  """
  Attributes:
   - promotion_group_root
   - wechat_for_new_user_promotion_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'promotion_group_root', (PromotionGroupRoot, PromotionGroupRoot.thrift_spec), None, ), # 1
    (2, TType.LIST, 'wechat_for_new_user_promotion_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, promotion_group_root=None, wechat_for_new_user_promotion_ids=None,):
    self.promotion_group_root = promotion_group_root
    self.wechat_for_new_user_promotion_ids = wechat_for_new_user_promotion_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.promotion_group_root = PromotionGroupRoot()
          self.promotion_group_root.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.wechat_for_new_user_promotion_ids = []
          (_etype173, _size170) = iprot.readListBegin()
          for _i174 in xrange(_size170):
            _elem175 = iprot.readI32()
            self.wechat_for_new_user_promotion_ids.append(_elem175)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommonConf')
    if self.promotion_group_root is not None:
      oprot.writeFieldBegin('promotion_group_root', TType.STRUCT, 1)
      self.promotion_group_root.write(oprot)
      oprot.writeFieldEnd()
    if self.wechat_for_new_user_promotion_ids is not None:
      oprot.writeFieldBegin('wechat_for_new_user_promotion_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.wechat_for_new_user_promotion_ids))
      for iter176 in self.wechat_for_new_user_promotion_ids:
        oprot.writeI32(iter176)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.promotion_group_root is None:
      raise TProtocol.TProtocolException(message='Required field promotion_group_root is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.promotion_group_root)
    value = (value * 31) ^ hash(self.wechat_for_new_user_promotion_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugPromotion:
  """
  Attributes:
   - date
   - promotion_id
   - promotion_type
   - use_ok
   - reason
   - upperlimit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'promotion_id', None, None, ), # 2
    (3, TType.I32, 'promotion_type', None, None, ), # 3
    (4, TType.BOOL, 'use_ok', None, None, ), # 4
    (5, TType.STRING, 'reason', None, None, ), # 5
    (6, TType.I32, 'upperlimit', None, None, ), # 6
  )

  def __init__(self, date=None, promotion_id=None, promotion_type=None, use_ok=None, reason=None, upperlimit=None,):
    self.date = date
    self.promotion_id = promotion_id
    self.promotion_type = promotion_type
    self.use_ok = use_ok
    self.reason = reason
    self.upperlimit = upperlimit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.use_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.upperlimit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugPromotion')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.promotion_id is not None:
      oprot.writeFieldBegin('promotion_id', TType.I32, 2)
      oprot.writeI32(self.promotion_id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 3)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.use_ok is not None:
      oprot.writeFieldBegin('use_ok', TType.BOOL, 4)
      oprot.writeBool(self.use_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 5)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.upperlimit is not None:
      oprot.writeFieldBegin('upperlimit', TType.I32, 6)
      oprot.writeI32(self.upperlimit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.promotion_id is None:
      raise TProtocol.TProtocolException(message='Required field promotion_id is unset!')
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    if self.use_ok is None:
      raise TProtocol.TProtocolException(message='Required field use_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.promotion_id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.use_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.upperlimit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugDrr:
  """
  Attributes:
   - type
   - drrnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.DOUBLE, 'drrnum', None, None, ), # 2
  )

  def __init__(self, type=None, drrnum=None,):
    self.type = type
    self.drrnum = drrnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.drrnum = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugDrr')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.drrnum is not None:
      oprot.writeFieldBegin('drrnum', TType.DOUBLE, 2)
      oprot.writeDouble(self.drrnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.drrnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugPrice:
  """
  Attributes:
   - date
   - status
   - add_bed_price
   - currency
   - gen_sale_cost
   - gen_sale_price
   - is_add_bed
   - is_hotel_weekend
   - is_price_promotion
   - real_cost
   - sale_cost
   - sale_price
   - sale_price_with_drr
   - weekend_sale_cost
   - weekend_sale_price
   - weekend_price_origin
   - general_price_origin
   - sale_price_with_drr_origin
   - add_bed_price_origin
   - sale_price_with_drr_sub_coupon
   - used_promotion
   - used_drr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I32, 'add_bed_price', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.DOUBLE, 'gen_sale_cost', None, None, ), # 5
    (6, TType.DOUBLE, 'gen_sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_add_bed', None, None, ), # 7
    (8, TType.BOOL, 'is_hotel_weekend', None, None, ), # 8
    (9, TType.BOOL, 'is_price_promotion', None, None, ), # 9
    (10, TType.DOUBLE, 'real_cost', None, None, ), # 10
    (11, TType.DOUBLE, 'sale_cost', None, None, ), # 11
    (12, TType.DOUBLE, 'sale_price', None, None, ), # 12
    (13, TType.DOUBLE, 'sale_price_with_drr', None, None, ), # 13
    (14, TType.DOUBLE, 'weekend_sale_cost', None, None, ), # 14
    (15, TType.DOUBLE, 'weekend_sale_price', None, None, ), # 15
    (16, TType.DOUBLE, 'weekend_price_origin', None, None, ), # 16
    (17, TType.DOUBLE, 'general_price_origin', None, None, ), # 17
    (18, TType.DOUBLE, 'sale_price_with_drr_origin', None, None, ), # 18
    (19, TType.DOUBLE, 'add_bed_price_origin', None, None, ), # 19
    (20, TType.DOUBLE, 'sale_price_with_drr_sub_coupon', None, None, ), # 20
    (21, TType.STRUCT, 'used_promotion', (DebugPromotion, DebugPromotion.thrift_spec), None, ), # 21
    (22, TType.DOUBLE, 'used_drr', None, None, ), # 22
  )

  def __init__(self, date=None, status=None, add_bed_price=None, currency=None, gen_sale_cost=None, gen_sale_price=None, is_add_bed=None, is_hotel_weekend=None, is_price_promotion=None, real_cost=None, sale_cost=None, sale_price=None, sale_price_with_drr=None, weekend_sale_cost=None, weekend_sale_price=None, weekend_price_origin=None, general_price_origin=None, sale_price_with_drr_origin=None, add_bed_price_origin=None, sale_price_with_drr_sub_coupon=None, used_promotion=None, used_drr=None,):
    self.date = date
    self.status = status
    self.add_bed_price = add_bed_price
    self.currency = currency
    self.gen_sale_cost = gen_sale_cost
    self.gen_sale_price = gen_sale_price
    self.is_add_bed = is_add_bed
    self.is_hotel_weekend = is_hotel_weekend
    self.is_price_promotion = is_price_promotion
    self.real_cost = real_cost
    self.sale_cost = sale_cost
    self.sale_price = sale_price
    self.sale_price_with_drr = sale_price_with_drr
    self.weekend_sale_cost = weekend_sale_cost
    self.weekend_sale_price = weekend_sale_price
    self.weekend_price_origin = weekend_price_origin
    self.general_price_origin = general_price_origin
    self.sale_price_with_drr_origin = sale_price_with_drr_origin
    self.add_bed_price_origin = add_bed_price_origin
    self.sale_price_with_drr_sub_coupon = sale_price_with_drr_sub_coupon
    self.used_promotion = used_promotion
    self.used_drr = used_drr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.add_bed_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.gen_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.gen_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_add_bed = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hotel_weekend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_price_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.real_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.weekend_sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.weekend_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.weekend_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.general_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.add_bed_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_sub_coupon = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.used_promotion = DebugPromotion()
          self.used_promotion.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.used_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugPrice')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.add_bed_price is not None:
      oprot.writeFieldBegin('add_bed_price', TType.I32, 3)
      oprot.writeI32(self.add_bed_price)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.gen_sale_cost is not None:
      oprot.writeFieldBegin('gen_sale_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.gen_sale_cost)
      oprot.writeFieldEnd()
    if self.gen_sale_price is not None:
      oprot.writeFieldBegin('gen_sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.gen_sale_price)
      oprot.writeFieldEnd()
    if self.is_add_bed is not None:
      oprot.writeFieldBegin('is_add_bed', TType.BOOL, 7)
      oprot.writeBool(self.is_add_bed)
      oprot.writeFieldEnd()
    if self.is_hotel_weekend is not None:
      oprot.writeFieldBegin('is_hotel_weekend', TType.BOOL, 8)
      oprot.writeBool(self.is_hotel_weekend)
      oprot.writeFieldEnd()
    if self.is_price_promotion is not None:
      oprot.writeFieldBegin('is_price_promotion', TType.BOOL, 9)
      oprot.writeBool(self.is_price_promotion)
      oprot.writeFieldEnd()
    if self.real_cost is not None:
      oprot.writeFieldBegin('real_cost', TType.DOUBLE, 10)
      oprot.writeDouble(self.real_cost)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 11)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 12)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr is not None:
      oprot.writeFieldBegin('sale_price_with_drr', TType.DOUBLE, 13)
      oprot.writeDouble(self.sale_price_with_drr)
      oprot.writeFieldEnd()
    if self.weekend_sale_cost is not None:
      oprot.writeFieldBegin('weekend_sale_cost', TType.DOUBLE, 14)
      oprot.writeDouble(self.weekend_sale_cost)
      oprot.writeFieldEnd()
    if self.weekend_sale_price is not None:
      oprot.writeFieldBegin('weekend_sale_price', TType.DOUBLE, 15)
      oprot.writeDouble(self.weekend_sale_price)
      oprot.writeFieldEnd()
    if self.weekend_price_origin is not None:
      oprot.writeFieldBegin('weekend_price_origin', TType.DOUBLE, 16)
      oprot.writeDouble(self.weekend_price_origin)
      oprot.writeFieldEnd()
    if self.general_price_origin is not None:
      oprot.writeFieldBegin('general_price_origin', TType.DOUBLE, 17)
      oprot.writeDouble(self.general_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin', TType.DOUBLE, 18)
      oprot.writeDouble(self.sale_price_with_drr_origin)
      oprot.writeFieldEnd()
    if self.add_bed_price_origin is not None:
      oprot.writeFieldBegin('add_bed_price_origin', TType.DOUBLE, 19)
      oprot.writeDouble(self.add_bed_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_sub_coupon is not None:
      oprot.writeFieldBegin('sale_price_with_drr_sub_coupon', TType.DOUBLE, 20)
      oprot.writeDouble(self.sale_price_with_drr_sub_coupon)
      oprot.writeFieldEnd()
    if self.used_promotion is not None:
      oprot.writeFieldBegin('used_promotion', TType.STRUCT, 21)
      self.used_promotion.write(oprot)
      oprot.writeFieldEnd()
    if self.used_drr is not None:
      oprot.writeFieldBegin('used_drr', TType.DOUBLE, 22)
      oprot.writeDouble(self.used_drr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.add_bed_price)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.gen_sale_cost)
    value = (value * 31) ^ hash(self.gen_sale_price)
    value = (value * 31) ^ hash(self.is_add_bed)
    value = (value * 31) ^ hash(self.is_hotel_weekend)
    value = (value * 31) ^ hash(self.is_price_promotion)
    value = (value * 31) ^ hash(self.real_cost)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.sale_price_with_drr)
    value = (value * 31) ^ hash(self.weekend_sale_cost)
    value = (value * 31) ^ hash(self.weekend_sale_price)
    value = (value * 31) ^ hash(self.weekend_price_origin)
    value = (value * 31) ^ hash(self.general_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin)
    value = (value * 31) ^ hash(self.add_bed_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_sub_coupon)
    value = (value * 31) ^ hash(self.used_promotion)
    value = (value * 31) ^ hash(self.used_drr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugProduct:
  """
  Attributes:
   - product_id
   - rp_id
   - mroom_id
   - mroom_name
   - shotel_id
   - sroom_id
   - rp_name
   - return_ok
   - reason
   - promotion_all
   - drr
   - promotion
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_id', None, None, ), # 1
    (2, TType.I32, 'rp_id', None, None, ), # 2
    (3, TType.I32, 'mroom_id', None, None, ), # 3
    (4, TType.STRING, 'mroom_name', None, None, ), # 4
    (5, TType.I32, 'shotel_id', None, None, ), # 5
    (6, TType.I32, 'sroom_id', None, None, ), # 6
    (7, TType.STRING, 'rp_name', None, None, ), # 7
    (8, TType.BOOL, 'return_ok', None, None, ), # 8
    (9, TType.STRING, 'reason', None, None, ), # 9
    (10, TType.STRING, 'promotion_all', None, None, ), # 10
    (11, TType.LIST, 'drr', (TType.STRUCT,(DebugDrr, DebugDrr.thrift_spec)), None, ), # 11
    (12, TType.LIST, 'promotion', (TType.STRUCT,(DebugPromotion, DebugPromotion.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'price', (TType.STRUCT,(DebugPrice, DebugPrice.thrift_spec)), None, ), # 13
  )

  def __init__(self, product_id=None, rp_id=None, mroom_id=None, mroom_name=None, shotel_id=None, sroom_id=None, rp_name=None, return_ok=None, reason=None, promotion_all=None, drr=None, promotion=None, price=None,):
    self.product_id = product_id
    self.rp_id = rp_id
    self.mroom_id = mroom_id
    self.mroom_name = mroom_name
    self.shotel_id = shotel_id
    self.sroom_id = sroom_id
    self.rp_name = rp_name
    self.return_ok = return_ok
    self.reason = reason
    self.promotion_all = promotion_all
    self.drr = drr
    self.promotion = promotion
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.rp_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.promotion_all = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.drr = []
          (_etype180, _size177) = iprot.readListBegin()
          for _i181 in xrange(_size177):
            _elem182 = DebugDrr()
            _elem182.read(iprot)
            self.drr.append(_elem182)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.promotion = []
          (_etype186, _size183) = iprot.readListBegin()
          for _i187 in xrange(_size183):
            _elem188 = DebugPromotion()
            _elem188.read(iprot)
            self.promotion.append(_elem188)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.price = []
          (_etype192, _size189) = iprot.readListBegin()
          for _i193 in xrange(_size189):
            _elem194 = DebugPrice()
            _elem194.read(iprot)
            self.price.append(_elem194)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugProduct')
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 1)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 2)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 3)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 4)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 5)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 6)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_name is not None:
      oprot.writeFieldBegin('rp_name', TType.STRING, 7)
      oprot.writeString(self.rp_name)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 8)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 9)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.promotion_all is not None:
      oprot.writeFieldBegin('promotion_all', TType.STRING, 10)
      oprot.writeString(self.promotion_all)
      oprot.writeFieldEnd()
    if self.drr is not None:
      oprot.writeFieldBegin('drr', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.drr))
      for iter195 in self.drr:
        iter195.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion is not None:
      oprot.writeFieldBegin('promotion', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion))
      for iter196 in self.promotion:
        iter196.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.price))
      for iter197 in self.price:
        iter197.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.product_id is None:
      raise TProtocol.TProtocolException(message='Required field product_id is unset!')
    if self.rp_id is None:
      raise TProtocol.TProtocolException(message='Required field rp_id is unset!')
    if self.mroom_id is None:
      raise TProtocol.TProtocolException(message='Required field mroom_id is unset!')
    if self.mroom_name is None:
      raise TProtocol.TProtocolException(message='Required field mroom_name is unset!')
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.rp_name is None:
      raise TProtocol.TProtocolException(message='Required field rp_name is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_name)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.promotion_all)
    value = (value * 31) ^ hash(self.drr)
    value = (value * 31) ^ hash(self.promotion)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugSRoom:
  """
  Attributes:
   - sroom_id
   - return_ok
   - reason
   - product
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sroom_id', None, None, ), # 1
    (2, TType.BOOL, 'return_ok', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.LIST, 'product', (TType.STRUCT,(DebugProduct, DebugProduct.thrift_spec)), None, ), # 4
  )

  def __init__(self, sroom_id=None, return_ok=None, reason=None, product=None,):
    self.sroom_id = sroom_id
    self.return_ok = return_ok
    self.reason = reason
    self.product = product

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.product = []
          (_etype201, _size198) = iprot.readListBegin()
          for _i202 in xrange(_size198):
            _elem203 = DebugProduct()
            _elem203.read(iprot)
            self.product.append(_elem203)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugSRoom')
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 1)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 2)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.product is not None:
      oprot.writeFieldBegin('product', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.product))
      for iter204 in self.product:
        iter204.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sroom_id is None:
      raise TProtocol.TProtocolException(message='Required field sroom_id is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.product)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugSHotel:
  """
  Attributes:
   - shotel_id
   - return_ok
   - reason
   - promotion_all
   - sroom
   - promotion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shotel_id', None, None, ), # 1
    (2, TType.BOOL, 'return_ok', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.STRING, 'promotion_all', None, None, ), # 4
    (5, TType.LIST, 'sroom', (TType.STRUCT,(DebugSRoom, DebugSRoom.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'promotion', (TType.STRUCT,(DebugPromotion, DebugPromotion.thrift_spec)), None, ), # 6
  )

  def __init__(self, shotel_id=None, return_ok=None, reason=None, promotion_all=None, sroom=None, promotion=None,):
    self.shotel_id = shotel_id
    self.return_ok = return_ok
    self.reason = reason
    self.promotion_all = promotion_all
    self.sroom = sroom
    self.promotion = promotion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.return_ok = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.promotion_all = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.sroom = []
          (_etype208, _size205) = iprot.readListBegin()
          for _i209 in xrange(_size205):
            _elem210 = DebugSRoom()
            _elem210.read(iprot)
            self.sroom.append(_elem210)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.promotion = []
          (_etype214, _size211) = iprot.readListBegin()
          for _i215 in xrange(_size211):
            _elem216 = DebugPromotion()
            _elem216.read(iprot)
            self.promotion.append(_elem216)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugSHotel')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 1)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.return_ok is not None:
      oprot.writeFieldBegin('return_ok', TType.BOOL, 2)
      oprot.writeBool(self.return_ok)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.promotion_all is not None:
      oprot.writeFieldBegin('promotion_all', TType.STRING, 4)
      oprot.writeString(self.promotion_all)
      oprot.writeFieldEnd()
    if self.sroom is not None:
      oprot.writeFieldBegin('sroom', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.sroom))
      for iter217 in self.sroom:
        iter217.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion is not None:
      oprot.writeFieldBegin('promotion', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion))
      for iter218 in self.promotion:
        iter218.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.shotel_id is None:
      raise TProtocol.TProtocolException(message='Required field shotel_id is unset!')
    if self.return_ok is None:
      raise TProtocol.TProtocolException(message='Required field return_ok is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.return_ok)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.promotion_all)
    value = (value * 31) ^ hash(self.sroom)
    value = (value * 31) ^ hash(self.promotion)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugMHotel:
  """
  Attributes:
   - mhotel_id
   - shotel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.LIST, 'shotel', (TType.STRUCT,(DebugSHotel, DebugSHotel.thrift_spec)), None, ), # 2
  )

  def __init__(self, mhotel_id=None, shotel=None,):
    self.mhotel_id = mhotel_id
    self.shotel = shotel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shotel = []
          (_etype222, _size219) = iprot.readListBegin()
          for _i223 in xrange(_size219):
            _elem224 = DebugSHotel()
            _elem224.read(iprot)
            self.shotel.append(_elem224)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugMHotel')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel is not None:
      oprot.writeFieldBegin('shotel', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel))
      for iter225 in self.shotel:
        iter225.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mhotel_id is None:
      raise TProtocol.TProtocolException(message='Required field mhotel_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebugResponse:
  """
  Attributes:
   - mhotel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'mhotel', (DebugMHotel, DebugMHotel.thrift_spec), None, ), # 1
  )

  def __init__(self, mhotel=None,):
    self.mhotel = mhotel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.mhotel = DebugMHotel()
          self.mhotel.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebugResponse')
    if self.mhotel is not None:
      oprot.writeFieldBegin('mhotel', TType.STRUCT, 1)
      self.mhotel.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionGroup:
  """
  Attributes:
   - group_id
   - promotion_type
   - type_list
   - businessType
   - orderFromGroupId
   - group_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.LIST, 'promotion_type', (TType.I32,None), None, ), # 2
    (3, TType.LIST, 'type_list', (TType.STRUCT,(PromotionTypeMsg, PromotionTypeMsg.thrift_spec)), None, ), # 3
    (4, TType.I32, 'businessType', None, None, ), # 4
    (5, TType.I32, 'orderFromGroupId', None, None, ), # 5
    (6, TType.I32, 'group_type', None, None, ), # 6
  )

  def __init__(self, group_id=None, promotion_type=None, type_list=None, businessType=None, orderFromGroupId=None, group_type=None,):
    self.group_id = group_id
    self.promotion_type = promotion_type
    self.type_list = type_list
    self.businessType = businessType
    self.orderFromGroupId = orderFromGroupId
    self.group_type = group_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.promotion_type = []
          (_etype229, _size226) = iprot.readListBegin()
          for _i230 in xrange(_size226):
            _elem231 = iprot.readI32()
            self.promotion_type.append(_elem231)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype235, _size232) = iprot.readListBegin()
          for _i236 in xrange(_size232):
            _elem237 = PromotionTypeMsg()
            _elem237.read(iprot)
            self.type_list.append(_elem237)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.businessType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.orderFromGroupId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.group_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionGroup')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.promotion_type))
      for iter238 in self.promotion_type:
        oprot.writeI32(iter238)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.type_list))
      for iter239 in self.type_list:
        iter239.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.businessType is not None:
      oprot.writeFieldBegin('businessType', TType.I32, 4)
      oprot.writeI32(self.businessType)
      oprot.writeFieldEnd()
    if self.orderFromGroupId is not None:
      oprot.writeFieldBegin('orderFromGroupId', TType.I32, 5)
      oprot.writeI32(self.orderFromGroupId)
      oprot.writeFieldEnd()
    if self.group_type is not None:
      oprot.writeFieldBegin('group_type', TType.I32, 6)
      oprot.writeI32(self.group_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.type_list)
    value = (value * 31) ^ hash(self.businessType)
    value = (value * 31) ^ hash(self.orderFromGroupId)
    value = (value * 31) ^ hash(self.group_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ManJianMessage:
  """
  Attributes:
   - has_manjian
   - type
   - promotion_description
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_manjian', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 3
  )

  def __init__(self, has_manjian=None, type=None, promotion_description=None,):
    self.has_manjian = has_manjian
    self.type = type
    self.promotion_description = promotion_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_manjian = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype243, _size240) = iprot.readListBegin()
          for _i244 in xrange(_size240):
            _elem245 = PromotionDescription()
            _elem245.read(iprot)
            self.promotion_description.append(_elem245)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ManJianMessage')
    if self.has_manjian is not None:
      oprot.writeFieldBegin('has_manjian', TType.BOOL, 1)
      oprot.writeBool(self.has_manjian)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter246 in self.promotion_description:
        iter246.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_manjian)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.promotion_description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConfirmMessage:
  """
  Attributes:
   - has_confirm
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_confirm', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_confirm=None, type=None,):
    self.has_confirm = has_confirm
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_confirm = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConfirmMessage')
    if self.has_confirm is not None:
      oprot.writeFieldBegin('has_confirm', TType.BOOL, 1)
      oprot.writeBool(self.has_confirm)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_confirm)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomSelected:
  """
  Attributes:
   - select_room_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'select_room_ids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, select_room_ids=None,):
    self.select_room_ids = select_room_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.select_room_ids = []
          (_etype250, _size247) = iprot.readListBegin()
          for _i251 in xrange(_size247):
            _elem252 = iprot.readI32()
            self.select_room_ids.append(_elem252)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomSelected')
    if self.select_room_ids is not None:
      oprot.writeFieldBegin('select_room_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.select_room_ids))
      for iter253 in self.select_room_ids:
        oprot.writeI32(iter253)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.select_room_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelAttribute:
  """
  Attributes:
   - mhotel_ids
   - keyword
   - keyword_type
   - theme_ids
   - facility_ids
   - star_rates
   - hotel_group_id
   - hotel_brand_id
   - return_no_product_hotel
   - need_hotel_without_service
   - online_search_types
   - supplier_type
   - hotel_service_status
   - return_has_yufu_hotel
   - return_has_timerush_product_hotel
   - price_sub_coupon
   - fuzzy_search_type
   - economic_hotel
   - return_has_manjian_hotel
   - fast_filter_keywords
   - hotel_tag
   - return_discount_hotel
   - fast_filter_ids
   - talent_recommend_ids
   - only_consider_salable
   - return_assemble
   - return_has_breakfasts_hotel
   - return_has_xianfu_hotel
   - mroom_selected
   - service_filter_ids
   - return_price_range_statistic
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mhotel_ids', (TType.I32,None), None, ), # 1
    (2, TType.STRING, 'keyword', None, None, ), # 2
    (3, TType.I32, 'keyword_type', None, None, ), # 3
    (4, TType.LIST, 'theme_ids', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'facility_ids', (TType.I32,None), None, ), # 5
    (6, TType.LIST, 'star_rates', (TType.I32,None), None, ), # 6
    (7, TType.I32, 'hotel_group_id', None, None, ), # 7
    (8, TType.LIST, 'hotel_brand_id', (TType.I32,None), None, ), # 8
    (9, TType.BOOL, 'return_no_product_hotel', None, None, ), # 9
    (10, TType.BOOL, 'need_hotel_without_service', None, None, ), # 10
    (11, TType.LIST, 'online_search_types', (TType.I32,None), None, ), # 11
    (12, TType.LIST, 'supplier_type', (TType.I32,None), None, ), # 12
    (13, TType.I32, 'hotel_service_status', None, None, ), # 13
    (14, TType.BOOL, 'return_has_yufu_hotel', None, None, ), # 14
    (15, TType.BOOL, 'return_has_timerush_product_hotel', None, None, ), # 15
    (16, TType.BOOL, 'price_sub_coupon', None, None, ), # 16
    (17, TType.I32, 'fuzzy_search_type', None, None, ), # 17
    (18, TType.I32, 'economic_hotel', None, None, ), # 18
    (19, TType.BOOL, 'return_has_manjian_hotel', None, None, ), # 19
    (20, TType.LIST, 'fast_filter_keywords', (TType.STRING,None), None, ), # 20
    None, # 21
    None, # 22
    (23, TType.I32, 'hotel_tag', None, None, ), # 23
    (24, TType.I32, 'return_discount_hotel', None, None, ), # 24
    (25, TType.LIST, 'fast_filter_ids', (TType.I32,None), None, ), # 25
    (26, TType.LIST, 'talent_recommend_ids', (TType.I32,None), None, ), # 26
    (27, TType.BOOL, 'only_consider_salable', None, None, ), # 27
    (28, TType.LIST, 'return_assemble', (TType.I32,None), None, ), # 28
    (29, TType.I32, 'return_has_breakfasts_hotel', None, None, ), # 29
    (30, TType.BOOL, 'return_has_xianfu_hotel', None, None, ), # 30
    (31, TType.LIST, 'mroom_selected', (TType.STRUCT,(RoomSelected, RoomSelected.thrift_spec)), None, ), # 31
    (32, TType.LIST, 'service_filter_ids', (TType.I32,None), None, ), # 32
    None, # 33
    (34, TType.BOOL, 'return_price_range_statistic', None, None, ), # 34
  )

  def __init__(self, mhotel_ids=None, keyword=None, keyword_type=None, theme_ids=None, facility_ids=None, star_rates=None, hotel_group_id=None, hotel_brand_id=None, return_no_product_hotel=None, need_hotel_without_service=None, online_search_types=None, supplier_type=None, hotel_service_status=None, return_has_yufu_hotel=None, return_has_timerush_product_hotel=None, price_sub_coupon=None, fuzzy_search_type=None, economic_hotel=None, return_has_manjian_hotel=None, fast_filter_keywords=None, hotel_tag=None, return_discount_hotel=None, fast_filter_ids=None, talent_recommend_ids=None, only_consider_salable=None, return_assemble=None, return_has_breakfasts_hotel=None, return_has_xianfu_hotel=None, mroom_selected=None, service_filter_ids=None, return_price_range_statistic=None,):
    self.mhotel_ids = mhotel_ids
    self.keyword = keyword
    self.keyword_type = keyword_type
    self.theme_ids = theme_ids
    self.facility_ids = facility_ids
    self.star_rates = star_rates
    self.hotel_group_id = hotel_group_id
    self.hotel_brand_id = hotel_brand_id
    self.return_no_product_hotel = return_no_product_hotel
    self.need_hotel_without_service = need_hotel_without_service
    self.online_search_types = online_search_types
    self.supplier_type = supplier_type
    self.hotel_service_status = hotel_service_status
    self.return_has_yufu_hotel = return_has_yufu_hotel
    self.return_has_timerush_product_hotel = return_has_timerush_product_hotel
    self.price_sub_coupon = price_sub_coupon
    self.fuzzy_search_type = fuzzy_search_type
    self.economic_hotel = economic_hotel
    self.return_has_manjian_hotel = return_has_manjian_hotel
    self.fast_filter_keywords = fast_filter_keywords
    self.hotel_tag = hotel_tag
    self.return_discount_hotel = return_discount_hotel
    self.fast_filter_ids = fast_filter_ids
    self.talent_recommend_ids = talent_recommend_ids
    self.only_consider_salable = only_consider_salable
    self.return_assemble = return_assemble
    self.return_has_breakfasts_hotel = return_has_breakfasts_hotel
    self.return_has_xianfu_hotel = return_has_xianfu_hotel
    self.mroom_selected = mroom_selected
    self.service_filter_ids = service_filter_ids
    self.return_price_range_statistic = return_price_range_statistic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mhotel_ids = []
          (_etype257, _size254) = iprot.readListBegin()
          for _i258 in xrange(_size254):
            _elem259 = iprot.readI32()
            self.mhotel_ids.append(_elem259)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.keyword = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.keyword_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.theme_ids = []
          (_etype263, _size260) = iprot.readListBegin()
          for _i264 in xrange(_size260):
            _elem265 = iprot.readI32()
            self.theme_ids.append(_elem265)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.facility_ids = []
          (_etype269, _size266) = iprot.readListBegin()
          for _i270 in xrange(_size266):
            _elem271 = iprot.readI32()
            self.facility_ids.append(_elem271)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.star_rates = []
          (_etype275, _size272) = iprot.readListBegin()
          for _i276 in xrange(_size272):
            _elem277 = iprot.readI32()
            self.star_rates.append(_elem277)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hotel_group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.hotel_brand_id = []
          (_etype281, _size278) = iprot.readListBegin()
          for _i282 in xrange(_size278):
            _elem283 = iprot.readI32()
            self.hotel_brand_id.append(_elem283)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.return_no_product_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.need_hotel_without_service = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.online_search_types = []
          (_etype287, _size284) = iprot.readListBegin()
          for _i288 in xrange(_size284):
            _elem289 = iprot.readI32()
            self.online_search_types.append(_elem289)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.supplier_type = []
          (_etype293, _size290) = iprot.readListBegin()
          for _i294 in xrange(_size290):
            _elem295 = iprot.readI32()
            self.supplier_type.append(_elem295)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.hotel_service_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.return_has_yufu_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.return_has_timerush_product_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.price_sub_coupon = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.fuzzy_search_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.economic_hotel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.return_has_manjian_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.fast_filter_keywords = []
          (_etype299, _size296) = iprot.readListBegin()
          for _i300 in xrange(_size296):
            _elem301 = iprot.readString()
            self.fast_filter_keywords.append(_elem301)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.hotel_tag = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.return_discount_hotel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.fast_filter_ids = []
          (_etype305, _size302) = iprot.readListBegin()
          for _i306 in xrange(_size302):
            _elem307 = iprot.readI32()
            self.fast_filter_ids.append(_elem307)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.LIST:
          self.talent_recommend_ids = []
          (_etype311, _size308) = iprot.readListBegin()
          for _i312 in xrange(_size308):
            _elem313 = iprot.readI32()
            self.talent_recommend_ids.append(_elem313)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.only_consider_salable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.return_assemble = []
          (_etype317, _size314) = iprot.readListBegin()
          for _i318 in xrange(_size314):
            _elem319 = iprot.readI32()
            self.return_assemble.append(_elem319)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.return_has_breakfasts_hotel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.return_has_xianfu_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.LIST:
          self.mroom_selected = []
          (_etype323, _size320) = iprot.readListBegin()
          for _i324 in xrange(_size320):
            _elem325 = RoomSelected()
            _elem325.read(iprot)
            self.mroom_selected.append(_elem325)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.service_filter_ids = []
          (_etype329, _size326) = iprot.readListBegin()
          for _i330 in xrange(_size326):
            _elem331 = iprot.readI32()
            self.service_filter_ids.append(_elem331)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.BOOL:
          self.return_price_range_statistic = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelAttribute')
    if self.mhotel_ids is not None:
      oprot.writeFieldBegin('mhotel_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.mhotel_ids))
      for iter332 in self.mhotel_ids:
        oprot.writeI32(iter332)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.keyword is not None:
      oprot.writeFieldBegin('keyword', TType.STRING, 2)
      oprot.writeString(self.keyword)
      oprot.writeFieldEnd()
    if self.keyword_type is not None:
      oprot.writeFieldBegin('keyword_type', TType.I32, 3)
      oprot.writeI32(self.keyword_type)
      oprot.writeFieldEnd()
    if self.theme_ids is not None:
      oprot.writeFieldBegin('theme_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.theme_ids))
      for iter333 in self.theme_ids:
        oprot.writeI32(iter333)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.facility_ids is not None:
      oprot.writeFieldBegin('facility_ids', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.facility_ids))
      for iter334 in self.facility_ids:
        oprot.writeI32(iter334)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.star_rates is not None:
      oprot.writeFieldBegin('star_rates', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.star_rates))
      for iter335 in self.star_rates:
        oprot.writeI32(iter335)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_group_id is not None:
      oprot.writeFieldBegin('hotel_group_id', TType.I32, 7)
      oprot.writeI32(self.hotel_group_id)
      oprot.writeFieldEnd()
    if self.hotel_brand_id is not None:
      oprot.writeFieldBegin('hotel_brand_id', TType.LIST, 8)
      oprot.writeListBegin(TType.I32, len(self.hotel_brand_id))
      for iter336 in self.hotel_brand_id:
        oprot.writeI32(iter336)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_no_product_hotel is not None:
      oprot.writeFieldBegin('return_no_product_hotel', TType.BOOL, 9)
      oprot.writeBool(self.return_no_product_hotel)
      oprot.writeFieldEnd()
    if self.need_hotel_without_service is not None:
      oprot.writeFieldBegin('need_hotel_without_service', TType.BOOL, 10)
      oprot.writeBool(self.need_hotel_without_service)
      oprot.writeFieldEnd()
    if self.online_search_types is not None:
      oprot.writeFieldBegin('online_search_types', TType.LIST, 11)
      oprot.writeListBegin(TType.I32, len(self.online_search_types))
      for iter337 in self.online_search_types:
        oprot.writeI32(iter337)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.LIST, 12)
      oprot.writeListBegin(TType.I32, len(self.supplier_type))
      for iter338 in self.supplier_type:
        oprot.writeI32(iter338)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_service_status is not None:
      oprot.writeFieldBegin('hotel_service_status', TType.I32, 13)
      oprot.writeI32(self.hotel_service_status)
      oprot.writeFieldEnd()
    if self.return_has_yufu_hotel is not None:
      oprot.writeFieldBegin('return_has_yufu_hotel', TType.BOOL, 14)
      oprot.writeBool(self.return_has_yufu_hotel)
      oprot.writeFieldEnd()
    if self.return_has_timerush_product_hotel is not None:
      oprot.writeFieldBegin('return_has_timerush_product_hotel', TType.BOOL, 15)
      oprot.writeBool(self.return_has_timerush_product_hotel)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.BOOL, 16)
      oprot.writeBool(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.fuzzy_search_type is not None:
      oprot.writeFieldBegin('fuzzy_search_type', TType.I32, 17)
      oprot.writeI32(self.fuzzy_search_type)
      oprot.writeFieldEnd()
    if self.economic_hotel is not None:
      oprot.writeFieldBegin('economic_hotel', TType.I32, 18)
      oprot.writeI32(self.economic_hotel)
      oprot.writeFieldEnd()
    if self.return_has_manjian_hotel is not None:
      oprot.writeFieldBegin('return_has_manjian_hotel', TType.BOOL, 19)
      oprot.writeBool(self.return_has_manjian_hotel)
      oprot.writeFieldEnd()
    if self.fast_filter_keywords is not None:
      oprot.writeFieldBegin('fast_filter_keywords', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.fast_filter_keywords))
      for iter339 in self.fast_filter_keywords:
        oprot.writeString(iter339)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_tag is not None:
      oprot.writeFieldBegin('hotel_tag', TType.I32, 23)
      oprot.writeI32(self.hotel_tag)
      oprot.writeFieldEnd()
    if self.return_discount_hotel is not None:
      oprot.writeFieldBegin('return_discount_hotel', TType.I32, 24)
      oprot.writeI32(self.return_discount_hotel)
      oprot.writeFieldEnd()
    if self.fast_filter_ids is not None:
      oprot.writeFieldBegin('fast_filter_ids', TType.LIST, 25)
      oprot.writeListBegin(TType.I32, len(self.fast_filter_ids))
      for iter340 in self.fast_filter_ids:
        oprot.writeI32(iter340)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.talent_recommend_ids is not None:
      oprot.writeFieldBegin('talent_recommend_ids', TType.LIST, 26)
      oprot.writeListBegin(TType.I32, len(self.talent_recommend_ids))
      for iter341 in self.talent_recommend_ids:
        oprot.writeI32(iter341)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.only_consider_salable is not None:
      oprot.writeFieldBegin('only_consider_salable', TType.BOOL, 27)
      oprot.writeBool(self.only_consider_salable)
      oprot.writeFieldEnd()
    if self.return_assemble is not None:
      oprot.writeFieldBegin('return_assemble', TType.LIST, 28)
      oprot.writeListBegin(TType.I32, len(self.return_assemble))
      for iter342 in self.return_assemble:
        oprot.writeI32(iter342)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_has_breakfasts_hotel is not None:
      oprot.writeFieldBegin('return_has_breakfasts_hotel', TType.I32, 29)
      oprot.writeI32(self.return_has_breakfasts_hotel)
      oprot.writeFieldEnd()
    if self.return_has_xianfu_hotel is not None:
      oprot.writeFieldBegin('return_has_xianfu_hotel', TType.BOOL, 30)
      oprot.writeBool(self.return_has_xianfu_hotel)
      oprot.writeFieldEnd()
    if self.mroom_selected is not None:
      oprot.writeFieldBegin('mroom_selected', TType.LIST, 31)
      oprot.writeListBegin(TType.STRUCT, len(self.mroom_selected))
      for iter343 in self.mroom_selected:
        iter343.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.service_filter_ids is not None:
      oprot.writeFieldBegin('service_filter_ids', TType.LIST, 32)
      oprot.writeListBegin(TType.I32, len(self.service_filter_ids))
      for iter344 in self.service_filter_ids:
        oprot.writeI32(iter344)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_price_range_statistic is not None:
      oprot.writeFieldBegin('return_price_range_statistic', TType.BOOL, 34)
      oprot.writeBool(self.return_price_range_statistic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_ids)
    value = (value * 31) ^ hash(self.keyword)
    value = (value * 31) ^ hash(self.keyword_type)
    value = (value * 31) ^ hash(self.theme_ids)
    value = (value * 31) ^ hash(self.facility_ids)
    value = (value * 31) ^ hash(self.star_rates)
    value = (value * 31) ^ hash(self.hotel_group_id)
    value = (value * 31) ^ hash(self.hotel_brand_id)
    value = (value * 31) ^ hash(self.return_no_product_hotel)
    value = (value * 31) ^ hash(self.need_hotel_without_service)
    value = (value * 31) ^ hash(self.online_search_types)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.hotel_service_status)
    value = (value * 31) ^ hash(self.return_has_yufu_hotel)
    value = (value * 31) ^ hash(self.return_has_timerush_product_hotel)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.fuzzy_search_type)
    value = (value * 31) ^ hash(self.economic_hotel)
    value = (value * 31) ^ hash(self.return_has_manjian_hotel)
    value = (value * 31) ^ hash(self.fast_filter_keywords)
    value = (value * 31) ^ hash(self.hotel_tag)
    value = (value * 31) ^ hash(self.return_discount_hotel)
    value = (value * 31) ^ hash(self.fast_filter_ids)
    value = (value * 31) ^ hash(self.talent_recommend_ids)
    value = (value * 31) ^ hash(self.only_consider_salable)
    value = (value * 31) ^ hash(self.return_assemble)
    value = (value * 31) ^ hash(self.return_has_breakfasts_hotel)
    value = (value * 31) ^ hash(self.return_has_xianfu_hotel)
    value = (value * 31) ^ hash(self.mroom_selected)
    value = (value * 31) ^ hash(self.service_filter_ids)
    value = (value * 31) ^ hash(self.return_price_range_statistic)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceRangeStatistic:
  """
  Attributes:
   - star_type
   - price_range
   - hotel_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'star_type', None, None, ), # 1
    (2, TType.STRUCT, 'price_range', (PriceRange, PriceRange.thrift_spec), None, ), # 2
    (3, TType.I32, 'hotel_count', None, None, ), # 3
  )

  def __init__(self, star_type=None, price_range=None, hotel_count=None,):
    self.star_type = star_type
    self.price_range = price_range
    self.hotel_count = hotel_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.star_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.price_range = PriceRange()
          self.price_range.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.hotel_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceRangeStatistic')
    if self.star_type is not None:
      oprot.writeFieldBegin('star_type', TType.I32, 1)
      oprot.writeI32(self.star_type)
      oprot.writeFieldEnd()
    if self.price_range is not None:
      oprot.writeFieldBegin('price_range', TType.STRUCT, 2)
      self.price_range.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_count is not None:
      oprot.writeFieldBegin('hotel_count', TType.I32, 3)
      oprot.writeI32(self.hotel_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.star_type)
    value = (value * 31) ^ hash(self.price_range)
    value = (value * 31) ^ hash(self.hotel_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CheckInPersonForOneRoom:
  """
  Attributes:
   - min_checkin_person_for_oneroom
   - max_checkin_person_for_oneroom
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'min_checkin_person_for_oneroom', None, None, ), # 1
    (2, TType.I32, 'max_checkin_person_for_oneroom', None, None, ), # 2
  )

  def __init__(self, min_checkin_person_for_oneroom=None, max_checkin_person_for_oneroom=None,):
    self.min_checkin_person_for_oneroom = min_checkin_person_for_oneroom
    self.max_checkin_person_for_oneroom = max_checkin_person_for_oneroom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.min_checkin_person_for_oneroom = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.max_checkin_person_for_oneroom = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CheckInPersonForOneRoom')
    if self.min_checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('min_checkin_person_for_oneroom', TType.I32, 1)
      oprot.writeI32(self.min_checkin_person_for_oneroom)
      oprot.writeFieldEnd()
    if self.max_checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('max_checkin_person_for_oneroom', TType.I32, 2)
      oprot.writeI32(self.max_checkin_person_for_oneroom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_checkin_person_for_oneroom)
    value = (value * 31) ^ hash(self.max_checkin_person_for_oneroom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomAttribute:
  """
  Attributes:
   - checkin_person_for_oneroom
   - is_hotel_apartment
   - bed_large_types
   - facility_ids
   - keyword
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'checkin_person_for_oneroom', (CheckInPersonForOneRoom, CheckInPersonForOneRoom.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'is_hotel_apartment', None, None, ), # 2
    (3, TType.LIST, 'bed_large_types', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'facility_ids', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'keyword', None, None, ), # 5
  )

  def __init__(self, checkin_person_for_oneroom=None, is_hotel_apartment=None, bed_large_types=None, facility_ids=None, keyword=None,):
    self.checkin_person_for_oneroom = checkin_person_for_oneroom
    self.is_hotel_apartment = is_hotel_apartment
    self.bed_large_types = bed_large_types
    self.facility_ids = facility_ids
    self.keyword = keyword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.checkin_person_for_oneroom = CheckInPersonForOneRoom()
          self.checkin_person_for_oneroom.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_hotel_apartment = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.bed_large_types = []
          (_etype348, _size345) = iprot.readListBegin()
          for _i349 in xrange(_size345):
            _elem350 = iprot.readI32()
            self.bed_large_types.append(_elem350)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.facility_ids = []
          (_etype354, _size351) = iprot.readListBegin()
          for _i355 in xrange(_size351):
            _elem356 = iprot.readI32()
            self.facility_ids.append(_elem356)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.keyword = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomAttribute')
    if self.checkin_person_for_oneroom is not None:
      oprot.writeFieldBegin('checkin_person_for_oneroom', TType.STRUCT, 1)
      self.checkin_person_for_oneroom.write(oprot)
      oprot.writeFieldEnd()
    if self.is_hotel_apartment is not None:
      oprot.writeFieldBegin('is_hotel_apartment', TType.BOOL, 2)
      oprot.writeBool(self.is_hotel_apartment)
      oprot.writeFieldEnd()
    if self.bed_large_types is not None:
      oprot.writeFieldBegin('bed_large_types', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.bed_large_types))
      for iter357 in self.bed_large_types:
        oprot.writeI32(iter357)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.facility_ids is not None:
      oprot.writeFieldBegin('facility_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.facility_ids))
      for iter358 in self.facility_ids:
        oprot.writeI32(iter358)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.keyword is not None:
      oprot.writeFieldBegin('keyword', TType.STRING, 5)
      oprot.writeString(self.keyword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.checkin_person_for_oneroom)
    value = (value * 31) ^ hash(self.is_hotel_apartment)
    value = (value * 31) ^ hash(self.bed_large_types)
    value = (value * 31) ^ hash(self.facility_ids)
    value = (value * 31) ^ hash(self.keyword)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PricePair:
  """
  Attributes:
   - min
   - max
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'min', None, None, ), # 1
    (2, TType.I32, 'max', None, None, ), # 2
  )

  def __init__(self, min=None, max=None,):
    self.min = min
    self.max = max

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.min = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.max = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PricePair')
    if self.min is not None:
      oprot.writeFieldBegin('min', TType.I32, 1)
      oprot.writeI32(self.min)
      oprot.writeFieldEnd()
    if self.max is not None:
      oprot.writeFieldBegin('max', TType.I32, 2)
      oprot.writeI32(self.max)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min)
    value = (value * 31) ^ hash(self.max)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StayDate:
  """
  Attributes:
   - check_in
   - check_out
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'check_in', None, None, ), # 1
    (2, TType.I64, 'check_out', None, None, ), # 2
  )

  def __init__(self, check_in=None, check_out=None,):
    self.check_in = check_in
    self.check_out = check_out

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.check_in = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.check_out = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StayDate')
    if self.check_in is not None:
      oprot.writeFieldBegin('check_in', TType.I64, 1)
      oprot.writeI64(self.check_in)
      oprot.writeFieldEnd()
    if self.check_out is not None:
      oprot.writeFieldBegin('check_out', TType.I64, 2)
      oprot.writeI64(self.check_out)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.check_in)
    value = (value * 31) ^ hash(self.check_out)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Location:
  """
  Attributes:
   - latitude
   - longitude
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'latitude', None, None, ), # 1
    (2, TType.DOUBLE, 'longitude', None, None, ), # 2
  )

  def __init__(self, latitude=None, longitude=None,):
    self.latitude = latitude
    self.longitude = longitude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Location')
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearBy:
  """
  Attributes:
   - center
   - radius
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'center', (Location, Location.thrift_spec), None, ), # 1
    (2, TType.I32, 'radius', None, None, ), # 2
  )

  def __init__(self, center=None, radius=None,):
    self.center = center
    self.radius = radius

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.center = Location()
          self.center.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.radius = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearBy')
    if self.center is not None:
      oprot.writeFieldBegin('center', TType.STRUCT, 1)
      self.center.write(oprot)
      oprot.writeFieldEnd()
    if self.radius is not None:
      oprot.writeFieldBegin('radius', TType.I32, 2)
      oprot.writeI32(self.radius)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.center)
    value = (value * 31) ^ hash(self.radius)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class POIInfo:
  """
  Attributes:
   - id
   - name_cn
   - name_en
   - distance
   - geo_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name_cn', None, None, ), # 2
    (3, TType.STRING, 'name_en', None, None, ), # 3
    (4, TType.DOUBLE, 'distance', None, None, ), # 4
    (5, TType.STRUCT, 'geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 5
  )

  def __init__(self, id=None, name_cn=None, name_en=None, distance=None, geo_info=None,):
    self.id = id
    self.name_cn = name_cn
    self.name_en = name_en
    self.distance = distance
    self.geo_info = geo_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.distance = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.geo_info = GeoInfo()
          self.geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('POIInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name_cn is not None:
      oprot.writeFieldBegin('name_cn', TType.STRING, 2)
      oprot.writeString(self.name_cn)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 3)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.DOUBLE, 4)
      oprot.writeDouble(self.distance)
      oprot.writeFieldEnd()
    if self.geo_info is not None:
      oprot.writeFieldBegin('geo_info', TType.STRUCT, 5)
      self.geo_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name_cn)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.geo_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearBySearchInfo:
  """
  Attributes:
   - item_type
   - nearby
   - region_id
   - region_result_num_uplimit
   - nearby_result_num_uplimit
   - optype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_type', None, None, ), # 1
    (2, TType.STRUCT, 'nearby', (NearBy, NearBy.thrift_spec), None, ), # 2
    (3, TType.I32, 'region_id', None, None, ), # 3
    (4, TType.I32, 'region_result_num_uplimit', None, None, ), # 4
    (5, TType.I32, 'nearby_result_num_uplimit', None, None, ), # 5
    (6, TType.I32, 'optype', None, None, ), # 6
  )

  def __init__(self, item_type=None, nearby=None, region_id=None, region_result_num_uplimit=None, nearby_result_num_uplimit=None, optype=None,):
    self.item_type = item_type
    self.nearby = nearby
    self.region_id = region_id
    self.region_result_num_uplimit = region_result_num_uplimit
    self.nearby_result_num_uplimit = nearby_result_num_uplimit
    self.optype = optype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nearby = NearBy()
          self.nearby.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.region_result_num_uplimit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.nearby_result_num_uplimit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.optype = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearBySearchInfo')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I32, 1)
      oprot.writeI32(self.item_type)
      oprot.writeFieldEnd()
    if self.nearby is not None:
      oprot.writeFieldBegin('nearby', TType.STRUCT, 2)
      self.nearby.write(oprot)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 3)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_result_num_uplimit is not None:
      oprot.writeFieldBegin('region_result_num_uplimit', TType.I32, 4)
      oprot.writeI32(self.region_result_num_uplimit)
      oprot.writeFieldEnd()
    if self.nearby_result_num_uplimit is not None:
      oprot.writeFieldBegin('nearby_result_num_uplimit', TType.I32, 5)
      oprot.writeI32(self.nearby_result_num_uplimit)
      oprot.writeFieldEnd()
    if self.optype is not None:
      oprot.writeFieldBegin('optype', TType.I32, 6)
      oprot.writeI32(self.optype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.item_type)
    value = (value * 31) ^ hash(self.nearby)
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_result_num_uplimit)
    value = (value * 31) ^ hash(self.nearby_result_num_uplimit)
    value = (value * 31) ^ hash(self.optype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearBySearchResult:
  """
  Attributes:
   - item_type
   - poi_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'item_type', None, None, ), # 1
    (2, TType.LIST, 'poi_info', (TType.STRUCT,(POIInfo, POIInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, item_type=None, poi_info=None,):
    self.item_type = item_type
    self.poi_info = poi_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.item_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.poi_info = []
          (_etype362, _size359) = iprot.readListBegin()
          for _i363 in xrange(_size359):
            _elem364 = POIInfo()
            _elem364.read(iprot)
            self.poi_info.append(_elem364)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearBySearchResult')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I32, 1)
      oprot.writeI32(self.item_type)
      oprot.writeFieldEnd()
    if self.poi_info is not None:
      oprot.writeFieldBegin('poi_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.poi_info))
      for iter365 in self.poi_info:
        iter365.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.item_type)
    value = (value * 31) ^ hash(self.poi_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Bound:
  """
  Attributes:
   - left_top
   - right_bottom
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'left_top', (Location, Location.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'right_bottom', (Location, Location.thrift_spec), None, ), # 2
  )

  def __init__(self, left_top=None, right_bottom=None,):
    self.left_top = left_top
    self.right_bottom = right_bottom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.left_top = Location()
          self.left_top.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.right_bottom = Location()
          self.right_bottom.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Bound')
    if self.left_top is not None:
      oprot.writeFieldBegin('left_top', TType.STRUCT, 1)
      self.left_top.write(oprot)
      oprot.writeFieldEnd()
    if self.right_bottom is not None:
      oprot.writeFieldBegin('right_bottom', TType.STRUCT, 2)
      self.right_bottom.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.left_top)
    value = (value * 31) ^ hash(self.right_bottom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MulPOI:
  """
  Attributes:
   - mul_pois
   - mul_poi_releation
   - display_poi
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mul_pois', (TType.STRUCT,(NearBy, NearBy.thrift_spec)), None, ), # 1
    (2, TType.I32, 'mul_poi_releation', None, None, ), # 2
    (3, TType.I32, 'display_poi', None, None, ), # 3
  )

  def __init__(self, mul_pois=None, mul_poi_releation=None, display_poi=None,):
    self.mul_pois = mul_pois
    self.mul_poi_releation = mul_poi_releation
    self.display_poi = display_poi

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mul_pois = []
          (_etype369, _size366) = iprot.readListBegin()
          for _i370 in xrange(_size366):
            _elem371 = NearBy()
            _elem371.read(iprot)
            self.mul_pois.append(_elem371)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mul_poi_releation = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.display_poi = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MulPOI')
    if self.mul_pois is not None:
      oprot.writeFieldBegin('mul_pois', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.mul_pois))
      for iter372 in self.mul_pois:
        iter372.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mul_poi_releation is not None:
      oprot.writeFieldBegin('mul_poi_releation', TType.I32, 2)
      oprot.writeI32(self.mul_poi_releation)
      oprot.writeFieldEnd()
    if self.display_poi is not None:
      oprot.writeFieldBegin('display_poi', TType.I32, 3)
      oprot.writeI32(self.display_poi)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mul_pois)
    value = (value * 31) ^ hash(self.mul_poi_releation)
    value = (value * 31) ^ hash(self.display_poi)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GeoAttribute:
  """
  Attributes:
   - language
   - region_id
   - region_str
   - poi_id
   - poi_str
   - is_only_main_city
   - district_type
   - district_id
   - geo_type
   - nearby
   - bound
   - mulpoi
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'language', None, None, ), # 1
    (2, TType.I32, 'region_id', None, None, ), # 2
    (3, TType.STRING, 'region_str', None, None, ), # 3
    (4, TType.I32, 'poi_id', None, None, ), # 4
    (5, TType.STRING, 'poi_str', None, None, ), # 5
    (6, TType.BOOL, 'is_only_main_city', None, None, ), # 6
    (7, TType.I32, 'district_type', None, None, ), # 7
    (8, TType.I32, 'district_id', None, None, ), # 8
    (9, TType.I32, 'geo_type', None, None, ), # 9
    (10, TType.STRUCT, 'nearby', (NearBy, NearBy.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'bound', (Bound, Bound.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'mulpoi', (MulPOI, MulPOI.thrift_spec), None, ), # 12
  )

  def __init__(self, language=None, region_id=None, region_str=None, poi_id=None, poi_str=None, is_only_main_city=None, district_type=None, district_id=None, geo_type=None, nearby=None, bound=None, mulpoi=None,):
    self.language = language
    self.region_id = region_id
    self.region_str = region_str
    self.poi_id = poi_id
    self.poi_str = poi_str
    self.is_only_main_city = is_only_main_city
    self.district_type = district_type
    self.district_id = district_id
    self.geo_type = geo_type
    self.nearby = nearby
    self.bound = bound
    self.mulpoi = mulpoi

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.language = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.region_str = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.poi_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.poi_str = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.is_only_main_city = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.district_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.district_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.geo_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.nearby = NearBy()
          self.nearby.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.bound = Bound()
          self.bound.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.mulpoi = MulPOI()
          self.mulpoi.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GeoAttribute')
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 1)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 2)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_str is not None:
      oprot.writeFieldBegin('region_str', TType.STRING, 3)
      oprot.writeString(self.region_str)
      oprot.writeFieldEnd()
    if self.poi_id is not None:
      oprot.writeFieldBegin('poi_id', TType.I32, 4)
      oprot.writeI32(self.poi_id)
      oprot.writeFieldEnd()
    if self.poi_str is not None:
      oprot.writeFieldBegin('poi_str', TType.STRING, 5)
      oprot.writeString(self.poi_str)
      oprot.writeFieldEnd()
    if self.is_only_main_city is not None:
      oprot.writeFieldBegin('is_only_main_city', TType.BOOL, 6)
      oprot.writeBool(self.is_only_main_city)
      oprot.writeFieldEnd()
    if self.district_type is not None:
      oprot.writeFieldBegin('district_type', TType.I32, 7)
      oprot.writeI32(self.district_type)
      oprot.writeFieldEnd()
    if self.district_id is not None:
      oprot.writeFieldBegin('district_id', TType.I32, 8)
      oprot.writeI32(self.district_id)
      oprot.writeFieldEnd()
    if self.geo_type is not None:
      oprot.writeFieldBegin('geo_type', TType.I32, 9)
      oprot.writeI32(self.geo_type)
      oprot.writeFieldEnd()
    if self.nearby is not None:
      oprot.writeFieldBegin('nearby', TType.STRUCT, 10)
      self.nearby.write(oprot)
      oprot.writeFieldEnd()
    if self.bound is not None:
      oprot.writeFieldBegin('bound', TType.STRUCT, 11)
      self.bound.write(oprot)
      oprot.writeFieldEnd()
    if self.mulpoi is not None:
      oprot.writeFieldBegin('mulpoi', TType.STRUCT, 12)
      self.mulpoi.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_str)
    value = (value * 31) ^ hash(self.poi_id)
    value = (value * 31) ^ hash(self.poi_str)
    value = (value * 31) ^ hash(self.is_only_main_city)
    value = (value * 31) ^ hash(self.district_type)
    value = (value * 31) ^ hash(self.district_id)
    value = (value * 31) ^ hash(self.geo_type)
    value = (value * 31) ^ hash(self.nearby)
    value = (value * 31) ^ hash(self.bound)
    value = (value * 31) ^ hash(self.mulpoi)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GroupInfo:
  """
  Attributes:
   - group_id
   - elong_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.I32, 'elong_level', None, None, ), # 2
  )

  def __init__(self, group_id=None, elong_level=None,):
    self.group_id = group_id
    self.elong_level = elong_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.elong_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GroupInfo')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.elong_level is not None:
      oprot.writeFieldBegin('elong_level', TType.I32, 2)
      oprot.writeI32(self.elong_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.group_id is None:
      raise TProtocol.TProtocolException(message='Required field group_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.elong_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomerAttribute:
  """
  Attributes:
   - booking_date
   - member_level
   - proxy_id
   - order_id
   - booking_channel
   - request_origin
   - botao_customer_level
   - use_botao_promotion
   - group_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'booking_date', None, None, ), # 1
    (2, TType.I32, 'member_level', None, None, ), # 2
    (3, TType.STRING, 'proxy_id', None, None, ), # 3
    (4, TType.I64, 'order_id', None, None, ), # 4
    (5, TType.LIST, 'booking_channel', (TType.I32,None), None, ), # 5
    (6, TType.I32, 'request_origin', None, None, ), # 6
    (7, TType.I32, 'botao_customer_level', None, None, ), # 7
    (8, TType.BOOL, 'use_botao_promotion', None, None, ), # 8
    (9, TType.LIST, 'group_info', (TType.STRUCT,(GroupInfo, GroupInfo.thrift_spec)), None, ), # 9
  )

  def __init__(self, booking_date=None, member_level=None, proxy_id=None, order_id=None, booking_channel=None, request_origin=None, botao_customer_level=None, use_botao_promotion=None, group_info=None,):
    self.booking_date = booking_date
    self.member_level = member_level
    self.proxy_id = proxy_id
    self.order_id = order_id
    self.booking_channel = booking_channel
    self.request_origin = request_origin
    self.botao_customer_level = botao_customer_level
    self.use_botao_promotion = use_botao_promotion
    self.group_info = group_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.booking_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.member_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.proxy_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.booking_channel = []
          (_etype376, _size373) = iprot.readListBegin()
          for _i377 in xrange(_size373):
            _elem378 = iprot.readI32()
            self.booking_channel.append(_elem378)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.request_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.botao_customer_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.use_botao_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.group_info = []
          (_etype382, _size379) = iprot.readListBegin()
          for _i383 in xrange(_size379):
            _elem384 = GroupInfo()
            _elem384.read(iprot)
            self.group_info.append(_elem384)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomerAttribute')
    if self.booking_date is not None:
      oprot.writeFieldBegin('booking_date', TType.I64, 1)
      oprot.writeI64(self.booking_date)
      oprot.writeFieldEnd()
    if self.member_level is not None:
      oprot.writeFieldBegin('member_level', TType.I32, 2)
      oprot.writeI32(self.member_level)
      oprot.writeFieldEnd()
    if self.proxy_id is not None:
      oprot.writeFieldBegin('proxy_id', TType.STRING, 3)
      oprot.writeString(self.proxy_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 4)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.booking_channel is not None:
      oprot.writeFieldBegin('booking_channel', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.booking_channel))
      for iter385 in self.booking_channel:
        oprot.writeI32(iter385)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.request_origin is not None:
      oprot.writeFieldBegin('request_origin', TType.I32, 6)
      oprot.writeI32(self.request_origin)
      oprot.writeFieldEnd()
    if self.botao_customer_level is not None:
      oprot.writeFieldBegin('botao_customer_level', TType.I32, 7)
      oprot.writeI32(self.botao_customer_level)
      oprot.writeFieldEnd()
    if self.use_botao_promotion is not None:
      oprot.writeFieldBegin('use_botao_promotion', TType.BOOL, 8)
      oprot.writeBool(self.use_botao_promotion)
      oprot.writeFieldEnd()
    if self.group_info is not None:
      oprot.writeFieldBegin('group_info', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.group_info))
      for iter386 in self.group_info:
        iter386.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.booking_date)
    value = (value * 31) ^ hash(self.member_level)
    value = (value * 31) ^ hash(self.proxy_id)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.booking_channel)
    value = (value * 31) ^ hash(self.request_origin)
    value = (value * 31) ^ hash(self.botao_customer_level)
    value = (value * 31) ^ hash(self.use_botao_promotion)
    value = (value * 31) ^ hash(self.group_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListProductInfo:
  """
  Attributes:
   - return_min_price_product
   - need_sorted_top_product
   - top_product_num
   - sort_types
   - return_min_stay_product
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'return_min_price_product', None, None, ), # 1
    (2, TType.BOOL, 'need_sorted_top_product', None, None, ), # 2
    (3, TType.I32, 'top_product_num', None, None, ), # 3
    (4, TType.I32, 'sort_types', None, None, ), # 4
    (5, TType.BOOL, 'return_min_stay_product', None, None, ), # 5
  )

  def __init__(self, return_min_price_product=None, need_sorted_top_product=None, top_product_num=None, sort_types=None, return_min_stay_product=None,):
    self.return_min_price_product = return_min_price_product
    self.need_sorted_top_product = need_sorted_top_product
    self.top_product_num = top_product_num
    self.sort_types = sort_types
    self.return_min_stay_product = return_min_stay_product

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.return_min_price_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.need_sorted_top_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.top_product_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sort_types = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.return_min_stay_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListProductInfo')
    if self.return_min_price_product is not None:
      oprot.writeFieldBegin('return_min_price_product', TType.BOOL, 1)
      oprot.writeBool(self.return_min_price_product)
      oprot.writeFieldEnd()
    if self.need_sorted_top_product is not None:
      oprot.writeFieldBegin('need_sorted_top_product', TType.BOOL, 2)
      oprot.writeBool(self.need_sorted_top_product)
      oprot.writeFieldEnd()
    if self.top_product_num is not None:
      oprot.writeFieldBegin('top_product_num', TType.I32, 3)
      oprot.writeI32(self.top_product_num)
      oprot.writeFieldEnd()
    if self.sort_types is not None:
      oprot.writeFieldBegin('sort_types', TType.I32, 4)
      oprot.writeI32(self.sort_types)
      oprot.writeFieldEnd()
    if self.return_min_stay_product is not None:
      oprot.writeFieldBegin('return_min_stay_product', TType.BOOL, 5)
      oprot.writeBool(self.return_min_stay_product)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.return_min_price_product)
    value = (value * 31) ^ hash(self.need_sorted_top_product)
    value = (value * 31) ^ hash(self.top_product_num)
    value = (value * 31) ^ hash(self.sort_types)
    value = (value * 31) ^ hash(self.return_min_stay_product)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionBlackList:
  """
  Attributes:
   - method_type
   - promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'method_type', None, None, ), # 1
    (2, TType.I32, 'promotion_type', None, None, ), # 2
  )

  def __init__(self, method_type=None, promotion_type=None,):
    self.method_type = method_type
    self.promotion_type = promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.method_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionBlackList')
    if self.method_type is not None:
      oprot.writeFieldBegin('method_type', TType.I32, 1)
      oprot.writeI32(self.method_type)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 2)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.promotion_type is None:
      raise TProtocol.TProtocolException(message='Required field promotion_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.method_type)
    value = (value * 31) ^ hash(self.promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityChannel:
  """
  Attributes:
   - type
   - order_from_ids
   - proxy_ids
   - promotion_channel_codes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'order_from_ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'proxy_ids', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'promotion_channel_codes', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, type=None, order_from_ids=None, proxy_ids=None, promotion_channel_codes=None,):
    self.type = type
    self.order_from_ids = order_from_ids
    self.proxy_ids = proxy_ids
    self.promotion_channel_codes = promotion_channel_codes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.order_from_ids = []
          (_etype390, _size387) = iprot.readListBegin()
          for _i391 in xrange(_size387):
            _elem392 = iprot.readI64()
            self.order_from_ids.append(_elem392)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.proxy_ids = []
          (_etype396, _size393) = iprot.readListBegin()
          for _i397 in xrange(_size393):
            _elem398 = iprot.readString()
            self.proxy_ids.append(_elem398)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.promotion_channel_codes = []
          (_etype402, _size399) = iprot.readListBegin()
          for _i403 in xrange(_size399):
            _elem404 = iprot.readString()
            self.promotion_channel_codes.append(_elem404)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityChannel')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.order_from_ids is not None:
      oprot.writeFieldBegin('order_from_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.order_from_ids))
      for iter405 in self.order_from_ids:
        oprot.writeI64(iter405)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.proxy_ids is not None:
      oprot.writeFieldBegin('proxy_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.proxy_ids))
      for iter406 in self.proxy_ids:
        oprot.writeString(iter406)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion_channel_codes is not None:
      oprot.writeFieldBegin('promotion_channel_codes', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.promotion_channel_codes))
      for iter407 in self.promotion_channel_codes:
        oprot.writeString(iter407)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.order_from_ids)
    value = (value * 31) ^ hash(self.proxy_ids)
    value = (value * 31) ^ hash(self.promotion_channel_codes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongbaoFullBackRule:
  """
  Attributes:
   - full_amount
   - back_amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'full_amount', None, None, ), # 1
    (2, TType.DOUBLE, 'back_amount', None, None, ), # 2
  )

  def __init__(self, full_amount=None, back_amount=None,):
    self.full_amount = full_amount
    self.back_amount = back_amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.full_amount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.back_amount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongbaoFullBackRule')
    if self.full_amount is not None:
      oprot.writeFieldBegin('full_amount', TType.DOUBLE, 1)
      oprot.writeDouble(self.full_amount)
      oprot.writeFieldEnd()
    if self.back_amount is not None:
      oprot.writeFieldBegin('back_amount', TType.DOUBLE, 2)
      oprot.writeDouble(self.back_amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.full_amount)
    value = (value * 31) ^ hash(self.back_amount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongbaoRecord:
  """
  Attributes:
   - record_id
   - recharge_type
   - tag
   - face_value
   - income_id
   - valid_date
   - activity_id
   - status
   - order_time_from
   - order_time_to
   - is_order_valid
   - check_in_abs_date_from
   - check_in_abs_date_to
   - is_check_in_abs_valid
   - order_relative_days_from
   - order_relative_days_to
   - is_check_in_relative_valid
   - activity_channel
   - pay_types
   - hongbao_full_back_rule
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'record_id', None, None, ), # 1
    (2, TType.I32, 'recharge_type', None, None, ), # 2
    (3, TType.I32, 'tag', None, None, ), # 3
    (4, TType.DOUBLE, 'face_value', None, None, ), # 4
    (5, TType.I64, 'income_id', None, None, ), # 5
    (6, TType.STRING, 'valid_date', None, None, ), # 6
    (7, TType.I32, 'activity_id', None, None, ), # 7
    None, # 8
    (9, TType.I32, 'status', None, None, ), # 9
    None, # 10
    (11, TType.STRING, 'order_time_from', None, None, ), # 11
    (12, TType.STRING, 'order_time_to', None, None, ), # 12
    (13, TType.BOOL, 'is_order_valid', None, None, ), # 13
    (14, TType.STRING, 'check_in_abs_date_from', None, None, ), # 14
    (15, TType.STRING, 'check_in_abs_date_to', None, None, ), # 15
    (16, TType.BOOL, 'is_check_in_abs_valid', None, None, ), # 16
    (17, TType.I32, 'order_relative_days_from', None, None, ), # 17
    (18, TType.I32, 'order_relative_days_to', None, None, ), # 18
    (19, TType.BOOL, 'is_check_in_relative_valid', None, None, ), # 19
    (20, TType.LIST, 'activity_channel', (TType.STRUCT,(ActivityChannel, ActivityChannel.thrift_spec)), None, ), # 20
    (21, TType.LIST, 'pay_types', (TType.STRING,None), None, ), # 21
    (22, TType.STRUCT, 'hongbao_full_back_rule', (HongbaoFullBackRule, HongbaoFullBackRule.thrift_spec), None, ), # 22
  )

  def __init__(self, record_id=None, recharge_type=None, tag=None, face_value=None, income_id=None, valid_date=None, activity_id=None, status=None, order_time_from=None, order_time_to=None, is_order_valid=None, check_in_abs_date_from=None, check_in_abs_date_to=None, is_check_in_abs_valid=None, order_relative_days_from=None, order_relative_days_to=None, is_check_in_relative_valid=None, activity_channel=None, pay_types=None, hongbao_full_back_rule=None,):
    self.record_id = record_id
    self.recharge_type = recharge_type
    self.tag = tag
    self.face_value = face_value
    self.income_id = income_id
    self.valid_date = valid_date
    self.activity_id = activity_id
    self.status = status
    self.order_time_from = order_time_from
    self.order_time_to = order_time_to
    self.is_order_valid = is_order_valid
    self.check_in_abs_date_from = check_in_abs_date_from
    self.check_in_abs_date_to = check_in_abs_date_to
    self.is_check_in_abs_valid = is_check_in_abs_valid
    self.order_relative_days_from = order_relative_days_from
    self.order_relative_days_to = order_relative_days_to
    self.is_check_in_relative_valid = is_check_in_relative_valid
    self.activity_channel = activity_channel
    self.pay_types = pay_types
    self.hongbao_full_back_rule = hongbao_full_back_rule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.record_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.recharge_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tag = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.face_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.income_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.valid_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.activity_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.order_time_from = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.order_time_to = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.is_order_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.check_in_abs_date_from = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.check_in_abs_date_to = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.is_check_in_abs_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.order_relative_days_from = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.order_relative_days_to = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_check_in_relative_valid = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.activity_channel = []
          (_etype411, _size408) = iprot.readListBegin()
          for _i412 in xrange(_size408):
            _elem413 = ActivityChannel()
            _elem413.read(iprot)
            self.activity_channel.append(_elem413)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.pay_types = []
          (_etype417, _size414) = iprot.readListBegin()
          for _i418 in xrange(_size414):
            _elem419 = iprot.readString()
            self.pay_types.append(_elem419)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.hongbao_full_back_rule = HongbaoFullBackRule()
          self.hongbao_full_back_rule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongbaoRecord')
    if self.record_id is not None:
      oprot.writeFieldBegin('record_id', TType.I32, 1)
      oprot.writeI32(self.record_id)
      oprot.writeFieldEnd()
    if self.recharge_type is not None:
      oprot.writeFieldBegin('recharge_type', TType.I32, 2)
      oprot.writeI32(self.recharge_type)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.I32, 3)
      oprot.writeI32(self.tag)
      oprot.writeFieldEnd()
    if self.face_value is not None:
      oprot.writeFieldBegin('face_value', TType.DOUBLE, 4)
      oprot.writeDouble(self.face_value)
      oprot.writeFieldEnd()
    if self.income_id is not None:
      oprot.writeFieldBegin('income_id', TType.I64, 5)
      oprot.writeI64(self.income_id)
      oprot.writeFieldEnd()
    if self.valid_date is not None:
      oprot.writeFieldBegin('valid_date', TType.STRING, 6)
      oprot.writeString(self.valid_date)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I32, 7)
      oprot.writeI32(self.activity_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.order_time_from is not None:
      oprot.writeFieldBegin('order_time_from', TType.STRING, 11)
      oprot.writeString(self.order_time_from)
      oprot.writeFieldEnd()
    if self.order_time_to is not None:
      oprot.writeFieldBegin('order_time_to', TType.STRING, 12)
      oprot.writeString(self.order_time_to)
      oprot.writeFieldEnd()
    if self.is_order_valid is not None:
      oprot.writeFieldBegin('is_order_valid', TType.BOOL, 13)
      oprot.writeBool(self.is_order_valid)
      oprot.writeFieldEnd()
    if self.check_in_abs_date_from is not None:
      oprot.writeFieldBegin('check_in_abs_date_from', TType.STRING, 14)
      oprot.writeString(self.check_in_abs_date_from)
      oprot.writeFieldEnd()
    if self.check_in_abs_date_to is not None:
      oprot.writeFieldBegin('check_in_abs_date_to', TType.STRING, 15)
      oprot.writeString(self.check_in_abs_date_to)
      oprot.writeFieldEnd()
    if self.is_check_in_abs_valid is not None:
      oprot.writeFieldBegin('is_check_in_abs_valid', TType.BOOL, 16)
      oprot.writeBool(self.is_check_in_abs_valid)
      oprot.writeFieldEnd()
    if self.order_relative_days_from is not None:
      oprot.writeFieldBegin('order_relative_days_from', TType.I32, 17)
      oprot.writeI32(self.order_relative_days_from)
      oprot.writeFieldEnd()
    if self.order_relative_days_to is not None:
      oprot.writeFieldBegin('order_relative_days_to', TType.I32, 18)
      oprot.writeI32(self.order_relative_days_to)
      oprot.writeFieldEnd()
    if self.is_check_in_relative_valid is not None:
      oprot.writeFieldBegin('is_check_in_relative_valid', TType.BOOL, 19)
      oprot.writeBool(self.is_check_in_relative_valid)
      oprot.writeFieldEnd()
    if self.activity_channel is not None:
      oprot.writeFieldBegin('activity_channel', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.activity_channel))
      for iter420 in self.activity_channel:
        iter420.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pay_types is not None:
      oprot.writeFieldBegin('pay_types', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.pay_types))
      for iter421 in self.pay_types:
        oprot.writeString(iter421)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hongbao_full_back_rule is not None:
      oprot.writeFieldBegin('hongbao_full_back_rule', TType.STRUCT, 22)
      self.hongbao_full_back_rule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record_id)
    value = (value * 31) ^ hash(self.recharge_type)
    value = (value * 31) ^ hash(self.tag)
    value = (value * 31) ^ hash(self.face_value)
    value = (value * 31) ^ hash(self.income_id)
    value = (value * 31) ^ hash(self.valid_date)
    value = (value * 31) ^ hash(self.activity_id)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.order_time_from)
    value = (value * 31) ^ hash(self.order_time_to)
    value = (value * 31) ^ hash(self.is_order_valid)
    value = (value * 31) ^ hash(self.check_in_abs_date_from)
    value = (value * 31) ^ hash(self.check_in_abs_date_to)
    value = (value * 31) ^ hash(self.is_check_in_abs_valid)
    value = (value * 31) ^ hash(self.order_relative_days_from)
    value = (value * 31) ^ hash(self.order_relative_days_to)
    value = (value * 31) ^ hash(self.is_check_in_relative_valid)
    value = (value * 31) ^ hash(self.activity_channel)
    value = (value * 31) ^ hash(self.pay_types)
    value = (value * 31) ^ hash(self.hongbao_full_back_rule)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductTypeBlackList:
  """
  Attributes:
   - product_type
   - supplier_ids
   - partial_match
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_type', None, None, ), # 1
    (2, TType.LIST, 'supplier_ids', (TType.I64,None), None, ), # 2
    (3, TType.BOOL, 'partial_match', None, None, ), # 3
  )

  def __init__(self, product_type=None, supplier_ids=None, partial_match=None,):
    self.product_type = product_type
    self.supplier_ids = supplier_ids
    self.partial_match = partial_match

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.supplier_ids = []
          (_etype425, _size422) = iprot.readListBegin()
          for _i426 in xrange(_size422):
            _elem427 = iprot.readI64()
            self.supplier_ids.append(_elem427)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.partial_match = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductTypeBlackList')
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I32, 1)
      oprot.writeI32(self.product_type)
      oprot.writeFieldEnd()
    if self.supplier_ids is not None:
      oprot.writeFieldBegin('supplier_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.supplier_ids))
      for iter428 in self.supplier_ids:
        oprot.writeI64(iter428)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partial_match is not None:
      oprot.writeFieldBegin('partial_match', TType.BOOL, 3)
      oprot.writeBool(self.partial_match)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.supplier_ids)
    value = (value * 31) ^ hash(self.partial_match)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterCondition:
  """
  Attributes:
   - type
   - use_or_not
   - filter_value
   - apply_level
   - exclude_value_array
   - partial_match
   - ptb
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'use_or_not', None, None, ), # 2
    (3, TType.I32, 'filter_value', None, None, ), # 3
    (4, TType.I32, 'apply_level', None, None, ), # 4
    (5, TType.LIST, 'exclude_value_array', (TType.I64,None), None, ), # 5
    (6, TType.BOOL, 'partial_match', None, None, ), # 6
    (7, TType.LIST, 'ptb', (TType.STRUCT,(ProductTypeBlackList, ProductTypeBlackList.thrift_spec)), None, ), # 7
  )

  def __init__(self, type=None, use_or_not=None, filter_value=None, apply_level=None, exclude_value_array=None, partial_match=None, ptb=None,):
    self.type = type
    self.use_or_not = use_or_not
    self.filter_value = filter_value
    self.apply_level = apply_level
    self.exclude_value_array = exclude_value_array
    self.partial_match = partial_match
    self.ptb = ptb

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.use_or_not = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.filter_value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.apply_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.exclude_value_array = []
          (_etype432, _size429) = iprot.readListBegin()
          for _i433 in xrange(_size429):
            _elem434 = iprot.readI64()
            self.exclude_value_array.append(_elem434)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.partial_match = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.ptb = []
          (_etype438, _size435) = iprot.readListBegin()
          for _i439 in xrange(_size435):
            _elem440 = ProductTypeBlackList()
            _elem440.read(iprot)
            self.ptb.append(_elem440)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterCondition')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.use_or_not is not None:
      oprot.writeFieldBegin('use_or_not', TType.I32, 2)
      oprot.writeI32(self.use_or_not)
      oprot.writeFieldEnd()
    if self.filter_value is not None:
      oprot.writeFieldBegin('filter_value', TType.I32, 3)
      oprot.writeI32(self.filter_value)
      oprot.writeFieldEnd()
    if self.apply_level is not None:
      oprot.writeFieldBegin('apply_level', TType.I32, 4)
      oprot.writeI32(self.apply_level)
      oprot.writeFieldEnd()
    if self.exclude_value_array is not None:
      oprot.writeFieldBegin('exclude_value_array', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.exclude_value_array))
      for iter441 in self.exclude_value_array:
        oprot.writeI64(iter441)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partial_match is not None:
      oprot.writeFieldBegin('partial_match', TType.BOOL, 6)
      oprot.writeBool(self.partial_match)
      oprot.writeFieldEnd()
    if self.ptb is not None:
      oprot.writeFieldBegin('ptb', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.ptb))
      for iter442 in self.ptb:
        iter442.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.use_or_not)
    value = (value * 31) ^ hash(self.filter_value)
    value = (value * 31) ^ hash(self.apply_level)
    value = (value * 31) ^ hash(self.exclude_value_array)
    value = (value * 31) ^ hash(self.partial_match)
    value = (value * 31) ^ hash(self.ptb)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCreditLiveInfo:
  """
  Attributes:
   - flash_live_filter
   - credit_live_filter
   - credit_value_live_filter
   - user_credit_value
   - flash_live_period
   - credit_live_period
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'flash_live_filter', None, None, ), # 1
    (2, TType.BOOL, 'credit_live_filter', None, None, ), # 2
    (3, TType.BOOL, 'credit_value_live_filter', None, None, ), # 3
    (4, TType.DOUBLE, 'user_credit_value', None, None, ), # 4
    (5, TType.I32, 'flash_live_period', None, None, ), # 5
    (6, TType.I32, 'credit_live_period', None, None, ), # 6
  )

  def __init__(self, flash_live_filter=None, credit_live_filter=None, credit_value_live_filter=None, user_credit_value=None, flash_live_period=None, credit_live_period=None,):
    self.flash_live_filter = flash_live_filter
    self.credit_live_filter = credit_live_filter
    self.credit_value_live_filter = credit_value_live_filter
    self.user_credit_value = user_credit_value
    self.flash_live_period = flash_live_period
    self.credit_live_period = credit_live_period

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.flash_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.credit_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.credit_value_live_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.user_credit_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.flash_live_period = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.credit_live_period = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCreditLiveInfo')
    if self.flash_live_filter is not None:
      oprot.writeFieldBegin('flash_live_filter', TType.BOOL, 1)
      oprot.writeBool(self.flash_live_filter)
      oprot.writeFieldEnd()
    if self.credit_live_filter is not None:
      oprot.writeFieldBegin('credit_live_filter', TType.BOOL, 2)
      oprot.writeBool(self.credit_live_filter)
      oprot.writeFieldEnd()
    if self.credit_value_live_filter is not None:
      oprot.writeFieldBegin('credit_value_live_filter', TType.BOOL, 3)
      oprot.writeBool(self.credit_value_live_filter)
      oprot.writeFieldEnd()
    if self.user_credit_value is not None:
      oprot.writeFieldBegin('user_credit_value', TType.DOUBLE, 4)
      oprot.writeDouble(self.user_credit_value)
      oprot.writeFieldEnd()
    if self.flash_live_period is not None:
      oprot.writeFieldBegin('flash_live_period', TType.I32, 5)
      oprot.writeI32(self.flash_live_period)
      oprot.writeFieldEnd()
    if self.credit_live_period is not None:
      oprot.writeFieldBegin('credit_live_period', TType.I32, 6)
      oprot.writeI32(self.credit_live_period)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.flash_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field flash_live_filter is unset!')
    if self.credit_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field credit_live_filter is unset!')
    if self.credit_value_live_filter is None:
      raise TProtocol.TProtocolException(message='Required field credit_value_live_filter is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flash_live_filter)
    value = (value * 31) ^ hash(self.credit_live_filter)
    value = (value * 31) ^ hash(self.credit_value_live_filter)
    value = (value * 31) ^ hash(self.user_credit_value)
    value = (value * 31) ^ hash(self.flash_live_period)
    value = (value * 31) ^ hash(self.credit_live_period)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductAttribute:
  """
  Attributes:
   - stay_date
   - price_pair
   - price_pair_type
   - guarantee
   - payment_methods
   - promotion_channel_code
   - promotion_type_ids
   - need_first_day_have_invertory
   - only_limitime_sale
   - price_type
   - product_type
   - sell_channel
   - search_price_type
   - inventory_type
   - need7daygift
   - return_noinv_or_noprice_product
   - return_has_coupon_hotel
   - return_has_no_danbao_hotel
   - return_longcuionly_hotel
   - return_has_hongbao_hotel
   - list_product_info
   - return_has_lianzhu_pro_hotel
   - return_has_zaoding_pro_hotel
   - half_discount_promotion
   - return_has_discount_promotion_hotel
   - return_freesale_msg
   - return_has_allbuyroom_hotel
   - discount_method
   - min_price_calc_with_halfdiscount_pro
   - use_day_promotion
   - promotion_black_list
   - return_has_memberbenefits_hotel
   - filter_conditions
   - booking_menu
   - min_price_excluded_products
   - return_assemble_product
   - hong_bao_records
   - is_new_hongbao
   - cooperation_type
   - has_majia
   - has_zydj
   - mvt_strategy
   - return_has_resale_hotel
   - has_exclusive_price
   - return_hotel_ticket_product
   - pre_pay_hotel_level_filter
   - cash_pay_hotel_level_filter
   - order_by_user_credit_filter
   - promotion_percentage_range
   - return_min_ac_price_simple_product
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'stay_date', (StayDate, StayDate.thrift_spec), None, ), # 1
    (2, TType.LIST, 'price_pair', (TType.STRUCT,(PricePair, PricePair.thrift_spec)), None, ), # 2
    (3, TType.BOOL, 'guarantee', None, None, ), # 3
    (4, TType.LIST, 'payment_methods', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'promotion_channel_code', None, None, ), # 5
    (6, TType.LIST, 'promotion_type_ids', (TType.I32,None), None, ), # 6
    (7, TType.BOOL, 'need_first_day_have_invertory', None, None, ), # 7
    (8, TType.BOOL, 'only_limitime_sale', None, None, ), # 8
    (9, TType.I32, 'price_type', None, None, ), # 9
    (10, TType.LIST, 'product_type', (TType.I32,None), None, ), # 10
    (11, TType.LIST, 'sell_channel', (TType.I32,None), None, ), # 11
    (12, TType.I32, 'search_price_type', None, None, ), # 12
    (13, TType.I32, 'inventory_type', None, None, ), # 13
    (14, TType.BOOL, 'need7daygift', None, None, ), # 14
    (15, TType.BOOL, 'return_noinv_or_noprice_product', None, None, ), # 15
    (16, TType.BOOL, 'return_has_coupon_hotel', None, None, ), # 16
    (17, TType.BOOL, 'return_has_no_danbao_hotel', None, None, ), # 17
    (18, TType.I32, 'price_pair_type', None, None, ), # 18
    (19, TType.BOOL, 'return_longcuionly_hotel', None, None, ), # 19
    (20, TType.BOOL, 'return_has_hongbao_hotel', None, None, ), # 20
    (21, TType.STRUCT, 'list_product_info', (ListProductInfo, ListProductInfo.thrift_spec), None, ), # 21
    (22, TType.BOOL, 'return_has_lianzhu_pro_hotel', None, None, ), # 22
    (23, TType.BOOL, 'return_has_zaoding_pro_hotel', None, None, ), # 23
    (24, TType.BOOL, 'half_discount_promotion', None, None, ), # 24
    (25, TType.BOOL, 'return_has_discount_promotion_hotel', None, None, ), # 25
    (26, TType.BOOL, 'return_freesale_msg', None, None, ), # 26
    (27, TType.BOOL, 'return_has_allbuyroom_hotel', None, None, ), # 27
    (28, TType.I32, 'discount_method', None, None, ), # 28
    (29, TType.I32, 'min_price_calc_with_halfdiscount_pro', None, None, ), # 29
    (30, TType.BOOL, 'use_day_promotion', None, None, ), # 30
    (31, TType.LIST, 'promotion_black_list', (TType.STRUCT,(PromotionBlackList, PromotionBlackList.thrift_spec)), None, ), # 31
    (32, TType.BOOL, 'return_has_memberbenefits_hotel', None, None, ), # 32
    (33, TType.LIST, 'filter_conditions', (TType.STRUCT,(FilterCondition, FilterCondition.thrift_spec)), None, ), # 33
    (34, TType.I32, 'booking_menu', None, None, ), # 34
    (35, TType.I32, 'min_price_excluded_products', None, None, ), # 35
    (36, TType.LIST, 'return_assemble_product', (TType.I32,None), None, ), # 36
    (37, TType.LIST, 'hong_bao_records', (TType.STRUCT,(HongbaoRecord, HongbaoRecord.thrift_spec)), None, ), # 37
    (38, TType.BOOL, 'is_new_hongbao', None, None, ), # 38
    None, # 39
    (40, TType.LIST, 'cooperation_type', (TType.I32,None), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.BOOL, 'has_majia', None, None, ), # 100
    (101, TType.BOOL, 'has_zydj', None, None, ), # 101
    (102, TType.STRING, 'mvt_strategy', None, None, ), # 102
    (103, TType.BOOL, 'return_has_resale_hotel', None, None, ), # 103
    (104, TType.BOOL, 'has_exclusive_price', None, None, ), # 104
    (105, TType.BOOL, 'return_hotel_ticket_product', None, None, ), # 105
    (106, TType.LIST, 'pre_pay_hotel_level_filter', (TType.I32,None), None, ), # 106
    (107, TType.LIST, 'cash_pay_hotel_level_filter', (TType.I32,None), None, ), # 107
    (108, TType.STRUCT, 'order_by_user_credit_filter', (UserCreditLiveInfo, UserCreditLiveInfo.thrift_spec), None, ), # 108
    (109, TType.LIST, 'promotion_percentage_range', (TType.DOUBLE,None), None, ), # 109
    (110, TType.BOOL, 'return_min_ac_price_simple_product', None, None, ), # 110
  )

  def __init__(self, stay_date=None, price_pair=None, price_pair_type=None, guarantee=None, payment_methods=None, promotion_channel_code=None, promotion_type_ids=None, need_first_day_have_invertory=None, only_limitime_sale=None, price_type=None, product_type=None, sell_channel=None, search_price_type=None, inventory_type=None, need7daygift=None, return_noinv_or_noprice_product=None, return_has_coupon_hotel=None, return_has_no_danbao_hotel=None, return_longcuionly_hotel=None, return_has_hongbao_hotel=None, list_product_info=None, return_has_lianzhu_pro_hotel=None, return_has_zaoding_pro_hotel=None, half_discount_promotion=None, return_has_discount_promotion_hotel=None, return_freesale_msg=None, return_has_allbuyroom_hotel=None, discount_method=None, min_price_calc_with_halfdiscount_pro=None, use_day_promotion=None, promotion_black_list=None, return_has_memberbenefits_hotel=None, filter_conditions=None, booking_menu=None, min_price_excluded_products=None, return_assemble_product=None, hong_bao_records=None, is_new_hongbao=None, cooperation_type=None, has_majia=None, has_zydj=None, mvt_strategy=None, return_has_resale_hotel=None, has_exclusive_price=None, return_hotel_ticket_product=None, pre_pay_hotel_level_filter=None, cash_pay_hotel_level_filter=None, order_by_user_credit_filter=None, promotion_percentage_range=None, return_min_ac_price_simple_product=None,):
    self.stay_date = stay_date
    self.price_pair = price_pair
    self.price_pair_type = price_pair_type
    self.guarantee = guarantee
    self.payment_methods = payment_methods
    self.promotion_channel_code = promotion_channel_code
    self.promotion_type_ids = promotion_type_ids
    self.need_first_day_have_invertory = need_first_day_have_invertory
    self.only_limitime_sale = only_limitime_sale
    self.price_type = price_type
    self.product_type = product_type
    self.sell_channel = sell_channel
    self.search_price_type = search_price_type
    self.inventory_type = inventory_type
    self.need7daygift = need7daygift
    self.return_noinv_or_noprice_product = return_noinv_or_noprice_product
    self.return_has_coupon_hotel = return_has_coupon_hotel
    self.return_has_no_danbao_hotel = return_has_no_danbao_hotel
    self.return_longcuionly_hotel = return_longcuionly_hotel
    self.return_has_hongbao_hotel = return_has_hongbao_hotel
    self.list_product_info = list_product_info
    self.return_has_lianzhu_pro_hotel = return_has_lianzhu_pro_hotel
    self.return_has_zaoding_pro_hotel = return_has_zaoding_pro_hotel
    self.half_discount_promotion = half_discount_promotion
    self.return_has_discount_promotion_hotel = return_has_discount_promotion_hotel
    self.return_freesale_msg = return_freesale_msg
    self.return_has_allbuyroom_hotel = return_has_allbuyroom_hotel
    self.discount_method = discount_method
    self.min_price_calc_with_halfdiscount_pro = min_price_calc_with_halfdiscount_pro
    self.use_day_promotion = use_day_promotion
    self.promotion_black_list = promotion_black_list
    self.return_has_memberbenefits_hotel = return_has_memberbenefits_hotel
    self.filter_conditions = filter_conditions
    self.booking_menu = booking_menu
    self.min_price_excluded_products = min_price_excluded_products
    self.return_assemble_product = return_assemble_product
    self.hong_bao_records = hong_bao_records
    self.is_new_hongbao = is_new_hongbao
    self.cooperation_type = cooperation_type
    self.has_majia = has_majia
    self.has_zydj = has_zydj
    self.mvt_strategy = mvt_strategy
    self.return_has_resale_hotel = return_has_resale_hotel
    self.has_exclusive_price = has_exclusive_price
    self.return_hotel_ticket_product = return_hotel_ticket_product
    self.pre_pay_hotel_level_filter = pre_pay_hotel_level_filter
    self.cash_pay_hotel_level_filter = cash_pay_hotel_level_filter
    self.order_by_user_credit_filter = order_by_user_credit_filter
    self.promotion_percentage_range = promotion_percentage_range
    self.return_min_ac_price_simple_product = return_min_ac_price_simple_product

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.stay_date = StayDate()
          self.stay_date.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.price_pair = []
          (_etype446, _size443) = iprot.readListBegin()
          for _i447 in xrange(_size443):
            _elem448 = PricePair()
            _elem448.read(iprot)
            self.price_pair.append(_elem448)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.price_pair_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.guarantee = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.payment_methods = []
          (_etype452, _size449) = iprot.readListBegin()
          for _i453 in xrange(_size449):
            _elem454 = iprot.readI32()
            self.payment_methods.append(_elem454)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.promotion_channel_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.promotion_type_ids = []
          (_etype458, _size455) = iprot.readListBegin()
          for _i459 in xrange(_size455):
            _elem460 = iprot.readI32()
            self.promotion_type_ids.append(_elem460)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.need_first_day_have_invertory = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.only_limitime_sale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.price_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.product_type = []
          (_etype464, _size461) = iprot.readListBegin()
          for _i465 in xrange(_size461):
            _elem466 = iprot.readI32()
            self.product_type.append(_elem466)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.sell_channel = []
          (_etype470, _size467) = iprot.readListBegin()
          for _i471 in xrange(_size467):
            _elem472 = iprot.readI32()
            self.sell_channel.append(_elem472)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.search_price_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.inventory_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.need7daygift = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.return_noinv_or_noprice_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.return_has_coupon_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.return_has_no_danbao_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.return_longcuionly_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.return_has_hongbao_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.list_product_info = ListProductInfo()
          self.list_product_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.return_has_lianzhu_pro_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.return_has_zaoding_pro_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.half_discount_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.return_has_discount_promotion_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.return_freesale_msg = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.return_has_allbuyroom_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.discount_method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.min_price_calc_with_halfdiscount_pro = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.use_day_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.LIST:
          self.promotion_black_list = []
          (_etype476, _size473) = iprot.readListBegin()
          for _i477 in xrange(_size473):
            _elem478 = PromotionBlackList()
            _elem478.read(iprot)
            self.promotion_black_list.append(_elem478)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.BOOL:
          self.return_has_memberbenefits_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.LIST:
          self.filter_conditions = []
          (_etype482, _size479) = iprot.readListBegin()
          for _i483 in xrange(_size479):
            _elem484 = FilterCondition()
            _elem484.read(iprot)
            self.filter_conditions.append(_elem484)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.booking_menu = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.min_price_excluded_products = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.LIST:
          self.return_assemble_product = []
          (_etype488, _size485) = iprot.readListBegin()
          for _i489 in xrange(_size485):
            _elem490 = iprot.readI32()
            self.return_assemble_product.append(_elem490)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.LIST:
          self.hong_bao_records = []
          (_etype494, _size491) = iprot.readListBegin()
          for _i495 in xrange(_size491):
            _elem496 = HongbaoRecord()
            _elem496.read(iprot)
            self.hong_bao_records.append(_elem496)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.BOOL:
          self.is_new_hongbao = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.LIST:
          self.cooperation_type = []
          (_etype500, _size497) = iprot.readListBegin()
          for _i501 in xrange(_size497):
            _elem502 = iprot.readI32()
            self.cooperation_type.append(_elem502)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.BOOL:
          self.has_majia = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.BOOL:
          self.has_zydj = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 102:
        if ftype == TType.STRING:
          self.mvt_strategy = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 103:
        if ftype == TType.BOOL:
          self.return_has_resale_hotel = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 104:
        if ftype == TType.BOOL:
          self.has_exclusive_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.BOOL:
          self.return_hotel_ticket_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 106:
        if ftype == TType.LIST:
          self.pre_pay_hotel_level_filter = []
          (_etype506, _size503) = iprot.readListBegin()
          for _i507 in xrange(_size503):
            _elem508 = iprot.readI32()
            self.pre_pay_hotel_level_filter.append(_elem508)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 107:
        if ftype == TType.LIST:
          self.cash_pay_hotel_level_filter = []
          (_etype512, _size509) = iprot.readListBegin()
          for _i513 in xrange(_size509):
            _elem514 = iprot.readI32()
            self.cash_pay_hotel_level_filter.append(_elem514)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 108:
        if ftype == TType.STRUCT:
          self.order_by_user_credit_filter = UserCreditLiveInfo()
          self.order_by_user_credit_filter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 109:
        if ftype == TType.LIST:
          self.promotion_percentage_range = []
          (_etype518, _size515) = iprot.readListBegin()
          for _i519 in xrange(_size515):
            _elem520 = iprot.readDouble()
            self.promotion_percentage_range.append(_elem520)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 110:
        if ftype == TType.BOOL:
          self.return_min_ac_price_simple_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductAttribute')
    if self.stay_date is not None:
      oprot.writeFieldBegin('stay_date', TType.STRUCT, 1)
      self.stay_date.write(oprot)
      oprot.writeFieldEnd()
    if self.price_pair is not None:
      oprot.writeFieldBegin('price_pair', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.price_pair))
      for iter521 in self.price_pair:
        iter521.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.guarantee is not None:
      oprot.writeFieldBegin('guarantee', TType.BOOL, 3)
      oprot.writeBool(self.guarantee)
      oprot.writeFieldEnd()
    if self.payment_methods is not None:
      oprot.writeFieldBegin('payment_methods', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.payment_methods))
      for iter522 in self.payment_methods:
        oprot.writeI32(iter522)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion_channel_code is not None:
      oprot.writeFieldBegin('promotion_channel_code', TType.STRING, 5)
      oprot.writeString(self.promotion_channel_code)
      oprot.writeFieldEnd()
    if self.promotion_type_ids is not None:
      oprot.writeFieldBegin('promotion_type_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.promotion_type_ids))
      for iter523 in self.promotion_type_ids:
        oprot.writeI32(iter523)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.need_first_day_have_invertory is not None:
      oprot.writeFieldBegin('need_first_day_have_invertory', TType.BOOL, 7)
      oprot.writeBool(self.need_first_day_have_invertory)
      oprot.writeFieldEnd()
    if self.only_limitime_sale is not None:
      oprot.writeFieldBegin('only_limitime_sale', TType.BOOL, 8)
      oprot.writeBool(self.only_limitime_sale)
      oprot.writeFieldEnd()
    if self.price_type is not None:
      oprot.writeFieldBegin('price_type', TType.I32, 9)
      oprot.writeI32(self.price_type)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.product_type))
      for iter524 in self.product_type:
        oprot.writeI32(iter524)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sell_channel is not None:
      oprot.writeFieldBegin('sell_channel', TType.LIST, 11)
      oprot.writeListBegin(TType.I32, len(self.sell_channel))
      for iter525 in self.sell_channel:
        oprot.writeI32(iter525)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.search_price_type is not None:
      oprot.writeFieldBegin('search_price_type', TType.I32, 12)
      oprot.writeI32(self.search_price_type)
      oprot.writeFieldEnd()
    if self.inventory_type is not None:
      oprot.writeFieldBegin('inventory_type', TType.I32, 13)
      oprot.writeI32(self.inventory_type)
      oprot.writeFieldEnd()
    if self.need7daygift is not None:
      oprot.writeFieldBegin('need7daygift', TType.BOOL, 14)
      oprot.writeBool(self.need7daygift)
      oprot.writeFieldEnd()
    if self.return_noinv_or_noprice_product is not None:
      oprot.writeFieldBegin('return_noinv_or_noprice_product', TType.BOOL, 15)
      oprot.writeBool(self.return_noinv_or_noprice_product)
      oprot.writeFieldEnd()
    if self.return_has_coupon_hotel is not None:
      oprot.writeFieldBegin('return_has_coupon_hotel', TType.BOOL, 16)
      oprot.writeBool(self.return_has_coupon_hotel)
      oprot.writeFieldEnd()
    if self.return_has_no_danbao_hotel is not None:
      oprot.writeFieldBegin('return_has_no_danbao_hotel', TType.BOOL, 17)
      oprot.writeBool(self.return_has_no_danbao_hotel)
      oprot.writeFieldEnd()
    if self.price_pair_type is not None:
      oprot.writeFieldBegin('price_pair_type', TType.I32, 18)
      oprot.writeI32(self.price_pair_type)
      oprot.writeFieldEnd()
    if self.return_longcuionly_hotel is not None:
      oprot.writeFieldBegin('return_longcuionly_hotel', TType.BOOL, 19)
      oprot.writeBool(self.return_longcuionly_hotel)
      oprot.writeFieldEnd()
    if self.return_has_hongbao_hotel is not None:
      oprot.writeFieldBegin('return_has_hongbao_hotel', TType.BOOL, 20)
      oprot.writeBool(self.return_has_hongbao_hotel)
      oprot.writeFieldEnd()
    if self.list_product_info is not None:
      oprot.writeFieldBegin('list_product_info', TType.STRUCT, 21)
      self.list_product_info.write(oprot)
      oprot.writeFieldEnd()
    if self.return_has_lianzhu_pro_hotel is not None:
      oprot.writeFieldBegin('return_has_lianzhu_pro_hotel', TType.BOOL, 22)
      oprot.writeBool(self.return_has_lianzhu_pro_hotel)
      oprot.writeFieldEnd()
    if self.return_has_zaoding_pro_hotel is not None:
      oprot.writeFieldBegin('return_has_zaoding_pro_hotel', TType.BOOL, 23)
      oprot.writeBool(self.return_has_zaoding_pro_hotel)
      oprot.writeFieldEnd()
    if self.half_discount_promotion is not None:
      oprot.writeFieldBegin('half_discount_promotion', TType.BOOL, 24)
      oprot.writeBool(self.half_discount_promotion)
      oprot.writeFieldEnd()
    if self.return_has_discount_promotion_hotel is not None:
      oprot.writeFieldBegin('return_has_discount_promotion_hotel', TType.BOOL, 25)
      oprot.writeBool(self.return_has_discount_promotion_hotel)
      oprot.writeFieldEnd()
    if self.return_freesale_msg is not None:
      oprot.writeFieldBegin('return_freesale_msg', TType.BOOL, 26)
      oprot.writeBool(self.return_freesale_msg)
      oprot.writeFieldEnd()
    if self.return_has_allbuyroom_hotel is not None:
      oprot.writeFieldBegin('return_has_allbuyroom_hotel', TType.BOOL, 27)
      oprot.writeBool(self.return_has_allbuyroom_hotel)
      oprot.writeFieldEnd()
    if self.discount_method is not None:
      oprot.writeFieldBegin('discount_method', TType.I32, 28)
      oprot.writeI32(self.discount_method)
      oprot.writeFieldEnd()
    if self.min_price_calc_with_halfdiscount_pro is not None:
      oprot.writeFieldBegin('min_price_calc_with_halfdiscount_pro', TType.I32, 29)
      oprot.writeI32(self.min_price_calc_with_halfdiscount_pro)
      oprot.writeFieldEnd()
    if self.use_day_promotion is not None:
      oprot.writeFieldBegin('use_day_promotion', TType.BOOL, 30)
      oprot.writeBool(self.use_day_promotion)
      oprot.writeFieldEnd()
    if self.promotion_black_list is not None:
      oprot.writeFieldBegin('promotion_black_list', TType.LIST, 31)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_black_list))
      for iter526 in self.promotion_black_list:
        iter526.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_has_memberbenefits_hotel is not None:
      oprot.writeFieldBegin('return_has_memberbenefits_hotel', TType.BOOL, 32)
      oprot.writeBool(self.return_has_memberbenefits_hotel)
      oprot.writeFieldEnd()
    if self.filter_conditions is not None:
      oprot.writeFieldBegin('filter_conditions', TType.LIST, 33)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_conditions))
      for iter527 in self.filter_conditions:
        iter527.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_menu is not None:
      oprot.writeFieldBegin('booking_menu', TType.I32, 34)
      oprot.writeI32(self.booking_menu)
      oprot.writeFieldEnd()
    if self.min_price_excluded_products is not None:
      oprot.writeFieldBegin('min_price_excluded_products', TType.I32, 35)
      oprot.writeI32(self.min_price_excluded_products)
      oprot.writeFieldEnd()
    if self.return_assemble_product is not None:
      oprot.writeFieldBegin('return_assemble_product', TType.LIST, 36)
      oprot.writeListBegin(TType.I32, len(self.return_assemble_product))
      for iter528 in self.return_assemble_product:
        oprot.writeI32(iter528)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hong_bao_records is not None:
      oprot.writeFieldBegin('hong_bao_records', TType.LIST, 37)
      oprot.writeListBegin(TType.STRUCT, len(self.hong_bao_records))
      for iter529 in self.hong_bao_records:
        iter529.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_new_hongbao is not None:
      oprot.writeFieldBegin('is_new_hongbao', TType.BOOL, 38)
      oprot.writeBool(self.is_new_hongbao)
      oprot.writeFieldEnd()
    if self.cooperation_type is not None:
      oprot.writeFieldBegin('cooperation_type', TType.LIST, 40)
      oprot.writeListBegin(TType.I32, len(self.cooperation_type))
      for iter530 in self.cooperation_type:
        oprot.writeI32(iter530)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_majia is not None:
      oprot.writeFieldBegin('has_majia', TType.BOOL, 100)
      oprot.writeBool(self.has_majia)
      oprot.writeFieldEnd()
    if self.has_zydj is not None:
      oprot.writeFieldBegin('has_zydj', TType.BOOL, 101)
      oprot.writeBool(self.has_zydj)
      oprot.writeFieldEnd()
    if self.mvt_strategy is not None:
      oprot.writeFieldBegin('mvt_strategy', TType.STRING, 102)
      oprot.writeString(self.mvt_strategy)
      oprot.writeFieldEnd()
    if self.return_has_resale_hotel is not None:
      oprot.writeFieldBegin('return_has_resale_hotel', TType.BOOL, 103)
      oprot.writeBool(self.return_has_resale_hotel)
      oprot.writeFieldEnd()
    if self.has_exclusive_price is not None:
      oprot.writeFieldBegin('has_exclusive_price', TType.BOOL, 104)
      oprot.writeBool(self.has_exclusive_price)
      oprot.writeFieldEnd()
    if self.return_hotel_ticket_product is not None:
      oprot.writeFieldBegin('return_hotel_ticket_product', TType.BOOL, 105)
      oprot.writeBool(self.return_hotel_ticket_product)
      oprot.writeFieldEnd()
    if self.pre_pay_hotel_level_filter is not None:
      oprot.writeFieldBegin('pre_pay_hotel_level_filter', TType.LIST, 106)
      oprot.writeListBegin(TType.I32, len(self.pre_pay_hotel_level_filter))
      for iter531 in self.pre_pay_hotel_level_filter:
        oprot.writeI32(iter531)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cash_pay_hotel_level_filter is not None:
      oprot.writeFieldBegin('cash_pay_hotel_level_filter', TType.LIST, 107)
      oprot.writeListBegin(TType.I32, len(self.cash_pay_hotel_level_filter))
      for iter532 in self.cash_pay_hotel_level_filter:
        oprot.writeI32(iter532)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.order_by_user_credit_filter is not None:
      oprot.writeFieldBegin('order_by_user_credit_filter', TType.STRUCT, 108)
      self.order_by_user_credit_filter.write(oprot)
      oprot.writeFieldEnd()
    if self.promotion_percentage_range is not None:
      oprot.writeFieldBegin('promotion_percentage_range', TType.LIST, 109)
      oprot.writeListBegin(TType.DOUBLE, len(self.promotion_percentage_range))
      for iter533 in self.promotion_percentage_range:
        oprot.writeDouble(iter533)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_min_ac_price_simple_product is not None:
      oprot.writeFieldBegin('return_min_ac_price_simple_product', TType.BOOL, 110)
      oprot.writeBool(self.return_min_ac_price_simple_product)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stay_date)
    value = (value * 31) ^ hash(self.price_pair)
    value = (value * 31) ^ hash(self.price_pair_type)
    value = (value * 31) ^ hash(self.guarantee)
    value = (value * 31) ^ hash(self.payment_methods)
    value = (value * 31) ^ hash(self.promotion_channel_code)
    value = (value * 31) ^ hash(self.promotion_type_ids)
    value = (value * 31) ^ hash(self.need_first_day_have_invertory)
    value = (value * 31) ^ hash(self.only_limitime_sale)
    value = (value * 31) ^ hash(self.price_type)
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.sell_channel)
    value = (value * 31) ^ hash(self.search_price_type)
    value = (value * 31) ^ hash(self.inventory_type)
    value = (value * 31) ^ hash(self.need7daygift)
    value = (value * 31) ^ hash(self.return_noinv_or_noprice_product)
    value = (value * 31) ^ hash(self.return_has_coupon_hotel)
    value = (value * 31) ^ hash(self.return_has_no_danbao_hotel)
    value = (value * 31) ^ hash(self.return_longcuionly_hotel)
    value = (value * 31) ^ hash(self.return_has_hongbao_hotel)
    value = (value * 31) ^ hash(self.list_product_info)
    value = (value * 31) ^ hash(self.return_has_lianzhu_pro_hotel)
    value = (value * 31) ^ hash(self.return_has_zaoding_pro_hotel)
    value = (value * 31) ^ hash(self.half_discount_promotion)
    value = (value * 31) ^ hash(self.return_has_discount_promotion_hotel)
    value = (value * 31) ^ hash(self.return_freesale_msg)
    value = (value * 31) ^ hash(self.return_has_allbuyroom_hotel)
    value = (value * 31) ^ hash(self.discount_method)
    value = (value * 31) ^ hash(self.min_price_calc_with_halfdiscount_pro)
    value = (value * 31) ^ hash(self.use_day_promotion)
    value = (value * 31) ^ hash(self.promotion_black_list)
    value = (value * 31) ^ hash(self.return_has_memberbenefits_hotel)
    value = (value * 31) ^ hash(self.filter_conditions)
    value = (value * 31) ^ hash(self.booking_menu)
    value = (value * 31) ^ hash(self.min_price_excluded_products)
    value = (value * 31) ^ hash(self.return_assemble_product)
    value = (value * 31) ^ hash(self.hong_bao_records)
    value = (value * 31) ^ hash(self.is_new_hongbao)
    value = (value * 31) ^ hash(self.cooperation_type)
    value = (value * 31) ^ hash(self.has_majia)
    value = (value * 31) ^ hash(self.has_zydj)
    value = (value * 31) ^ hash(self.mvt_strategy)
    value = (value * 31) ^ hash(self.return_has_resale_hotel)
    value = (value * 31) ^ hash(self.has_exclusive_price)
    value = (value * 31) ^ hash(self.return_hotel_ticket_product)
    value = (value * 31) ^ hash(self.pre_pay_hotel_level_filter)
    value = (value * 31) ^ hash(self.cash_pay_hotel_level_filter)
    value = (value * 31) ^ hash(self.order_by_user_credit_filter)
    value = (value * 31) ^ hash(self.promotion_percentage_range)
    value = (value * 31) ^ hash(self.return_min_ac_price_simple_product)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceInterval:
  """
  Attributes:
   - upper_limit
   - lower_limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'upper_limit', None, None, ), # 1
    (2, TType.I32, 'lower_limit', None, None, ), # 2
  )

  def __init__(self, upper_limit=None, lower_limit=None,):
    self.upper_limit = upper_limit
    self.lower_limit = lower_limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.upper_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.lower_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceInterval')
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.I32, 1)
      oprot.writeI32(self.upper_limit)
      oprot.writeFieldEnd()
    if self.lower_limit is not None:
      oprot.writeFieldBegin('lower_limit', TType.I32, 2)
      oprot.writeI32(self.lower_limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.upper_limit is None:
      raise TProtocol.TProtocolException(message='Required field upper_limit is unset!')
    if self.lower_limit is None:
      raise TProtocol.TProtocolException(message='Required field lower_limit is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.lower_limit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SortPolicy:
  """
  Attributes:
   - sort_item
   - sort_item_policy
   - ids
   - price_interval
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sort_item', None, None, ), # 1
    (2, TType.I32, 'sort_item_policy', None, None, ), # 2
    (3, TType.LIST, 'ids', (TType.I32,None), None, ), # 3
    (4, TType.STRUCT, 'price_interval', (PriceInterval, PriceInterval.thrift_spec), None, ), # 4
  )

  def __init__(self, sort_item=None, sort_item_policy=None, ids=None, price_interval=None,):
    self.sort_item = sort_item
    self.sort_item_policy = sort_item_policy
    self.ids = ids
    self.price_interval = price_interval

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sort_item = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sort_item_policy = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ids = []
          (_etype537, _size534) = iprot.readListBegin()
          for _i538 in xrange(_size534):
            _elem539 = iprot.readI32()
            self.ids.append(_elem539)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.price_interval = PriceInterval()
          self.price_interval.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SortPolicy')
    if self.sort_item is not None:
      oprot.writeFieldBegin('sort_item', TType.I32, 1)
      oprot.writeI32(self.sort_item)
      oprot.writeFieldEnd()
    if self.sort_item_policy is not None:
      oprot.writeFieldBegin('sort_item_policy', TType.I32, 2)
      oprot.writeI32(self.sort_item_policy)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.ids))
      for iter540 in self.ids:
        oprot.writeI32(iter540)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_interval is not None:
      oprot.writeFieldBegin('price_interval', TType.STRUCT, 4)
      self.price_interval.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sort_item)
    value = (value * 31) ^ hash(self.sort_item_policy)
    value = (value * 31) ^ hash(self.ids)
    value = (value * 31) ^ hash(self.price_interval)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageRankAttribute:
  """
  Attributes:
   - page_size
   - page_index
   - sorting_method
   - sorting_direction
   - sort_order_id
   - sort_policys
   - feature_policy_ids
   - flow_id
   - new_flow_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page_size', None, None, ), # 1
    (2, TType.I32, 'page_index', None, None, ), # 2
    (3, TType.I32, 'sorting_method', None, None, ), # 3
    (4, TType.I32, 'sorting_direction', None, None, ), # 4
    (5, TType.I32, 'sort_order_id', None, None, ), # 5
    (6, TType.LIST, 'sort_policys', (TType.STRUCT,(SortPolicy, SortPolicy.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'feature_policy_ids', (TType.I32,None), None, ), # 7
    (8, TType.I32, 'flow_id', None, None, ), # 8
    (9, TType.LIST, 'new_flow_ids', (TType.I32,None), None, ), # 9
  )

  def __init__(self, page_size=None, page_index=None, sorting_method=None, sorting_direction=None, sort_order_id=None, sort_policys=None, feature_policy_ids=None, flow_id=None, new_flow_ids=None,):
    self.page_size = page_size
    self.page_index = page_index
    self.sorting_method = sorting_method
    self.sorting_direction = sorting_direction
    self.sort_order_id = sort_order_id
    self.sort_policys = sort_policys
    self.feature_policy_ids = feature_policy_ids
    self.flow_id = flow_id
    self.new_flow_ids = new_flow_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sorting_method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sorting_direction = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sort_order_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.sort_policys = []
          (_etype544, _size541) = iprot.readListBegin()
          for _i545 in xrange(_size541):
            _elem546 = SortPolicy()
            _elem546.read(iprot)
            self.sort_policys.append(_elem546)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.feature_policy_ids = []
          (_etype550, _size547) = iprot.readListBegin()
          for _i551 in xrange(_size547):
            _elem552 = iprot.readI32()
            self.feature_policy_ids.append(_elem552)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.flow_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.new_flow_ids = []
          (_etype556, _size553) = iprot.readListBegin()
          for _i557 in xrange(_size553):
            _elem558 = iprot.readI32()
            self.new_flow_ids.append(_elem558)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageRankAttribute')
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 1)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    if self.page_index is not None:
      oprot.writeFieldBegin('page_index', TType.I32, 2)
      oprot.writeI32(self.page_index)
      oprot.writeFieldEnd()
    if self.sorting_method is not None:
      oprot.writeFieldBegin('sorting_method', TType.I32, 3)
      oprot.writeI32(self.sorting_method)
      oprot.writeFieldEnd()
    if self.sorting_direction is not None:
      oprot.writeFieldBegin('sorting_direction', TType.I32, 4)
      oprot.writeI32(self.sorting_direction)
      oprot.writeFieldEnd()
    if self.sort_order_id is not None:
      oprot.writeFieldBegin('sort_order_id', TType.I32, 5)
      oprot.writeI32(self.sort_order_id)
      oprot.writeFieldEnd()
    if self.sort_policys is not None:
      oprot.writeFieldBegin('sort_policys', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.sort_policys))
      for iter559 in self.sort_policys:
        iter559.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.feature_policy_ids is not None:
      oprot.writeFieldBegin('feature_policy_ids', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.feature_policy_ids))
      for iter560 in self.feature_policy_ids:
        oprot.writeI32(iter560)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flow_id is not None:
      oprot.writeFieldBegin('flow_id', TType.I32, 8)
      oprot.writeI32(self.flow_id)
      oprot.writeFieldEnd()
    if self.new_flow_ids is not None:
      oprot.writeFieldBegin('new_flow_ids', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.new_flow_ids))
      for iter561 in self.new_flow_ids:
        oprot.writeI32(iter561)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page_size)
    value = (value * 31) ^ hash(self.page_index)
    value = (value * 31) ^ hash(self.sorting_method)
    value = (value * 31) ^ hash(self.sorting_direction)
    value = (value * 31) ^ hash(self.sort_order_id)
    value = (value * 31) ^ hash(self.sort_policys)
    value = (value * 31) ^ hash(self.feature_policy_ids)
    value = (value * 31) ^ hash(self.flow_id)
    value = (value * 31) ^ hash(self.new_flow_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CallerAttribute:
  """
  Attributes:
   - search_guid
   - ip
   - channel
   - SearchFrom
   - old_filter
   - request_origin
   - is_inner
   - searchFromEnd
   - search_id
   - is_debug
   - onlydebug
   - loom
   - trace_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'search_guid', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.STRING, 'channel', None, None, ), # 3
    (4, TType.I32, 'SearchFrom', None, None, ), # 4
    (5, TType.BOOL, 'old_filter', None, None, ), # 5
    (6, TType.I32, 'request_origin', None, None, ), # 6
    (7, TType.BOOL, 'is_inner', None, None, ), # 7
    (8, TType.I32, 'searchFromEnd', None, None, ), # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    (41, TType.I64, 'search_id', None, None, ), # 41
    (42, TType.BOOL, 'is_debug', None, None, ), # 42
    (43, TType.BOOL, 'onlydebug', None, None, ), # 43
    (44, TType.STRING, 'loom', None, None, ), # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.STRING, 'trace_id', None, None, ), # 100
  )

  def __init__(self, search_guid=None, ip=None, channel=None, SearchFrom=None, old_filter=None, request_origin=None, is_inner=None, searchFromEnd=None, search_id=None, is_debug=None, onlydebug=None, loom=None, trace_id=None,):
    self.search_guid = search_guid
    self.ip = ip
    self.channel = channel
    self.SearchFrom = SearchFrom
    self.old_filter = old_filter
    self.request_origin = request_origin
    self.is_inner = is_inner
    self.searchFromEnd = searchFromEnd
    self.search_id = search_id
    self.is_debug = is_debug
    self.onlydebug = onlydebug
    self.loom = loom
    self.trace_id = trace_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.search_guid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.channel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.SearchFrom = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.old_filter = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.request_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_inner = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.searchFromEnd = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.search_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.BOOL:
          self.is_debug = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.BOOL:
          self.onlydebug = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.loom = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRING:
          self.trace_id = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CallerAttribute')
    if self.search_guid is not None:
      oprot.writeFieldBegin('search_guid', TType.I64, 1)
      oprot.writeI64(self.search_guid)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 3)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.SearchFrom is not None:
      oprot.writeFieldBegin('SearchFrom', TType.I32, 4)
      oprot.writeI32(self.SearchFrom)
      oprot.writeFieldEnd()
    if self.old_filter is not None:
      oprot.writeFieldBegin('old_filter', TType.BOOL, 5)
      oprot.writeBool(self.old_filter)
      oprot.writeFieldEnd()
    if self.request_origin is not None:
      oprot.writeFieldBegin('request_origin', TType.I32, 6)
      oprot.writeI32(self.request_origin)
      oprot.writeFieldEnd()
    if self.is_inner is not None:
      oprot.writeFieldBegin('is_inner', TType.BOOL, 7)
      oprot.writeBool(self.is_inner)
      oprot.writeFieldEnd()
    if self.searchFromEnd is not None:
      oprot.writeFieldBegin('searchFromEnd', TType.I32, 8)
      oprot.writeI32(self.searchFromEnd)
      oprot.writeFieldEnd()
    if self.search_id is not None:
      oprot.writeFieldBegin('search_id', TType.I64, 41)
      oprot.writeI64(self.search_id)
      oprot.writeFieldEnd()
    if self.is_debug is not None:
      oprot.writeFieldBegin('is_debug', TType.BOOL, 42)
      oprot.writeBool(self.is_debug)
      oprot.writeFieldEnd()
    if self.onlydebug is not None:
      oprot.writeFieldBegin('onlydebug', TType.BOOL, 43)
      oprot.writeBool(self.onlydebug)
      oprot.writeFieldEnd()
    if self.loom is not None:
      oprot.writeFieldBegin('loom', TType.STRING, 44)
      oprot.writeString(self.loom)
      oprot.writeFieldEnd()
    if self.trace_id is not None:
      oprot.writeFieldBegin('trace_id', TType.STRING, 100)
      oprot.writeString(self.trace_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.search_guid)
    value = (value * 31) ^ hash(self.ip)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.SearchFrom)
    value = (value * 31) ^ hash(self.old_filter)
    value = (value * 31) ^ hash(self.request_origin)
    value = (value * 31) ^ hash(self.is_inner)
    value = (value * 31) ^ hash(self.searchFromEnd)
    value = (value * 31) ^ hash(self.search_id)
    value = (value * 31) ^ hash(self.is_debug)
    value = (value * 31) ^ hash(self.onlydebug)
    value = (value * 31) ^ hash(self.loom)
    value = (value * 31) ^ hash(self.trace_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterAttribute:
  """
  Attributes:
   - region_id
   - region_type
   - parent_region_id
   - parent_region_type
   - filter_element
   - language
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.I32, 'region_type', None, None, ), # 2
    (3, TType.I32, 'parent_region_id', None, None, ), # 3
    (4, TType.I32, 'parent_region_type', None, None, ), # 4
    (5, TType.BOOL, 'filter_element', None, None, ), # 5
    (6, TType.I32, 'language', None, None, ), # 6
  )

  def __init__(self, region_id=None, region_type=None, parent_region_id=None, parent_region_type=None, filter_element=None, language=None,):
    self.region_id = region_id
    self.region_type = region_type
    self.parent_region_id = parent_region_id
    self.parent_region_type = parent_region_type
    self.filter_element = filter_element
    self.language = language

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.region_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parent_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.parent_region_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.filter_element = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterAttribute')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_type is not None:
      oprot.writeFieldBegin('region_type', TType.I32, 2)
      oprot.writeI32(self.region_type)
      oprot.writeFieldEnd()
    if self.parent_region_id is not None:
      oprot.writeFieldBegin('parent_region_id', TType.I32, 3)
      oprot.writeI32(self.parent_region_id)
      oprot.writeFieldEnd()
    if self.parent_region_type is not None:
      oprot.writeFieldBegin('parent_region_type', TType.I32, 4)
      oprot.writeI32(self.parent_region_type)
      oprot.writeFieldEnd()
    if self.filter_element is not None:
      oprot.writeFieldBegin('filter_element', TType.BOOL, 5)
      oprot.writeBool(self.filter_element)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 6)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.region_id is None:
      raise TProtocol.TProtocolException(message='Required field region_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_type)
    value = (value * 31) ^ hash(self.parent_region_id)
    value = (value * 31) ^ hash(self.parent_region_type)
    value = (value * 31) ^ hash(self.filter_element)
    value = (value * 31) ^ hash(self.language)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FastFilterAttribute:
  """
  Attributes:
   - unique_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'unique_id', (TType.I32,None), None, ), # 1
  )

  def __init__(self, unique_id=None,):
    self.unique_id = unique_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.unique_id = []
          (_etype565, _size562) = iprot.readListBegin()
          for _i566 in xrange(_size562):
            _elem567 = iprot.readI32()
            self.unique_id.append(_elem567)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FastFilterAttribute')
    if self.unique_id is not None:
      oprot.writeFieldBegin('unique_id', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.unique_id))
      for iter568 in self.unique_id:
        oprot.writeI32(iter568)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unique_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecommendAttribute:
  """
  Attributes:
   - rec_result
   - min_price
   - is_rec_request
   - return_talent_recommend
   - hotel_num
   - rec_return_num_only
   - talent_rec_list_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'rec_result', None, None, ), # 1
    (2, TType.I32, 'min_price', None, None, ), # 2
    (3, TType.BOOL, 'is_rec_request', None, None, ), # 3
    (4, TType.BOOL, 'return_talent_recommend', None, None, ), # 4
    (5, TType.I32, 'hotel_num', None, None, ), # 5
    (6, TType.BOOL, 'rec_return_num_only', None, None, ), # 6
    (7, TType.I32, 'talent_rec_list_num', None, None, ), # 7
  )

  def __init__(self, rec_result=None, min_price=None, is_rec_request=None, return_talent_recommend=None, hotel_num=None, rec_return_num_only=None, talent_rec_list_num=None,):
    self.rec_result = rec_result
    self.min_price = min_price
    self.is_rec_request = is_rec_request
    self.return_talent_recommend = return_talent_recommend
    self.hotel_num = hotel_num
    self.rec_return_num_only = rec_return_num_only
    self.talent_rec_list_num = talent_rec_list_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.rec_result = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_rec_request = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.return_talent_recommend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.rec_return_num_only = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.talent_rec_list_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecommendAttribute')
    if self.rec_result is not None:
      oprot.writeFieldBegin('rec_result', TType.BOOL, 1)
      oprot.writeBool(self.rec_result)
      oprot.writeFieldEnd()
    if self.min_price is not None:
      oprot.writeFieldBegin('min_price', TType.I32, 2)
      oprot.writeI32(self.min_price)
      oprot.writeFieldEnd()
    if self.is_rec_request is not None:
      oprot.writeFieldBegin('is_rec_request', TType.BOOL, 3)
      oprot.writeBool(self.is_rec_request)
      oprot.writeFieldEnd()
    if self.return_talent_recommend is not None:
      oprot.writeFieldBegin('return_talent_recommend', TType.BOOL, 4)
      oprot.writeBool(self.return_talent_recommend)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 5)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.rec_return_num_only is not None:
      oprot.writeFieldBegin('rec_return_num_only', TType.BOOL, 6)
      oprot.writeBool(self.rec_return_num_only)
      oprot.writeFieldEnd()
    if self.talent_rec_list_num is not None:
      oprot.writeFieldBegin('talent_rec_list_num', TType.I32, 7)
      oprot.writeI32(self.talent_rec_list_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rec_result)
    value = (value * 31) ^ hash(self.min_price)
    value = (value * 31) ^ hash(self.is_rec_request)
    value = (value * 31) ^ hash(self.return_talent_recommend)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.rec_return_num_only)
    value = (value * 31) ^ hash(self.talent_rec_list_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectPrice:
  """
  Attributes:
   - low_price
   - high_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'low_price', None, None, ), # 1
    (2, TType.I32, 'high_price', None, None, ), # 2
  )

  def __init__(self, low_price=None, high_price=None,):
    self.low_price = low_price
    self.high_price = high_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.low_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.high_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectPrice')
    if self.low_price is not None:
      oprot.writeFieldBegin('low_price', TType.I32, 1)
      oprot.writeI32(self.low_price)
      oprot.writeFieldEnd()
    if self.high_price is not None:
      oprot.writeFieldBegin('high_price', TType.I32, 2)
      oprot.writeI32(self.high_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.low_price)
    value = (value * 31) ^ hash(self.high_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelInvoiceInfo:
  """
  Attributes:
   - shotel_id
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, shotel_id=None, type=None,):
    self.shotel_id = shotel_id
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelInvoiceInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelHelpfulTips:
  """
  Attributes:
   - shotel_id
   - helpful_tips_cn
   - helpful_tips_en
   - start_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.STRING, 'helpful_tips_cn', None, None, ), # 2
    (3, TType.STRING, 'helpful_tips_en', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
  )

  def __init__(self, shotel_id=None, helpful_tips_cn=None, helpful_tips_en=None, start_date=None, end_date=None,):
    self.shotel_id = shotel_id
    self.helpful_tips_cn = helpful_tips_cn
    self.helpful_tips_en = helpful_tips_en
    self.start_date = start_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.helpful_tips_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.helpful_tips_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelHelpfulTips')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.helpful_tips_cn is not None:
      oprot.writeFieldBegin('helpful_tips_cn', TType.STRING, 2)
      oprot.writeString(self.helpful_tips_cn)
      oprot.writeFieldEnd()
    if self.helpful_tips_en is not None:
      oprot.writeFieldBegin('helpful_tips_en', TType.STRING, 3)
      oprot.writeString(self.helpful_tips_en)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.helpful_tips_cn)
    value = (value * 31) ^ hash(self.helpful_tips_en)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftSecondTag:
  """
  Attributes:
   - sub_bit_number
   - sub_gift_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sub_bit_number', None, None, ), # 1
    (2, TType.I32, 'sub_gift_price', None, None, ), # 2
  )

  def __init__(self, sub_bit_number=None, sub_gift_price=None,):
    self.sub_bit_number = sub_bit_number
    self.sub_gift_price = sub_gift_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sub_bit_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sub_gift_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftSecondTag')
    if self.sub_bit_number is not None:
      oprot.writeFieldBegin('sub_bit_number', TType.I32, 1)
      oprot.writeI32(self.sub_bit_number)
      oprot.writeFieldEnd()
    if self.sub_gift_price is not None:
      oprot.writeFieldBegin('sub_gift_price', TType.I32, 2)
      oprot.writeI32(self.sub_gift_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sub_bit_number)
    value = (value * 31) ^ hash(self.sub_gift_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftFirstTag:
  """
  Attributes:
   - bit_number
   - priority
   - gift_second_tag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'bit_number', None, None, ), # 1
    (2, TType.I32, 'priority', None, None, ), # 2
    (3, TType.LIST, 'gift_second_tag', (TType.STRUCT,(GiftSecondTag, GiftSecondTag.thrift_spec)), None, ), # 3
  )

  def __init__(self, bit_number=None, priority=None, gift_second_tag=None,):
    self.bit_number = bit_number
    self.priority = priority
    self.gift_second_tag = gift_second_tag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.bit_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gift_second_tag = []
          (_etype572, _size569) = iprot.readListBegin()
          for _i573 in xrange(_size569):
            _elem574 = GiftSecondTag()
            _elem574.read(iprot)
            self.gift_second_tag.append(_elem574)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftFirstTag')
    if self.bit_number is not None:
      oprot.writeFieldBegin('bit_number', TType.I32, 1)
      oprot.writeI32(self.bit_number)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 2)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.gift_second_tag is not None:
      oprot.writeFieldBegin('gift_second_tag', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.gift_second_tag))
      for iter575 in self.gift_second_tag:
        iter575.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bit_number)
    value = (value * 31) ^ hash(self.priority)
    value = (value * 31) ^ hash(self.gift_second_tag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftInfo:
  """
  Attributes:
   - shotel_id
   - sroom_type_id
   - rateplan_id
   - gift_content_cn
   - gift_content_en
   - way_of_giving
   - way_of_giving_other_cn
   - way_of_giving_other_en
   - gift_types
   - status
   - begin_date
   - end_date
   - date_type
   - bit_sum4_week
   - hour_type
   - hour_number
   - gift_first_tag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shotel_id', None, None, ), # 1
    (2, TType.I64, 'sroom_type_id', None, None, ), # 2
    (3, TType.I64, 'rateplan_id', None, None, ), # 3
    None, # 4
    (5, TType.STRING, 'gift_content_cn', None, None, ), # 5
    (6, TType.STRING, 'gift_content_en', None, None, ), # 6
    (7, TType.I32, 'way_of_giving', None, None, ), # 7
    (8, TType.STRING, 'way_of_giving_other_cn', None, None, ), # 8
    (9, TType.STRING, 'way_of_giving_other_en', None, None, ), # 9
    (10, TType.I32, 'gift_types', None, None, ), # 10
    (11, TType.I32, 'status', None, None, ), # 11
    (12, TType.STRING, 'begin_date', None, None, ), # 12
    (13, TType.STRING, 'end_date', None, None, ), # 13
    (14, TType.I32, 'date_type', None, None, ), # 14
    (15, TType.I32, 'bit_sum4_week', None, None, ), # 15
    (16, TType.I32, 'hour_type', None, None, ), # 16
    (17, TType.I32, 'hour_number', None, None, ), # 17
    (18, TType.LIST, 'gift_first_tag', (TType.STRUCT,(GiftFirstTag, GiftFirstTag.thrift_spec)), None, ), # 18
  )

  def __init__(self, shotel_id=None, sroom_type_id=None, rateplan_id=None, gift_content_cn=None, gift_content_en=None, way_of_giving=None, way_of_giving_other_cn=None, way_of_giving_other_en=None, gift_types=None, status=None, begin_date=None, end_date=None, date_type=None, bit_sum4_week=None, hour_type=None, hour_number=None, gift_first_tag=None,):
    self.shotel_id = shotel_id
    self.sroom_type_id = sroom_type_id
    self.rateplan_id = rateplan_id
    self.gift_content_cn = gift_content_cn
    self.gift_content_en = gift_content_en
    self.way_of_giving = way_of_giving
    self.way_of_giving_other_cn = way_of_giving_other_cn
    self.way_of_giving_other_en = way_of_giving_other_en
    self.gift_types = gift_types
    self.status = status
    self.begin_date = begin_date
    self.end_date = end_date
    self.date_type = date_type
    self.bit_sum4_week = bit_sum4_week
    self.hour_type = hour_type
    self.hour_number = hour_number
    self.gift_first_tag = gift_first_tag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sroom_type_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.gift_content_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.gift_content_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.way_of_giving = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.way_of_giving_other_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.way_of_giving_other_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.gift_types = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.begin_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.bit_sum4_week = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.hour_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.hour_number = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.gift_first_tag = []
          (_etype579, _size576) = iprot.readListBegin()
          for _i580 in xrange(_size576):
            _elem581 = GiftFirstTag()
            _elem581.read(iprot)
            self.gift_first_tag.append(_elem581)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 1)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.sroom_type_id is not None:
      oprot.writeFieldBegin('sroom_type_id', TType.I64, 2)
      oprot.writeI64(self.sroom_type_id)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 3)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.gift_content_cn is not None:
      oprot.writeFieldBegin('gift_content_cn', TType.STRING, 5)
      oprot.writeString(self.gift_content_cn)
      oprot.writeFieldEnd()
    if self.gift_content_en is not None:
      oprot.writeFieldBegin('gift_content_en', TType.STRING, 6)
      oprot.writeString(self.gift_content_en)
      oprot.writeFieldEnd()
    if self.way_of_giving is not None:
      oprot.writeFieldBegin('way_of_giving', TType.I32, 7)
      oprot.writeI32(self.way_of_giving)
      oprot.writeFieldEnd()
    if self.way_of_giving_other_cn is not None:
      oprot.writeFieldBegin('way_of_giving_other_cn', TType.STRING, 8)
      oprot.writeString(self.way_of_giving_other_cn)
      oprot.writeFieldEnd()
    if self.way_of_giving_other_en is not None:
      oprot.writeFieldBegin('way_of_giving_other_en', TType.STRING, 9)
      oprot.writeString(self.way_of_giving_other_en)
      oprot.writeFieldEnd()
    if self.gift_types is not None:
      oprot.writeFieldBegin('gift_types', TType.I32, 10)
      oprot.writeI32(self.gift_types)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.begin_date is not None:
      oprot.writeFieldBegin('begin_date', TType.STRING, 12)
      oprot.writeString(self.begin_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 13)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 14)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.bit_sum4_week is not None:
      oprot.writeFieldBegin('bit_sum4_week', TType.I32, 15)
      oprot.writeI32(self.bit_sum4_week)
      oprot.writeFieldEnd()
    if self.hour_type is not None:
      oprot.writeFieldBegin('hour_type', TType.I32, 16)
      oprot.writeI32(self.hour_type)
      oprot.writeFieldEnd()
    if self.hour_number is not None:
      oprot.writeFieldBegin('hour_number', TType.I32, 17)
      oprot.writeI32(self.hour_number)
      oprot.writeFieldEnd()
    if self.gift_first_tag is not None:
      oprot.writeFieldBegin('gift_first_tag', TType.LIST, 18)
      oprot.writeListBegin(TType.STRUCT, len(self.gift_first_tag))
      for iter582 in self.gift_first_tag:
        iter582.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.sroom_type_id)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.gift_content_cn)
    value = (value * 31) ^ hash(self.gift_content_en)
    value = (value * 31) ^ hash(self.way_of_giving)
    value = (value * 31) ^ hash(self.way_of_giving_other_cn)
    value = (value * 31) ^ hash(self.way_of_giving_other_en)
    value = (value * 31) ^ hash(self.gift_types)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.begin_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.bit_sum4_week)
    value = (value * 31) ^ hash(self.hour_type)
    value = (value * 31) ^ hash(self.hour_number)
    value = (value * 31) ^ hash(self.gift_first_tag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GiftInfoPreview:
  """
  Attributes:
   - gift_preview_string
   - is_next7_days
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'gift_preview_string', None, None, ), # 2
    (3, TType.BOOL, 'is_next7_days', None, None, ), # 3
  )

  def __init__(self, gift_preview_string=None, is_next7_days=None,):
    self.gift_preview_string = gift_preview_string
    self.is_next7_days = is_next7_days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.gift_preview_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_next7_days = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GiftInfoPreview')
    if self.gift_preview_string is not None:
      oprot.writeFieldBegin('gift_preview_string', TType.STRING, 2)
      oprot.writeString(self.gift_preview_string)
      oprot.writeFieldEnd()
    if self.is_next7_days is not None:
      oprot.writeFieldBegin('is_next7_days', TType.BOOL, 3)
      oprot.writeBool(self.is_next7_days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gift_preview_string)
    value = (value * 31) ^ hash(self.is_next7_days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Gift:
  """
  Attributes:
   - gift_id
   - gift_info
   - gift_info_preview
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'gift_id', None, None, ), # 1
    (2, TType.STRUCT, 'gift_info', (GiftInfo, GiftInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gift_info_preview', (GiftInfoPreview, GiftInfoPreview.thrift_spec), None, ), # 3
  )

  def __init__(self, gift_id=None, gift_info=None, gift_info_preview=None,):
    self.gift_id = gift_id
    self.gift_info = gift_info
    self.gift_info_preview = gift_info_preview

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.gift_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.gift_info = GiftInfo()
          self.gift_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gift_info_preview = GiftInfoPreview()
          self.gift_info_preview.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Gift')
    if self.gift_id is not None:
      oprot.writeFieldBegin('gift_id', TType.I64, 1)
      oprot.writeI64(self.gift_id)
      oprot.writeFieldEnd()
    if self.gift_info is not None:
      oprot.writeFieldBegin('gift_info', TType.STRUCT, 2)
      self.gift_info.write(oprot)
      oprot.writeFieldEnd()
    if self.gift_info_preview is not None:
      oprot.writeFieldBegin('gift_info_preview', TType.STRUCT, 3)
      self.gift_info_preview.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gift_id)
    value = (value * 31) ^ hash(self.gift_info)
    value = (value * 31) ^ hash(self.gift_info_preview)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelBookingRule:
  """
  Attributes:
   - id
   - shotel_id
   - cn_description
   - en_description
   - start_date
   - end_date
   - booking_date_type
   - booking_rule_type
   - start_hour
   - end_hour
   - note2
   - limit1
   - limit2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'shotel_id', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'cn_description', None, None, ), # 4
    (5, TType.STRING, 'en_description', None, None, ), # 5
    (6, TType.STRING, 'start_date', None, None, ), # 6
    (7, TType.STRING, 'end_date', None, None, ), # 7
    (8, TType.I32, 'booking_date_type', None, None, ), # 8
    (9, TType.I32, 'booking_rule_type', None, None, ), # 9
    (10, TType.STRING, 'start_hour', None, None, ), # 10
    (11, TType.STRING, 'end_hour', None, None, ), # 11
    (12, TType.STRING, 'note2', None, None, ), # 12
    (13, TType.STRING, 'limit1', None, None, ), # 13
    (14, TType.STRING, 'limit2', None, None, ), # 14
  )

  def __init__(self, id=None, shotel_id=None, cn_description=None, en_description=None, start_date=None, end_date=None, booking_date_type=None, booking_rule_type=None, start_hour=None, end_hour=None, note2=None, limit1=None, limit2=None,):
    self.id = id
    self.shotel_id = shotel_id
    self.cn_description = cn_description
    self.en_description = en_description
    self.start_date = start_date
    self.end_date = end_date
    self.booking_date_type = booking_date_type
    self.booking_rule_type = booking_rule_type
    self.start_hour = start_hour
    self.end_hour = end_hour
    self.note2 = note2
    self.limit1 = limit1
    self.limit2 = limit2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cn_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.en_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.booking_date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.booking_rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.start_hour = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.end_hour = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.note2 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.limit1 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.limit2 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelBookingRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 2)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.cn_description is not None:
      oprot.writeFieldBegin('cn_description', TType.STRING, 4)
      oprot.writeString(self.cn_description)
      oprot.writeFieldEnd()
    if self.en_description is not None:
      oprot.writeFieldBegin('en_description', TType.STRING, 5)
      oprot.writeString(self.en_description)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 6)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 7)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.booking_date_type is not None:
      oprot.writeFieldBegin('booking_date_type', TType.I32, 8)
      oprot.writeI32(self.booking_date_type)
      oprot.writeFieldEnd()
    if self.booking_rule_type is not None:
      oprot.writeFieldBegin('booking_rule_type', TType.I32, 9)
      oprot.writeI32(self.booking_rule_type)
      oprot.writeFieldEnd()
    if self.start_hour is not None:
      oprot.writeFieldBegin('start_hour', TType.STRING, 10)
      oprot.writeString(self.start_hour)
      oprot.writeFieldEnd()
    if self.end_hour is not None:
      oprot.writeFieldBegin('end_hour', TType.STRING, 11)
      oprot.writeString(self.end_hour)
      oprot.writeFieldEnd()
    if self.note2 is not None:
      oprot.writeFieldBegin('note2', TType.STRING, 12)
      oprot.writeString(self.note2)
      oprot.writeFieldEnd()
    if self.limit1 is not None:
      oprot.writeFieldBegin('limit1', TType.STRING, 13)
      oprot.writeString(self.limit1)
      oprot.writeFieldEnd()
    if self.limit2 is not None:
      oprot.writeFieldBegin('limit2', TType.STRING, 14)
      oprot.writeString(self.limit2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.cn_description)
    value = (value * 31) ^ hash(self.en_description)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.booking_date_type)
    value = (value * 31) ^ hash(self.booking_rule_type)
    value = (value * 31) ^ hash(self.start_hour)
    value = (value * 31) ^ hash(self.end_hour)
    value = (value * 31) ^ hash(self.note2)
    value = (value * 31) ^ hash(self.limit1)
    value = (value * 31) ^ hash(self.limit2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddValueInfo:
  """
  Attributes:
   - id
   - business_code
   - add_value_eng_name
   - add_value_cn_name
   - is_include
   - share
   - price_default_option
   - price
   - is_add
   - single_price_defaultoption
   - single_price
   - memo
   - is_forbidden
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'business_code', None, None, ), # 2
    (3, TType.STRING, 'add_value_eng_name', None, None, ), # 3
    (4, TType.STRING, 'add_value_cn_name', None, None, ), # 4
    (5, TType.I32, 'is_include', None, None, ), # 5
    (6, TType.I32, 'share', None, None, ), # 6
    (7, TType.I32, 'price_default_option', None, None, ), # 7
    (8, TType.DOUBLE, 'price', None, None, ), # 8
    (9, TType.BOOL, 'is_add', None, None, ), # 9
    (10, TType.I32, 'single_price_defaultoption', None, None, ), # 10
    (11, TType.DOUBLE, 'single_price', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
    (13, TType.I32, 'is_forbidden', None, None, ), # 13
  )

  def __init__(self, id=None, business_code=None, add_value_eng_name=None, add_value_cn_name=None, is_include=None, share=None, price_default_option=None, price=None, is_add=None, single_price_defaultoption=None, single_price=None, memo=None, is_forbidden=None,):
    self.id = id
    self.business_code = business_code
    self.add_value_eng_name = add_value_eng_name
    self.add_value_cn_name = add_value_cn_name
    self.is_include = is_include
    self.share = share
    self.price_default_option = price_default_option
    self.price = price
    self.is_add = is_add
    self.single_price_defaultoption = single_price_defaultoption
    self.single_price = single_price
    self.memo = memo
    self.is_forbidden = is_forbidden

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.business_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.add_value_eng_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.add_value_cn_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.is_include = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_add = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.single_price_defaultoption = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.single_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.is_forbidden = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddValueInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.business_code is not None:
      oprot.writeFieldBegin('business_code', TType.STRING, 2)
      oprot.writeString(self.business_code)
      oprot.writeFieldEnd()
    if self.add_value_eng_name is not None:
      oprot.writeFieldBegin('add_value_eng_name', TType.STRING, 3)
      oprot.writeString(self.add_value_eng_name)
      oprot.writeFieldEnd()
    if self.add_value_cn_name is not None:
      oprot.writeFieldBegin('add_value_cn_name', TType.STRING, 4)
      oprot.writeString(self.add_value_cn_name)
      oprot.writeFieldEnd()
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.I32, 5)
      oprot.writeI32(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 6)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.price_default_option is not None:
      oprot.writeFieldBegin('price_default_option', TType.I32, 7)
      oprot.writeI32(self.price_default_option)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 8)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.is_add is not None:
      oprot.writeFieldBegin('is_add', TType.BOOL, 9)
      oprot.writeBool(self.is_add)
      oprot.writeFieldEnd()
    if self.single_price_defaultoption is not None:
      oprot.writeFieldBegin('single_price_defaultoption', TType.I32, 10)
      oprot.writeI32(self.single_price_defaultoption)
      oprot.writeFieldEnd()
    if self.single_price is not None:
      oprot.writeFieldBegin('single_price', TType.DOUBLE, 11)
      oprot.writeDouble(self.single_price)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.is_forbidden is not None:
      oprot.writeFieldBegin('is_forbidden', TType.I32, 13)
      oprot.writeI32(self.is_forbidden)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.business_code)
    value = (value * 31) ^ hash(self.add_value_eng_name)
    value = (value * 31) ^ hash(self.add_value_cn_name)
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.price_default_option)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.is_add)
    value = (value * 31) ^ hash(self.single_price_defaultoption)
    value = (value * 31) ^ hash(self.single_price)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.is_forbidden)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VouchInfo:
  """
  Attributes:
   - id
   - rateplan_id
   - vouch_way
   - start_date
   - end_date
   - date_type
   - is_week_effective
   - arrive_start_time
   - arrive_end_time
   - room_count
   - money_type
   - rule_type
   - rule_data_int
   - rule_data_date_time
   - rule_data_date_string
   - rule_description_cn
   - rule_description_en
   - is_arrive_time_vouch
   - is_room_count_vouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'rateplan_id', None, None, ), # 2
    (3, TType.I32, 'vouch_way', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
    (6, TType.I32, 'date_type', None, None, ), # 6
    (7, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 7
    (8, TType.STRING, 'arrive_start_time', None, None, ), # 8
    (9, TType.STRING, 'arrive_end_time', None, None, ), # 9
    (10, TType.I32, 'room_count', None, None, ), # 10
    (11, TType.I32, 'money_type', None, None, ), # 11
    (12, TType.I32, 'rule_type', None, None, ), # 12
    (13, TType.I32, 'rule_data_int', None, None, ), # 13
    (14, TType.STRING, 'rule_data_date_time', None, None, ), # 14
    (15, TType.STRING, 'rule_data_date_string', None, None, ), # 15
    (16, TType.STRING, 'rule_description_cn', None, None, ), # 16
    (17, TType.STRING, 'rule_description_en', None, None, ), # 17
    (18, TType.BOOL, 'is_arrive_time_vouch', None, None, ), # 18
    (19, TType.BOOL, 'is_room_count_vouch', None, None, ), # 19
  )

  def __init__(self, id=None, rateplan_id=None, vouch_way=None, start_date=None, end_date=None, date_type=None, is_week_effective=None, arrive_start_time=None, arrive_end_time=None, room_count=None, money_type=None, rule_type=None, rule_data_int=None, rule_data_date_time=None, rule_data_date_string=None, rule_description_cn=None, rule_description_en=None, is_arrive_time_vouch=None, is_room_count_vouch=None,):
    self.id = id
    self.rateplan_id = rateplan_id
    self.vouch_way = vouch_way
    self.start_date = start_date
    self.end_date = end_date
    self.date_type = date_type
    self.is_week_effective = is_week_effective
    self.arrive_start_time = arrive_start_time
    self.arrive_end_time = arrive_end_time
    self.room_count = room_count
    self.money_type = money_type
    self.rule_type = rule_type
    self.rule_data_int = rule_data_int
    self.rule_data_date_time = rule_data_date_time
    self.rule_data_date_string = rule_data_date_string
    self.rule_description_cn = rule_description_cn
    self.rule_description_en = rule_description_en
    self.is_arrive_time_vouch = is_arrive_time_vouch
    self.is_room_count_vouch = is_room_count_vouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.vouch_way = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype586, _size583) = iprot.readListBegin()
          for _i587 in xrange(_size583):
            _elem588 = iprot.readI32()
            self.is_week_effective.append(_elem588)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.arrive_start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.arrive_end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.room_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.money_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.rule_data_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.rule_data_date_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.rule_data_date_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.rule_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.rule_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.is_arrive_time_vouch = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_room_count_vouch = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VouchInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 2)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.vouch_way is not None:
      oprot.writeFieldBegin('vouch_way', TType.I32, 3)
      oprot.writeI32(self.vouch_way)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 6)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter589 in self.is_week_effective:
        oprot.writeI32(iter589)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.arrive_start_time is not None:
      oprot.writeFieldBegin('arrive_start_time', TType.STRING, 8)
      oprot.writeString(self.arrive_start_time)
      oprot.writeFieldEnd()
    if self.arrive_end_time is not None:
      oprot.writeFieldBegin('arrive_end_time', TType.STRING, 9)
      oprot.writeString(self.arrive_end_time)
      oprot.writeFieldEnd()
    if self.room_count is not None:
      oprot.writeFieldBegin('room_count', TType.I32, 10)
      oprot.writeI32(self.room_count)
      oprot.writeFieldEnd()
    if self.money_type is not None:
      oprot.writeFieldBegin('money_type', TType.I32, 11)
      oprot.writeI32(self.money_type)
      oprot.writeFieldEnd()
    if self.rule_type is not None:
      oprot.writeFieldBegin('rule_type', TType.I32, 12)
      oprot.writeI32(self.rule_type)
      oprot.writeFieldEnd()
    if self.rule_data_int is not None:
      oprot.writeFieldBegin('rule_data_int', TType.I32, 13)
      oprot.writeI32(self.rule_data_int)
      oprot.writeFieldEnd()
    if self.rule_data_date_time is not None:
      oprot.writeFieldBegin('rule_data_date_time', TType.STRING, 14)
      oprot.writeString(self.rule_data_date_time)
      oprot.writeFieldEnd()
    if self.rule_data_date_string is not None:
      oprot.writeFieldBegin('rule_data_date_string', TType.STRING, 15)
      oprot.writeString(self.rule_data_date_string)
      oprot.writeFieldEnd()
    if self.rule_description_cn is not None:
      oprot.writeFieldBegin('rule_description_cn', TType.STRING, 16)
      oprot.writeString(self.rule_description_cn)
      oprot.writeFieldEnd()
    if self.rule_description_en is not None:
      oprot.writeFieldBegin('rule_description_en', TType.STRING, 17)
      oprot.writeString(self.rule_description_en)
      oprot.writeFieldEnd()
    if self.is_arrive_time_vouch is not None:
      oprot.writeFieldBegin('is_arrive_time_vouch', TType.BOOL, 18)
      oprot.writeBool(self.is_arrive_time_vouch)
      oprot.writeFieldEnd()
    if self.is_room_count_vouch is not None:
      oprot.writeFieldBegin('is_room_count_vouch', TType.BOOL, 19)
      oprot.writeBool(self.is_room_count_vouch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.vouch_way)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.is_week_effective)
    value = (value * 31) ^ hash(self.arrive_start_time)
    value = (value * 31) ^ hash(self.arrive_end_time)
    value = (value * 31) ^ hash(self.room_count)
    value = (value * 31) ^ hash(self.money_type)
    value = (value * 31) ^ hash(self.rule_type)
    value = (value * 31) ^ hash(self.rule_data_int)
    value = (value * 31) ^ hash(self.rule_data_date_time)
    value = (value * 31) ^ hash(self.rule_data_date_string)
    value = (value * 31) ^ hash(self.rule_description_cn)
    value = (value * 31) ^ hash(self.rule_description_en)
    value = (value * 31) ^ hash(self.is_arrive_time_vouch)
    value = (value * 31) ^ hash(self.is_room_count_vouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PrePayInfo:
  """
  Attributes:
   - id
   - rate_plan_id
   - target_type
   - start_date
   - end_date
   - date_type
   - rule_type
   - cut_before_change_time
   - cut_after_change_time
   - cut_type_before
   - cut_type_after
   - cut_num_before
   - cut_num_after
   - rule_data_int
   - rule_data_second_int
   - rule_data_date_time
   - rule_data_string
   - rule_description_cn
   - rule_description_en
   - is_week_effective
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'rate_plan_id', None, None, ), # 2
    (3, TType.I32, 'target_type', None, None, ), # 3
    (4, TType.STRING, 'start_date', None, None, ), # 4
    (5, TType.STRING, 'end_date', None, None, ), # 5
    (6, TType.I32, 'date_type', None, None, ), # 6
    (7, TType.I32, 'rule_type', None, None, ), # 7
    (8, TType.BOOL, 'cut_before_change_time', None, None, ), # 8
    (9, TType.BOOL, 'cut_after_change_time', None, None, ), # 9
    (10, TType.I32, 'cut_type_before', None, None, ), # 10
    (11, TType.I32, 'cut_type_after', None, None, ), # 11
    (12, TType.I32, 'cut_num_before', None, None, ), # 12
    (13, TType.I32, 'cut_num_after', None, None, ), # 13
    (14, TType.I32, 'rule_data_int', None, None, ), # 14
    (15, TType.I32, 'rule_data_second_int', None, None, ), # 15
    (16, TType.STRING, 'rule_data_date_time', None, None, ), # 16
    (17, TType.STRING, 'rule_data_string', None, None, ), # 17
    (18, TType.STRING, 'rule_description_cn', None, None, ), # 18
    (19, TType.STRING, 'rule_description_en', None, None, ), # 19
    (20, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 20
  )

  def __init__(self, id=None, rate_plan_id=None, target_type=None, start_date=None, end_date=None, date_type=None, rule_type=None, cut_before_change_time=None, cut_after_change_time=None, cut_type_before=None, cut_type_after=None, cut_num_before=None, cut_num_after=None, rule_data_int=None, rule_data_second_int=None, rule_data_date_time=None, rule_data_string=None, rule_description_cn=None, rule_description_en=None, is_week_effective=None,):
    self.id = id
    self.rate_plan_id = rate_plan_id
    self.target_type = target_type
    self.start_date = start_date
    self.end_date = end_date
    self.date_type = date_type
    self.rule_type = rule_type
    self.cut_before_change_time = cut_before_change_time
    self.cut_after_change_time = cut_after_change_time
    self.cut_type_before = cut_type_before
    self.cut_type_after = cut_type_after
    self.cut_num_before = cut_num_before
    self.cut_num_after = cut_num_after
    self.rule_data_int = rule_data_int
    self.rule_data_second_int = rule_data_second_int
    self.rule_data_date_time = rule_data_date_time
    self.rule_data_string = rule_data_string
    self.rule_description_cn = rule_description_cn
    self.rule_description_en = rule_description_en
    self.is_week_effective = is_week_effective

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.rate_plan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.target_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rule_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.cut_before_change_time = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.cut_after_change_time = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.cut_type_before = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cut_type_after = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.cut_num_before = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.cut_num_after = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.rule_data_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.rule_data_second_int = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.rule_data_date_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.rule_data_string = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.rule_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.rule_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype593, _size590) = iprot.readListBegin()
          for _i594 in xrange(_size590):
            _elem595 = iprot.readI32()
            self.is_week_effective.append(_elem595)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrePayInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I64, 2)
      oprot.writeI64(self.rate_plan_id)
      oprot.writeFieldEnd()
    if self.target_type is not None:
      oprot.writeFieldBegin('target_type', TType.I32, 3)
      oprot.writeI32(self.target_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 4)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 5)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 6)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.rule_type is not None:
      oprot.writeFieldBegin('rule_type', TType.I32, 7)
      oprot.writeI32(self.rule_type)
      oprot.writeFieldEnd()
    if self.cut_before_change_time is not None:
      oprot.writeFieldBegin('cut_before_change_time', TType.BOOL, 8)
      oprot.writeBool(self.cut_before_change_time)
      oprot.writeFieldEnd()
    if self.cut_after_change_time is not None:
      oprot.writeFieldBegin('cut_after_change_time', TType.BOOL, 9)
      oprot.writeBool(self.cut_after_change_time)
      oprot.writeFieldEnd()
    if self.cut_type_before is not None:
      oprot.writeFieldBegin('cut_type_before', TType.I32, 10)
      oprot.writeI32(self.cut_type_before)
      oprot.writeFieldEnd()
    if self.cut_type_after is not None:
      oprot.writeFieldBegin('cut_type_after', TType.I32, 11)
      oprot.writeI32(self.cut_type_after)
      oprot.writeFieldEnd()
    if self.cut_num_before is not None:
      oprot.writeFieldBegin('cut_num_before', TType.I32, 12)
      oprot.writeI32(self.cut_num_before)
      oprot.writeFieldEnd()
    if self.cut_num_after is not None:
      oprot.writeFieldBegin('cut_num_after', TType.I32, 13)
      oprot.writeI32(self.cut_num_after)
      oprot.writeFieldEnd()
    if self.rule_data_int is not None:
      oprot.writeFieldBegin('rule_data_int', TType.I32, 14)
      oprot.writeI32(self.rule_data_int)
      oprot.writeFieldEnd()
    if self.rule_data_second_int is not None:
      oprot.writeFieldBegin('rule_data_second_int', TType.I32, 15)
      oprot.writeI32(self.rule_data_second_int)
      oprot.writeFieldEnd()
    if self.rule_data_date_time is not None:
      oprot.writeFieldBegin('rule_data_date_time', TType.STRING, 16)
      oprot.writeString(self.rule_data_date_time)
      oprot.writeFieldEnd()
    if self.rule_data_string is not None:
      oprot.writeFieldBegin('rule_data_string', TType.STRING, 17)
      oprot.writeString(self.rule_data_string)
      oprot.writeFieldEnd()
    if self.rule_description_cn is not None:
      oprot.writeFieldBegin('rule_description_cn', TType.STRING, 18)
      oprot.writeString(self.rule_description_cn)
      oprot.writeFieldEnd()
    if self.rule_description_en is not None:
      oprot.writeFieldBegin('rule_description_en', TType.STRING, 19)
      oprot.writeString(self.rule_description_en)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 20)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter596 in self.is_week_effective:
        oprot.writeI32(iter596)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.rate_plan_id)
    value = (value * 31) ^ hash(self.target_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.rule_type)
    value = (value * 31) ^ hash(self.cut_before_change_time)
    value = (value * 31) ^ hash(self.cut_after_change_time)
    value = (value * 31) ^ hash(self.cut_type_before)
    value = (value * 31) ^ hash(self.cut_type_after)
    value = (value * 31) ^ hash(self.cut_num_before)
    value = (value * 31) ^ hash(self.cut_num_after)
    value = (value * 31) ^ hash(self.rule_data_int)
    value = (value * 31) ^ hash(self.rule_data_second_int)
    value = (value * 31) ^ hash(self.rule_data_date_time)
    value = (value * 31) ^ hash(self.rule_data_string)
    value = (value * 31) ^ hash(self.rule_description_cn)
    value = (value * 31) ^ hash(self.rule_description_en)
    value = (value * 31) ^ hash(self.is_week_effective)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddBreakfastInfoOfDay:
  """
  Attributes:
   - is_include
   - share
   - price_default_option
   - price
   - date
   - policy_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_include', None, None, ), # 1
    (2, TType.I32, 'share', None, None, ), # 2
    (3, TType.I32, 'price_default_option', None, None, ), # 3
    (4, TType.DOUBLE, 'price', None, None, ), # 4
    (5, TType.STRING, 'date', None, None, ), # 5
    (6, TType.I64, 'policy_id', None, None, ), # 6
  )

  def __init__(self, is_include=None, share=None, price_default_option=None, price=None, date=None, policy_id=None,):
    self.is_include = is_include
    self.share = share
    self.price_default_option = price_default_option
    self.price = price
    self.date = date
    self.policy_id = policy_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_include = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.policy_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddBreakfastInfoOfDay')
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.BOOL, 1)
      oprot.writeBool(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 2)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.price_default_option is not None:
      oprot.writeFieldBegin('price_default_option', TType.I32, 3)
      oprot.writeI32(self.price_default_option)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 4)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 5)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.policy_id is not None:
      oprot.writeFieldBegin('policy_id', TType.I64, 6)
      oprot.writeI64(self.policy_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.price_default_option)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.policy_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddBreakfasePolicyInfo:
  """
  Attributes:
   - rate_plan_id
   - policy_id
   - sub_policy
   - policy_name
   - policy_name_eng
   - is_customer_visible
   - cn_description
   - eng_description
   - date_type
   - start_date
   - end_date
   - is_week_effective
   - status
   - is_include
   - share
   - currency_code
   - price_default
   - price
   - is_add
   - single_price_default_option
   - single_price
   - memo
   - add_value_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rate_plan_id', None, None, ), # 1
    (2, TType.I64, 'policy_id', None, None, ), # 2
    (3, TType.I32, 'sub_policy', None, None, ), # 3
    (4, TType.STRING, 'policy_name', None, None, ), # 4
    (5, TType.STRING, 'policy_name_eng', None, None, ), # 5
    (6, TType.I32, 'is_customer_visible', None, None, ), # 6
    (7, TType.STRING, 'cn_description', None, None, ), # 7
    (8, TType.STRING, 'eng_description', None, None, ), # 8
    (9, TType.I32, 'date_type', None, None, ), # 9
    (10, TType.STRING, 'start_date', None, None, ), # 10
    (11, TType.STRING, 'end_date', None, None, ), # 11
    (12, TType.LIST, 'is_week_effective', (TType.I32,None), None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.I32, 'is_include', None, None, ), # 14
    (15, TType.I32, 'share', None, None, ), # 15
    (16, TType.STRING, 'currency_code', None, None, ), # 16
    (17, TType.I32, 'price_default', None, None, ), # 17
    (18, TType.DOUBLE, 'price', None, None, ), # 18
    (19, TType.I32, 'is_add', None, None, ), # 19
    (20, TType.I32, 'single_price_default_option', None, None, ), # 20
    (21, TType.DOUBLE, 'single_price', None, None, ), # 21
    (22, TType.STRING, 'memo', None, None, ), # 22
    (23, TType.I64, 'add_value_id', None, None, ), # 23
  )

  def __init__(self, rate_plan_id=None, policy_id=None, sub_policy=None, policy_name=None, policy_name_eng=None, is_customer_visible=None, cn_description=None, eng_description=None, date_type=None, start_date=None, end_date=None, is_week_effective=None, status=None, is_include=None, share=None, currency_code=None, price_default=None, price=None, is_add=None, single_price_default_option=None, single_price=None, memo=None, add_value_id=None,):
    self.rate_plan_id = rate_plan_id
    self.policy_id = policy_id
    self.sub_policy = sub_policy
    self.policy_name = policy_name
    self.policy_name_eng = policy_name_eng
    self.is_customer_visible = is_customer_visible
    self.cn_description = cn_description
    self.eng_description = eng_description
    self.date_type = date_type
    self.start_date = start_date
    self.end_date = end_date
    self.is_week_effective = is_week_effective
    self.status = status
    self.is_include = is_include
    self.share = share
    self.currency_code = currency_code
    self.price_default = price_default
    self.price = price
    self.is_add = is_add
    self.single_price_default_option = single_price_default_option
    self.single_price = single_price
    self.memo = memo
    self.add_value_id = add_value_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rate_plan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.policy_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sub_policy = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.policy_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.policy_name_eng = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.is_customer_visible = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cn_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.eng_description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.is_week_effective = []
          (_etype600, _size597) = iprot.readListBegin()
          for _i601 in xrange(_size597):
            _elem602 = iprot.readI32()
            self.is_week_effective.append(_elem602)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.is_include = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.share = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.currency_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.price_default = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.is_add = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.single_price_default_option = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.single_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.add_value_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddBreakfasePolicyInfo')
    if self.rate_plan_id is not None:
      oprot.writeFieldBegin('rate_plan_id', TType.I64, 1)
      oprot.writeI64(self.rate_plan_id)
      oprot.writeFieldEnd()
    if self.policy_id is not None:
      oprot.writeFieldBegin('policy_id', TType.I64, 2)
      oprot.writeI64(self.policy_id)
      oprot.writeFieldEnd()
    if self.sub_policy is not None:
      oprot.writeFieldBegin('sub_policy', TType.I32, 3)
      oprot.writeI32(self.sub_policy)
      oprot.writeFieldEnd()
    if self.policy_name is not None:
      oprot.writeFieldBegin('policy_name', TType.STRING, 4)
      oprot.writeString(self.policy_name)
      oprot.writeFieldEnd()
    if self.policy_name_eng is not None:
      oprot.writeFieldBegin('policy_name_eng', TType.STRING, 5)
      oprot.writeString(self.policy_name_eng)
      oprot.writeFieldEnd()
    if self.is_customer_visible is not None:
      oprot.writeFieldBegin('is_customer_visible', TType.I32, 6)
      oprot.writeI32(self.is_customer_visible)
      oprot.writeFieldEnd()
    if self.cn_description is not None:
      oprot.writeFieldBegin('cn_description', TType.STRING, 7)
      oprot.writeString(self.cn_description)
      oprot.writeFieldEnd()
    if self.eng_description is not None:
      oprot.writeFieldBegin('eng_description', TType.STRING, 8)
      oprot.writeString(self.eng_description)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 9)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 10)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 11)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.is_week_effective is not None:
      oprot.writeFieldBegin('is_week_effective', TType.LIST, 12)
      oprot.writeListBegin(TType.I32, len(self.is_week_effective))
      for iter603 in self.is_week_effective:
        oprot.writeI32(iter603)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.is_include is not None:
      oprot.writeFieldBegin('is_include', TType.I32, 14)
      oprot.writeI32(self.is_include)
      oprot.writeFieldEnd()
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.I32, 15)
      oprot.writeI32(self.share)
      oprot.writeFieldEnd()
    if self.currency_code is not None:
      oprot.writeFieldBegin('currency_code', TType.STRING, 16)
      oprot.writeString(self.currency_code)
      oprot.writeFieldEnd()
    if self.price_default is not None:
      oprot.writeFieldBegin('price_default', TType.I32, 17)
      oprot.writeI32(self.price_default)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 18)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.is_add is not None:
      oprot.writeFieldBegin('is_add', TType.I32, 19)
      oprot.writeI32(self.is_add)
      oprot.writeFieldEnd()
    if self.single_price_default_option is not None:
      oprot.writeFieldBegin('single_price_default_option', TType.I32, 20)
      oprot.writeI32(self.single_price_default_option)
      oprot.writeFieldEnd()
    if self.single_price is not None:
      oprot.writeFieldBegin('single_price', TType.DOUBLE, 21)
      oprot.writeDouble(self.single_price)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 22)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.add_value_id is not None:
      oprot.writeFieldBegin('add_value_id', TType.I64, 23)
      oprot.writeI64(self.add_value_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rate_plan_id)
    value = (value * 31) ^ hash(self.policy_id)
    value = (value * 31) ^ hash(self.sub_policy)
    value = (value * 31) ^ hash(self.policy_name)
    value = (value * 31) ^ hash(self.policy_name_eng)
    value = (value * 31) ^ hash(self.is_customer_visible)
    value = (value * 31) ^ hash(self.cn_description)
    value = (value * 31) ^ hash(self.eng_description)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.is_week_effective)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.is_include)
    value = (value * 31) ^ hash(self.share)
    value = (value * 31) ^ hash(self.currency_code)
    value = (value * 31) ^ hash(self.price_default)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.is_add)
    value = (value * 31) ^ hash(self.single_price_default_option)
    value = (value * 31) ^ hash(self.single_price)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.add_value_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HoursRoomInfo:
  """
  Attributes:
   - earliest_arrival_time
   - latest_arrival_time
   - stay_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'earliest_arrival_time', None, None, ), # 1
    (2, TType.STRING, 'latest_arrival_time', None, None, ), # 2
    (3, TType.STRING, 'stay_time', None, None, ), # 3
  )

  def __init__(self, earliest_arrival_time=None, latest_arrival_time=None, stay_time=None,):
    self.earliest_arrival_time = earliest_arrival_time
    self.latest_arrival_time = latest_arrival_time
    self.stay_time = stay_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.earliest_arrival_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.latest_arrival_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.stay_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HoursRoomInfo')
    if self.earliest_arrival_time is not None:
      oprot.writeFieldBegin('earliest_arrival_time', TType.STRING, 1)
      oprot.writeString(self.earliest_arrival_time)
      oprot.writeFieldEnd()
    if self.latest_arrival_time is not None:
      oprot.writeFieldBegin('latest_arrival_time', TType.STRING, 2)
      oprot.writeString(self.latest_arrival_time)
      oprot.writeFieldEnd()
    if self.stay_time is not None:
      oprot.writeFieldBegin('stay_time', TType.STRING, 3)
      oprot.writeString(self.stay_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.earliest_arrival_time)
    value = (value * 31) ^ hash(self.latest_arrival_time)
    value = (value * 31) ^ hash(self.stay_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RatePlanAddtion:
  """
  Attributes:
   - addition_id
   - addition_value
   - addition_value_str
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'addition_id', None, None, ), # 1
    (2, TType.I32, 'addition_value', None, None, ), # 2
    (3, TType.STRING, 'addition_value_str', None, None, ), # 3
  )

  def __init__(self, addition_id=None, addition_value=None, addition_value_str=None,):
    self.addition_id = addition_id
    self.addition_value = addition_value
    self.addition_value_str = addition_value_str

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.addition_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.addition_value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.addition_value_str = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RatePlanAddtion')
    if self.addition_id is not None:
      oprot.writeFieldBegin('addition_id', TType.I32, 1)
      oprot.writeI32(self.addition_id)
      oprot.writeFieldEnd()
    if self.addition_value is not None:
      oprot.writeFieldBegin('addition_value', TType.I32, 2)
      oprot.writeI32(self.addition_value)
      oprot.writeFieldEnd()
    if self.addition_value_str is not None:
      oprot.writeFieldBegin('addition_value_str', TType.STRING, 3)
      oprot.writeString(self.addition_value_str)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addition_id)
    value = (value * 31) ^ hash(self.addition_value)
    value = (value * 31) ^ hash(self.addition_value_str)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RPRatePlan:
  """
  Attributes:
   - rateplan_id
   - booking_channel
   - sell_channel
   - product_type
   - customer_level
   - settlement_type
   - price_model
   - price_type
   - rateplan_name_cn
   - rateplan_name_en
   - rateplan_description_cn
   - rateplan_description_en
   - min_advance_booking_days
   - max_advance_booking_days
   - start_date
   - end_date
   - min_stay_days
   - max_stay_days
   - is_limit_time_sale
   - min_checkin_rooms
   - inventory_limit
   - status
   - date_type
   - expected_confirm_time
   - add_value_infos
   - vouch_infos
   - prepay_infos
   - is_special_breakfast
   - add_breakfast_info_of_days
   - add_breakfast_policy_infos
   - additions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rateplan_id', None, None, ), # 1
    (2, TType.I32, 'booking_channel', None, None, ), # 2
    (3, TType.I32, 'sell_channel', None, None, ), # 3
    (4, TType.I32, 'product_type', None, None, ), # 4
    (5, TType.I32, 'customer_level', None, None, ), # 5
    (6, TType.I32, 'settlement_type', None, None, ), # 6
    (7, TType.I32, 'price_model', None, None, ), # 7
    (8, TType.I32, 'price_type', None, None, ), # 8
    (9, TType.STRING, 'rateplan_name_cn', None, None, ), # 9
    (10, TType.STRING, 'rateplan_name_en', None, None, ), # 10
    (11, TType.STRING, 'rateplan_description_cn', None, None, ), # 11
    (12, TType.STRING, 'rateplan_description_en', None, None, ), # 12
    (13, TType.I32, 'min_advance_booking_days', None, None, ), # 13
    (14, TType.I32, 'max_advance_booking_days', None, None, ), # 14
    (15, TType.STRING, 'start_date', None, None, ), # 15
    (16, TType.STRING, 'end_date', None, None, ), # 16
    (17, TType.I32, 'min_stay_days', None, None, ), # 17
    (18, TType.I32, 'max_stay_days', None, None, ), # 18
    (19, TType.BOOL, 'is_limit_time_sale', None, None, ), # 19
    (20, TType.I32, 'min_checkin_rooms', None, None, ), # 20
    (21, TType.I32, 'inventory_limit', None, None, ), # 21
    (22, TType.I32, 'status', None, None, ), # 22
    (23, TType.I32, 'date_type', None, None, ), # 23
    None, # 24
    (25, TType.STRING, 'expected_confirm_time', None, None, ), # 25
    (26, TType.LIST, 'add_value_infos', (TType.STRUCT,(AddValueInfo, AddValueInfo.thrift_spec)), None, ), # 26
    (27, TType.LIST, 'vouch_infos', (TType.STRUCT,(VouchInfo, VouchInfo.thrift_spec)), None, ), # 27
    (28, TType.LIST, 'prepay_infos', (TType.STRUCT,(PrePayInfo, PrePayInfo.thrift_spec)), None, ), # 28
    (29, TType.BOOL, 'is_special_breakfast', None, None, ), # 29
    (30, TType.LIST, 'add_breakfast_info_of_days', (TType.STRUCT,(AddBreakfastInfoOfDay, AddBreakfastInfoOfDay.thrift_spec)), None, ), # 30
    (31, TType.LIST, 'add_breakfast_policy_infos', (TType.STRUCT,(AddBreakfasePolicyInfo, AddBreakfasePolicyInfo.thrift_spec)), None, ), # 31
    (32, TType.LIST, 'additions', (TType.STRUCT,(RatePlanAddtion, RatePlanAddtion.thrift_spec)), None, ), # 32
  )

  def __init__(self, rateplan_id=None, booking_channel=None, sell_channel=None, product_type=None, customer_level=None, settlement_type=None, price_model=None, price_type=None, rateplan_name_cn=None, rateplan_name_en=None, rateplan_description_cn=None, rateplan_description_en=None, min_advance_booking_days=None, max_advance_booking_days=None, start_date=None, end_date=None, min_stay_days=None, max_stay_days=None, is_limit_time_sale=None, min_checkin_rooms=None, inventory_limit=None, status=None, date_type=None, expected_confirm_time=None, add_value_infos=None, vouch_infos=None, prepay_infos=None, is_special_breakfast=None, add_breakfast_info_of_days=None, add_breakfast_policy_infos=None, additions=None,):
    self.rateplan_id = rateplan_id
    self.booking_channel = booking_channel
    self.sell_channel = sell_channel
    self.product_type = product_type
    self.customer_level = customer_level
    self.settlement_type = settlement_type
    self.price_model = price_model
    self.price_type = price_type
    self.rateplan_name_cn = rateplan_name_cn
    self.rateplan_name_en = rateplan_name_en
    self.rateplan_description_cn = rateplan_description_cn
    self.rateplan_description_en = rateplan_description_en
    self.min_advance_booking_days = min_advance_booking_days
    self.max_advance_booking_days = max_advance_booking_days
    self.start_date = start_date
    self.end_date = end_date
    self.min_stay_days = min_stay_days
    self.max_stay_days = max_stay_days
    self.is_limit_time_sale = is_limit_time_sale
    self.min_checkin_rooms = min_checkin_rooms
    self.inventory_limit = inventory_limit
    self.status = status
    self.date_type = date_type
    self.expected_confirm_time = expected_confirm_time
    self.add_value_infos = add_value_infos
    self.vouch_infos = vouch_infos
    self.prepay_infos = prepay_infos
    self.is_special_breakfast = is_special_breakfast
    self.add_breakfast_info_of_days = add_breakfast_info_of_days
    self.add_breakfast_policy_infos = add_breakfast_policy_infos
    self.additions = additions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.booking_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sell_channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.customer_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.settlement_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price_model = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.price_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.rateplan_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.rateplan_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.rateplan_description_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.rateplan_description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.min_advance_booking_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.max_advance_booking_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.min_stay_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.max_stay_days = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.is_limit_time_sale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.min_checkin_rooms = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.inventory_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.expected_confirm_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.LIST:
          self.add_value_infos = []
          (_etype607, _size604) = iprot.readListBegin()
          for _i608 in xrange(_size604):
            _elem609 = AddValueInfo()
            _elem609.read(iprot)
            self.add_value_infos.append(_elem609)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.vouch_infos = []
          (_etype613, _size610) = iprot.readListBegin()
          for _i614 in xrange(_size610):
            _elem615 = VouchInfo()
            _elem615.read(iprot)
            self.vouch_infos.append(_elem615)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.prepay_infos = []
          (_etype619, _size616) = iprot.readListBegin()
          for _i620 in xrange(_size616):
            _elem621 = PrePayInfo()
            _elem621.read(iprot)
            self.prepay_infos.append(_elem621)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.is_special_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.LIST:
          self.add_breakfast_info_of_days = []
          (_etype625, _size622) = iprot.readListBegin()
          for _i626 in xrange(_size622):
            _elem627 = AddBreakfastInfoOfDay()
            _elem627.read(iprot)
            self.add_breakfast_info_of_days.append(_elem627)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.LIST:
          self.add_breakfast_policy_infos = []
          (_etype631, _size628) = iprot.readListBegin()
          for _i632 in xrange(_size628):
            _elem633 = AddBreakfasePolicyInfo()
            _elem633.read(iprot)
            self.add_breakfast_policy_infos.append(_elem633)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.additions = []
          (_etype637, _size634) = iprot.readListBegin()
          for _i638 in xrange(_size634):
            _elem639 = RatePlanAddtion()
            _elem639.read(iprot)
            self.additions.append(_elem639)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RPRatePlan')
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 1)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.booking_channel is not None:
      oprot.writeFieldBegin('booking_channel', TType.I32, 2)
      oprot.writeI32(self.booking_channel)
      oprot.writeFieldEnd()
    if self.sell_channel is not None:
      oprot.writeFieldBegin('sell_channel', TType.I32, 3)
      oprot.writeI32(self.sell_channel)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I32, 4)
      oprot.writeI32(self.product_type)
      oprot.writeFieldEnd()
    if self.customer_level is not None:
      oprot.writeFieldBegin('customer_level', TType.I32, 5)
      oprot.writeI32(self.customer_level)
      oprot.writeFieldEnd()
    if self.settlement_type is not None:
      oprot.writeFieldBegin('settlement_type', TType.I32, 6)
      oprot.writeI32(self.settlement_type)
      oprot.writeFieldEnd()
    if self.price_model is not None:
      oprot.writeFieldBegin('price_model', TType.I32, 7)
      oprot.writeI32(self.price_model)
      oprot.writeFieldEnd()
    if self.price_type is not None:
      oprot.writeFieldBegin('price_type', TType.I32, 8)
      oprot.writeI32(self.price_type)
      oprot.writeFieldEnd()
    if self.rateplan_name_cn is not None:
      oprot.writeFieldBegin('rateplan_name_cn', TType.STRING, 9)
      oprot.writeString(self.rateplan_name_cn)
      oprot.writeFieldEnd()
    if self.rateplan_name_en is not None:
      oprot.writeFieldBegin('rateplan_name_en', TType.STRING, 10)
      oprot.writeString(self.rateplan_name_en)
      oprot.writeFieldEnd()
    if self.rateplan_description_cn is not None:
      oprot.writeFieldBegin('rateplan_description_cn', TType.STRING, 11)
      oprot.writeString(self.rateplan_description_cn)
      oprot.writeFieldEnd()
    if self.rateplan_description_en is not None:
      oprot.writeFieldBegin('rateplan_description_en', TType.STRING, 12)
      oprot.writeString(self.rateplan_description_en)
      oprot.writeFieldEnd()
    if self.min_advance_booking_days is not None:
      oprot.writeFieldBegin('min_advance_booking_days', TType.I32, 13)
      oprot.writeI32(self.min_advance_booking_days)
      oprot.writeFieldEnd()
    if self.max_advance_booking_days is not None:
      oprot.writeFieldBegin('max_advance_booking_days', TType.I32, 14)
      oprot.writeI32(self.max_advance_booking_days)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 15)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 16)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.min_stay_days is not None:
      oprot.writeFieldBegin('min_stay_days', TType.I32, 17)
      oprot.writeI32(self.min_stay_days)
      oprot.writeFieldEnd()
    if self.max_stay_days is not None:
      oprot.writeFieldBegin('max_stay_days', TType.I32, 18)
      oprot.writeI32(self.max_stay_days)
      oprot.writeFieldEnd()
    if self.is_limit_time_sale is not None:
      oprot.writeFieldBegin('is_limit_time_sale', TType.BOOL, 19)
      oprot.writeBool(self.is_limit_time_sale)
      oprot.writeFieldEnd()
    if self.min_checkin_rooms is not None:
      oprot.writeFieldBegin('min_checkin_rooms', TType.I32, 20)
      oprot.writeI32(self.min_checkin_rooms)
      oprot.writeFieldEnd()
    if self.inventory_limit is not None:
      oprot.writeFieldBegin('inventory_limit', TType.I32, 21)
      oprot.writeI32(self.inventory_limit)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 22)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 23)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.expected_confirm_time is not None:
      oprot.writeFieldBegin('expected_confirm_time', TType.STRING, 25)
      oprot.writeString(self.expected_confirm_time)
      oprot.writeFieldEnd()
    if self.add_value_infos is not None:
      oprot.writeFieldBegin('add_value_infos', TType.LIST, 26)
      oprot.writeListBegin(TType.STRUCT, len(self.add_value_infos))
      for iter640 in self.add_value_infos:
        iter640.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.vouch_infos is not None:
      oprot.writeFieldBegin('vouch_infos', TType.LIST, 27)
      oprot.writeListBegin(TType.STRUCT, len(self.vouch_infos))
      for iter641 in self.vouch_infos:
        iter641.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.prepay_infos is not None:
      oprot.writeFieldBegin('prepay_infos', TType.LIST, 28)
      oprot.writeListBegin(TType.STRUCT, len(self.prepay_infos))
      for iter642 in self.prepay_infos:
        iter642.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_special_breakfast is not None:
      oprot.writeFieldBegin('is_special_breakfast', TType.BOOL, 29)
      oprot.writeBool(self.is_special_breakfast)
      oprot.writeFieldEnd()
    if self.add_breakfast_info_of_days is not None:
      oprot.writeFieldBegin('add_breakfast_info_of_days', TType.LIST, 30)
      oprot.writeListBegin(TType.STRUCT, len(self.add_breakfast_info_of_days))
      for iter643 in self.add_breakfast_info_of_days:
        iter643.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.add_breakfast_policy_infos is not None:
      oprot.writeFieldBegin('add_breakfast_policy_infos', TType.LIST, 31)
      oprot.writeListBegin(TType.STRUCT, len(self.add_breakfast_policy_infos))
      for iter644 in self.add_breakfast_policy_infos:
        iter644.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.additions is not None:
      oprot.writeFieldBegin('additions', TType.LIST, 32)
      oprot.writeListBegin(TType.STRUCT, len(self.additions))
      for iter645 in self.additions:
        iter645.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.booking_channel)
    value = (value * 31) ^ hash(self.sell_channel)
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.customer_level)
    value = (value * 31) ^ hash(self.settlement_type)
    value = (value * 31) ^ hash(self.price_model)
    value = (value * 31) ^ hash(self.price_type)
    value = (value * 31) ^ hash(self.rateplan_name_cn)
    value = (value * 31) ^ hash(self.rateplan_name_en)
    value = (value * 31) ^ hash(self.rateplan_description_cn)
    value = (value * 31) ^ hash(self.rateplan_description_en)
    value = (value * 31) ^ hash(self.min_advance_booking_days)
    value = (value * 31) ^ hash(self.max_advance_booking_days)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.min_stay_days)
    value = (value * 31) ^ hash(self.max_stay_days)
    value = (value * 31) ^ hash(self.is_limit_time_sale)
    value = (value * 31) ^ hash(self.min_checkin_rooms)
    value = (value * 31) ^ hash(self.inventory_limit)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.expected_confirm_time)
    value = (value * 31) ^ hash(self.add_value_infos)
    value = (value * 31) ^ hash(self.vouch_infos)
    value = (value * 31) ^ hash(self.prepay_infos)
    value = (value * 31) ^ hash(self.is_special_breakfast)
    value = (value * 31) ^ hash(self.add_breakfast_info_of_days)
    value = (value * 31) ^ hash(self.add_breakfast_policy_infos)
    value = (value * 31) ^ hash(self.additions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarketingPromotion:
  """
  Attributes:
   - id
   - promotion_type
   - description
   - upper_limit
   - offer_desc
   - exclusive_type
   - actiontype
   - short_message
   - short_message_eng
   - short_message_big5
   - pro_hotel_product_id
   - promotion_description
   - has_inv_limit
   - inv_left
   - priority
   - hongbao_records
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'promotion_type', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.DOUBLE, 'upper_limit', None, None, ), # 4
    (5, TType.STRING, 'offer_desc', None, None, ), # 5
    (6, TType.I32, 'exclusive_type', None, None, ), # 6
    (7, TType.I32, 'actiontype', None, None, ), # 7
    (8, TType.STRING, 'short_message', None, None, ), # 8
    (9, TType.STRING, 'short_message_eng', None, None, ), # 9
    (10, TType.STRING, 'short_message_big5', None, None, ), # 10
    (11, TType.I64, 'pro_hotel_product_id', None, None, ), # 11
    (12, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 12
    (13, TType.BOOL, 'has_inv_limit', None, None, ), # 13
    (14, TType.I32, 'inv_left', None, None, ), # 14
    (15, TType.I32, 'priority', None, None, ), # 15
    (16, TType.LIST, 'hongbao_records', (TType.STRUCT,(HongbaoRecord, HongbaoRecord.thrift_spec)), None, ), # 16
  )

  def __init__(self, id=None, promotion_type=None, description=None, upper_limit=None, offer_desc=None, exclusive_type=None, actiontype=None, short_message=None, short_message_eng=None, short_message_big5=None, pro_hotel_product_id=None, promotion_description=None, has_inv_limit=None, inv_left=None, priority=None, hongbao_records=None,):
    self.id = id
    self.promotion_type = promotion_type
    self.description = description
    self.upper_limit = upper_limit
    self.offer_desc = offer_desc
    self.exclusive_type = exclusive_type
    self.actiontype = actiontype
    self.short_message = short_message
    self.short_message_eng = short_message_eng
    self.short_message_big5 = short_message_big5
    self.pro_hotel_product_id = pro_hotel_product_id
    self.promotion_description = promotion_description
    self.has_inv_limit = has_inv_limit
    self.inv_left = inv_left
    self.priority = priority
    self.hongbao_records = hongbao_records

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.offer_desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exclusive_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.actiontype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.short_message = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.short_message_eng = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.short_message_big5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.pro_hotel_product_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype649, _size646) = iprot.readListBegin()
          for _i650 in xrange(_size646):
            _elem651 = PromotionDescription()
            _elem651.read(iprot)
            self.promotion_description.append(_elem651)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.has_inv_limit = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.inv_left = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.hongbao_records = []
          (_etype655, _size652) = iprot.readListBegin()
          for _i656 in xrange(_size652):
            _elem657 = HongbaoRecord()
            _elem657.read(iprot)
            self.hongbao_records.append(_elem657)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarketingPromotion')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 2)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 4)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.offer_desc is not None:
      oprot.writeFieldBegin('offer_desc', TType.STRING, 5)
      oprot.writeString(self.offer_desc)
      oprot.writeFieldEnd()
    if self.exclusive_type is not None:
      oprot.writeFieldBegin('exclusive_type', TType.I32, 6)
      oprot.writeI32(self.exclusive_type)
      oprot.writeFieldEnd()
    if self.actiontype is not None:
      oprot.writeFieldBegin('actiontype', TType.I32, 7)
      oprot.writeI32(self.actiontype)
      oprot.writeFieldEnd()
    if self.short_message is not None:
      oprot.writeFieldBegin('short_message', TType.STRING, 8)
      oprot.writeString(self.short_message)
      oprot.writeFieldEnd()
    if self.short_message_eng is not None:
      oprot.writeFieldBegin('short_message_eng', TType.STRING, 9)
      oprot.writeString(self.short_message_eng)
      oprot.writeFieldEnd()
    if self.short_message_big5 is not None:
      oprot.writeFieldBegin('short_message_big5', TType.STRING, 10)
      oprot.writeString(self.short_message_big5)
      oprot.writeFieldEnd()
    if self.pro_hotel_product_id is not None:
      oprot.writeFieldBegin('pro_hotel_product_id', TType.I64, 11)
      oprot.writeI64(self.pro_hotel_product_id)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter658 in self.promotion_description:
        iter658.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_inv_limit is not None:
      oprot.writeFieldBegin('has_inv_limit', TType.BOOL, 13)
      oprot.writeBool(self.has_inv_limit)
      oprot.writeFieldEnd()
    if self.inv_left is not None:
      oprot.writeFieldBegin('inv_left', TType.I32, 14)
      oprot.writeI32(self.inv_left)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 15)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.hongbao_records is not None:
      oprot.writeFieldBegin('hongbao_records', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.hongbao_records))
      for iter659 in self.hongbao_records:
        iter659.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.offer_desc)
    value = (value * 31) ^ hash(self.exclusive_type)
    value = (value * 31) ^ hash(self.actiontype)
    value = (value * 31) ^ hash(self.short_message)
    value = (value * 31) ^ hash(self.short_message_eng)
    value = (value * 31) ^ hash(self.short_message_big5)
    value = (value * 31) ^ hash(self.pro_hotel_product_id)
    value = (value * 31) ^ hash(self.promotion_description)
    value = (value * 31) ^ hash(self.has_inv_limit)
    value = (value * 31) ^ hash(self.inv_left)
    value = (value * 31) ^ hash(self.priority)
    value = (value * 31) ^ hash(self.hongbao_records)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Inventory:
  """
  Attributes:
   - date
   - amount
   - status
   - is_over_booking
   - allbuyroom_amount
   - over_sold_limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I32, 'amount', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.I32, 'is_over_booking', None, None, ), # 4
    (5, TType.I32, 'allbuyroom_amount', None, None, ), # 5
    (6, TType.I32, 'over_sold_limit', None, None, ), # 6
  )

  def __init__(self, date=None, amount=None, status=None, is_over_booking=None, allbuyroom_amount=None, over_sold_limit=None,):
    self.date = date
    self.amount = amount
    self.status = status
    self.is_over_booking = is_over_booking
    self.allbuyroom_amount = allbuyroom_amount
    self.over_sold_limit = over_sold_limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.is_over_booking = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.allbuyroom_amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.over_sold_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Inventory')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 2)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.is_over_booking is not None:
      oprot.writeFieldBegin('is_over_booking', TType.I32, 4)
      oprot.writeI32(self.is_over_booking)
      oprot.writeFieldEnd()
    if self.allbuyroom_amount is not None:
      oprot.writeFieldBegin('allbuyroom_amount', TType.I32, 5)
      oprot.writeI32(self.allbuyroom_amount)
      oprot.writeFieldEnd()
    if self.over_sold_limit is not None:
      oprot.writeFieldBegin('over_sold_limit', TType.I32, 6)
      oprot.writeI32(self.over_sold_limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.is_over_booking)
    value = (value * 31) ^ hash(self.allbuyroom_amount)
    value = (value * 31) ^ hash(self.over_sold_limit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceDays:
  """
  Attributes:
   - status
   - date
   - add_bed_price
   - currency
   - gen_sale_cost_origin
   - gen_sale_price
   - is_add_bed
   - is_hotel_weekend
   - is_price_promotion
   - real_cost_origin
   - sale_cost_origin
   - sale_price
   - sale_price_with_drr
   - weekend_sale_cost_origin
   - weekend_sale_price
   - weekend_price_origin
   - general_price_origin
   - sale_price_with_drr_origin
   - add_bed_price_origin
   - sale_price_with_drr_sub_coupon
   - sale_cost
   - sale_price_with_drr_d_before
   - sale_price_with_drr_origin_d_before
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'date', None, None, ), # 2
    (3, TType.I32, 'add_bed_price', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.DOUBLE, 'gen_sale_cost_origin', None, None, ), # 5
    (6, TType.DOUBLE, 'gen_sale_price', None, None, ), # 6
    (7, TType.BOOL, 'is_add_bed', None, None, ), # 7
    (8, TType.BOOL, 'is_hotel_weekend', None, None, ), # 8
    (9, TType.BOOL, 'is_price_promotion', None, None, ), # 9
    (10, TType.DOUBLE, 'real_cost_origin', None, None, ), # 10
    (11, TType.DOUBLE, 'sale_cost_origin', None, None, ), # 11
    (12, TType.DOUBLE, 'sale_price', None, None, ), # 12
    (13, TType.DOUBLE, 'sale_price_with_drr', None, None, ), # 13
    None, # 14
    (15, TType.DOUBLE, 'weekend_sale_cost_origin', None, None, ), # 15
    (16, TType.DOUBLE, 'weekend_sale_price', None, None, ), # 16
    (17, TType.DOUBLE, 'weekend_price_origin', None, None, ), # 17
    (18, TType.DOUBLE, 'general_price_origin', None, None, ), # 18
    (19, TType.DOUBLE, 'sale_price_with_drr_origin', None, None, ), # 19
    (20, TType.DOUBLE, 'add_bed_price_origin', None, None, ), # 20
    (21, TType.DOUBLE, 'sale_price_with_drr_sub_coupon', None, None, ), # 21
    (22, TType.DOUBLE, 'sale_cost', None, None, ), # 22
    (23, TType.DOUBLE, 'sale_price_with_drr_d_before', None, None, ), # 23
    (24, TType.DOUBLE, 'sale_price_with_drr_origin_d_before', None, None, ), # 24
  )

  def __init__(self, status=None, date=None, add_bed_price=None, currency=None, gen_sale_cost_origin=None, gen_sale_price=None, is_add_bed=None, is_hotel_weekend=None, is_price_promotion=None, real_cost_origin=None, sale_cost_origin=None, sale_price=None, sale_price_with_drr=None, weekend_sale_cost_origin=None, weekend_sale_price=None, weekend_price_origin=None, general_price_origin=None, sale_price_with_drr_origin=None, add_bed_price_origin=None, sale_price_with_drr_sub_coupon=None, sale_cost=None, sale_price_with_drr_d_before=None, sale_price_with_drr_origin_d_before=None,):
    self.status = status
    self.date = date
    self.add_bed_price = add_bed_price
    self.currency = currency
    self.gen_sale_cost_origin = gen_sale_cost_origin
    self.gen_sale_price = gen_sale_price
    self.is_add_bed = is_add_bed
    self.is_hotel_weekend = is_hotel_weekend
    self.is_price_promotion = is_price_promotion
    self.real_cost_origin = real_cost_origin
    self.sale_cost_origin = sale_cost_origin
    self.sale_price = sale_price
    self.sale_price_with_drr = sale_price_with_drr
    self.weekend_sale_cost_origin = weekend_sale_cost_origin
    self.weekend_sale_price = weekend_sale_price
    self.weekend_price_origin = weekend_price_origin
    self.general_price_origin = general_price_origin
    self.sale_price_with_drr_origin = sale_price_with_drr_origin
    self.add_bed_price_origin = add_bed_price_origin
    self.sale_price_with_drr_sub_coupon = sale_price_with_drr_sub_coupon
    self.sale_cost = sale_cost
    self.sale_price_with_drr_d_before = sale_price_with_drr_d_before
    self.sale_price_with_drr_origin_d_before = sale_price_with_drr_origin_d_before

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.add_bed_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.gen_sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.gen_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_add_bed = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.is_hotel_weekend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.is_price_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.real_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.weekend_sale_cost_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.weekend_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.weekend_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.general_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.add_bed_price_origin = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_sub_coupon = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.sale_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_d_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.sale_price_with_drr_origin_d_before = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceDays')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 2)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.add_bed_price is not None:
      oprot.writeFieldBegin('add_bed_price', TType.I32, 3)
      oprot.writeI32(self.add_bed_price)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.gen_sale_cost_origin is not None:
      oprot.writeFieldBegin('gen_sale_cost_origin', TType.DOUBLE, 5)
      oprot.writeDouble(self.gen_sale_cost_origin)
      oprot.writeFieldEnd()
    if self.gen_sale_price is not None:
      oprot.writeFieldBegin('gen_sale_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.gen_sale_price)
      oprot.writeFieldEnd()
    if self.is_add_bed is not None:
      oprot.writeFieldBegin('is_add_bed', TType.BOOL, 7)
      oprot.writeBool(self.is_add_bed)
      oprot.writeFieldEnd()
    if self.is_hotel_weekend is not None:
      oprot.writeFieldBegin('is_hotel_weekend', TType.BOOL, 8)
      oprot.writeBool(self.is_hotel_weekend)
      oprot.writeFieldEnd()
    if self.is_price_promotion is not None:
      oprot.writeFieldBegin('is_price_promotion', TType.BOOL, 9)
      oprot.writeBool(self.is_price_promotion)
      oprot.writeFieldEnd()
    if self.real_cost_origin is not None:
      oprot.writeFieldBegin('real_cost_origin', TType.DOUBLE, 10)
      oprot.writeDouble(self.real_cost_origin)
      oprot.writeFieldEnd()
    if self.sale_cost_origin is not None:
      oprot.writeFieldBegin('sale_cost_origin', TType.DOUBLE, 11)
      oprot.writeDouble(self.sale_cost_origin)
      oprot.writeFieldEnd()
    if self.sale_price is not None:
      oprot.writeFieldBegin('sale_price', TType.DOUBLE, 12)
      oprot.writeDouble(self.sale_price)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr is not None:
      oprot.writeFieldBegin('sale_price_with_drr', TType.DOUBLE, 13)
      oprot.writeDouble(self.sale_price_with_drr)
      oprot.writeFieldEnd()
    if self.weekend_sale_cost_origin is not None:
      oprot.writeFieldBegin('weekend_sale_cost_origin', TType.DOUBLE, 15)
      oprot.writeDouble(self.weekend_sale_cost_origin)
      oprot.writeFieldEnd()
    if self.weekend_sale_price is not None:
      oprot.writeFieldBegin('weekend_sale_price', TType.DOUBLE, 16)
      oprot.writeDouble(self.weekend_sale_price)
      oprot.writeFieldEnd()
    if self.weekend_price_origin is not None:
      oprot.writeFieldBegin('weekend_price_origin', TType.DOUBLE, 17)
      oprot.writeDouble(self.weekend_price_origin)
      oprot.writeFieldEnd()
    if self.general_price_origin is not None:
      oprot.writeFieldBegin('general_price_origin', TType.DOUBLE, 18)
      oprot.writeDouble(self.general_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin', TType.DOUBLE, 19)
      oprot.writeDouble(self.sale_price_with_drr_origin)
      oprot.writeFieldEnd()
    if self.add_bed_price_origin is not None:
      oprot.writeFieldBegin('add_bed_price_origin', TType.DOUBLE, 20)
      oprot.writeDouble(self.add_bed_price_origin)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_sub_coupon is not None:
      oprot.writeFieldBegin('sale_price_with_drr_sub_coupon', TType.DOUBLE, 21)
      oprot.writeDouble(self.sale_price_with_drr_sub_coupon)
      oprot.writeFieldEnd()
    if self.sale_cost is not None:
      oprot.writeFieldBegin('sale_cost', TType.DOUBLE, 22)
      oprot.writeDouble(self.sale_cost)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_d_before is not None:
      oprot.writeFieldBegin('sale_price_with_drr_d_before', TType.DOUBLE, 23)
      oprot.writeDouble(self.sale_price_with_drr_d_before)
      oprot.writeFieldEnd()
    if self.sale_price_with_drr_origin_d_before is not None:
      oprot.writeFieldBegin('sale_price_with_drr_origin_d_before', TType.DOUBLE, 24)
      oprot.writeDouble(self.sale_price_with_drr_origin_d_before)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.add_bed_price)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.gen_sale_cost_origin)
    value = (value * 31) ^ hash(self.gen_sale_price)
    value = (value * 31) ^ hash(self.is_add_bed)
    value = (value * 31) ^ hash(self.is_hotel_weekend)
    value = (value * 31) ^ hash(self.is_price_promotion)
    value = (value * 31) ^ hash(self.real_cost_origin)
    value = (value * 31) ^ hash(self.sale_cost_origin)
    value = (value * 31) ^ hash(self.sale_price)
    value = (value * 31) ^ hash(self.sale_price_with_drr)
    value = (value * 31) ^ hash(self.weekend_sale_cost_origin)
    value = (value * 31) ^ hash(self.weekend_sale_price)
    value = (value * 31) ^ hash(self.weekend_price_origin)
    value = (value * 31) ^ hash(self.general_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin)
    value = (value * 31) ^ hash(self.add_bed_price_origin)
    value = (value * 31) ^ hash(self.sale_price_with_drr_sub_coupon)
    value = (value * 31) ^ hash(self.sale_cost)
    value = (value * 31) ^ hash(self.sale_price_with_drr_d_before)
    value = (value * 31) ^ hash(self.sale_price_with_drr_origin_d_before)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Price:
  """
  Attributes:
   - audit_status
   - is_effective
   - day_prices
   - price_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'audit_status', None, None, ), # 1
    (2, TType.BOOL, 'is_effective', None, None, ), # 2
    None, # 3
    (4, TType.LIST, 'day_prices', (TType.STRUCT,(PriceDays, PriceDays.thrift_spec)), None, ), # 4
    (5, TType.I32, 'price_status', None, None, ), # 5
  )

  def __init__(self, audit_status=None, is_effective=None, day_prices=None, price_status=None,):
    self.audit_status = audit_status
    self.is_effective = is_effective
    self.day_prices = day_prices
    self.price_status = price_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.audit_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_effective = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.day_prices = []
          (_etype663, _size660) = iprot.readListBegin()
          for _i664 in xrange(_size660):
            _elem665 = PriceDays()
            _elem665.read(iprot)
            self.day_prices.append(_elem665)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.price_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Price')
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.I32, 1)
      oprot.writeI32(self.audit_status)
      oprot.writeFieldEnd()
    if self.is_effective is not None:
      oprot.writeFieldBegin('is_effective', TType.BOOL, 2)
      oprot.writeBool(self.is_effective)
      oprot.writeFieldEnd()
    if self.day_prices is not None:
      oprot.writeFieldBegin('day_prices', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.day_prices))
      for iter666 in self.day_prices:
        iter666.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_status is not None:
      oprot.writeFieldBegin('price_status', TType.I32, 5)
      oprot.writeI32(self.price_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.is_effective)
    value = (value * 31) ^ hash(self.day_prices)
    value = (value * 31) ^ hash(self.price_status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelProductRelation:
  """
  Attributes:
   - product_id
   - sroom_id
   - rp_id
   - relation_type
   - relation_product_price
   - mroom_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_id', None, None, ), # 1
    (2, TType.I32, 'sroom_id', None, None, ), # 2
    (3, TType.I32, 'rp_id', None, None, ), # 3
    (4, TType.I32, 'relation_type', None, None, ), # 4
    (5, TType.DOUBLE, 'relation_product_price', None, None, ), # 5
    (6, TType.I32, 'mroom_id', None, None, ), # 6
  )

  def __init__(self, product_id=None, sroom_id=None, rp_id=None, relation_type=None, relation_product_price=None, mroom_id=None,):
    self.product_id = product_id
    self.sroom_id = sroom_id
    self.rp_id = rp_id
    self.relation_type = relation_type
    self.relation_product_price = relation_product_price
    self.mroom_id = mroom_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.rp_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.relation_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.relation_product_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.mroom_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelProductRelation')
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 1)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.sroom_id is not None:
      oprot.writeFieldBegin('sroom_id', TType.I32, 2)
      oprot.writeI32(self.sroom_id)
      oprot.writeFieldEnd()
    if self.rp_id is not None:
      oprot.writeFieldBegin('rp_id', TType.I32, 3)
      oprot.writeI32(self.rp_id)
      oprot.writeFieldEnd()
    if self.relation_type is not None:
      oprot.writeFieldBegin('relation_type', TType.I32, 4)
      oprot.writeI32(self.relation_type)
      oprot.writeFieldEnd()
    if self.relation_product_price is not None:
      oprot.writeFieldBegin('relation_product_price', TType.DOUBLE, 5)
      oprot.writeDouble(self.relation_product_price)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I32, 6)
      oprot.writeI32(self.mroom_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.sroom_id)
    value = (value * 31) ^ hash(self.rp_id)
    value = (value * 31) ^ hash(self.relation_type)
    value = (value * 31) ^ hash(self.relation_product_price)
    value = (value * 31) ^ hash(self.mroom_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrrAttr:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrrAttr')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrrMsg:
  """
  Attributes:
   - id
   - drrAttr
   - date_type
   - start_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.LIST, 'drrAttr', (TType.STRUCT,(DrrAttr, DrrAttr.thrift_spec)), None, ), # 2
    (3, TType.I32, 'date_type', None, None, ), # 3
    (4, TType.I64, 'start_date', None, None, ), # 4
    (5, TType.I64, 'end_date', None, None, ), # 5
  )

  def __init__(self, id=None, drrAttr=None, date_type=None, start_date=None, end_date=None,):
    self.id = id
    self.drrAttr = drrAttr
    self.date_type = date_type
    self.start_date = start_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.drrAttr = []
          (_etype670, _size667) = iprot.readListBegin()
          for _i671 in xrange(_size667):
            _elem672 = DrrAttr()
            _elem672.read(iprot)
            self.drrAttr.append(_elem672)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.date_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.start_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.end_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrrMsg')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.drrAttr is not None:
      oprot.writeFieldBegin('drrAttr', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.drrAttr))
      for iter673 in self.drrAttr:
        iter673.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.date_type is not None:
      oprot.writeFieldBegin('date_type', TType.I32, 3)
      oprot.writeI32(self.date_type)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I64, 4)
      oprot.writeI64(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I64, 5)
      oprot.writeI64(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.date_type is None:
      raise TProtocol.TProtocolException(message='Required field date_type is unset!')
    if self.start_date is None:
      raise TProtocol.TProtocolException(message='Required field start_date is unset!')
    if self.end_date is None:
      raise TProtocol.TProtocolException(message='Required field end_date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.drrAttr)
    value = (value * 31) ^ hash(self.date_type)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DayMarketingPromotion:
  """
  Attributes:
   - date
   - day_marketing_promotion
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.LIST, 'day_marketing_promotion', (TType.STRUCT,(MarketingPromotion, MarketingPromotion.thrift_spec)), None, ), # 2
  )

  def __init__(self, date=None, day_marketing_promotion=None,):
    self.date = date
    self.day_marketing_promotion = day_marketing_promotion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.day_marketing_promotion = []
          (_etype677, _size674) = iprot.readListBegin()
          for _i678 in xrange(_size674):
            _elem679 = MarketingPromotion()
            _elem679.read(iprot)
            self.day_marketing_promotion.append(_elem679)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DayMarketingPromotion')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.day_marketing_promotion is not None:
      oprot.writeFieldBegin('day_marketing_promotion', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.day_marketing_promotion))
      for iter680 in self.day_marketing_promotion:
        iter680.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.day_marketing_promotion)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TicketCalendar:
  """
  Attributes:
   - date
   - cost_price
   - market_price
   - price
   - is_bookable
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.DOUBLE, 'cost_price', None, None, ), # 2
    (3, TType.DOUBLE, 'market_price', None, None, ), # 3
    (4, TType.DOUBLE, 'price', None, None, ), # 4
    (5, TType.BOOL, 'is_bookable', None, None, ), # 5
  )

  def __init__(self, date=None, cost_price=None, market_price=None, price=None, is_bookable=None,):
    self.date = date
    self.cost_price = cost_price
    self.market_price = market_price
    self.price = price
    self.is_bookable = is_bookable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.cost_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.market_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_bookable = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TicketCalendar')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.cost_price is not None:
      oprot.writeFieldBegin('cost_price', TType.DOUBLE, 2)
      oprot.writeDouble(self.cost_price)
      oprot.writeFieldEnd()
    if self.market_price is not None:
      oprot.writeFieldBegin('market_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.market_price)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 4)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.is_bookable is not None:
      oprot.writeFieldBegin('is_bookable', TType.BOOL, 5)
      oprot.writeBool(self.is_bookable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.cost_price)
    value = (value * 31) ^ hash(self.market_price)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.is_bookable)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TicketInfo:
  """
  Attributes:
   - ticket_num
   - product_id
   - product_name
   - scenery_id
   - scenery_name
   - ticket_calendar
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ticket_num', None, None, ), # 1
    (2, TType.I64, 'product_id', None, None, ), # 2
    (3, TType.STRING, 'product_name', None, None, ), # 3
    (4, TType.I64, 'scenery_id', None, None, ), # 4
    (5, TType.STRING, 'scenery_name', None, None, ), # 5
    (6, TType.LIST, 'ticket_calendar', (TType.STRUCT,(TicketCalendar, TicketCalendar.thrift_spec)), None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
  )

  def __init__(self, ticket_num=None, product_id=None, product_name=None, scenery_id=None, scenery_name=None, ticket_calendar=None, status=None,):
    self.ticket_num = ticket_num
    self.product_id = product_id
    self.product_name = product_name
    self.scenery_id = scenery_id
    self.scenery_name = scenery_name
    self.ticket_calendar = ticket_calendar
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ticket_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.product_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.product_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.scenery_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.scenery_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.ticket_calendar = []
          (_etype684, _size681) = iprot.readListBegin()
          for _i685 in xrange(_size681):
            _elem686 = TicketCalendar()
            _elem686.read(iprot)
            self.ticket_calendar.append(_elem686)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TicketInfo')
    if self.ticket_num is not None:
      oprot.writeFieldBegin('ticket_num', TType.I32, 1)
      oprot.writeI32(self.ticket_num)
      oprot.writeFieldEnd()
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I64, 2)
      oprot.writeI64(self.product_id)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 3)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.scenery_id is not None:
      oprot.writeFieldBegin('scenery_id', TType.I64, 4)
      oprot.writeI64(self.scenery_id)
      oprot.writeFieldEnd()
    if self.scenery_name is not None:
      oprot.writeFieldBegin('scenery_name', TType.STRING, 5)
      oprot.writeString(self.scenery_name)
      oprot.writeFieldEnd()
    if self.ticket_calendar is not None:
      oprot.writeFieldBegin('ticket_calendar', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.ticket_calendar))
      for iter687 in self.ticket_calendar:
        iter687.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ticket_num)
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.product_name)
    value = (value * 31) ^ hash(self.scenery_id)
    value = (value * 31) ^ hash(self.scenery_name)
    value = (value * 31) ^ hash(self.ticket_calendar)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MinTicketInfo:
  """
  Attributes:
   - date
   - product_id
   - product_name
   - min_ticket_sale_price
   - min_ticket_market_price
   - min_ticket_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.I64, 'product_id', None, None, ), # 2
    (3, TType.STRING, 'product_name', None, None, ), # 3
    (4, TType.DOUBLE, 'min_ticket_sale_price', None, None, ), # 4
    (5, TType.DOUBLE, 'min_ticket_market_price', None, None, ), # 5
    (6, TType.I32, 'min_ticket_num', None, None, ), # 6
  )

  def __init__(self, date=None, product_id=None, product_name=None, min_ticket_sale_price=None, min_ticket_market_price=None, min_ticket_num=None,):
    self.date = date
    self.product_id = product_id
    self.product_name = product_name
    self.min_ticket_sale_price = min_ticket_sale_price
    self.min_ticket_market_price = min_ticket_market_price
    self.min_ticket_num = min_ticket_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.product_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.product_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.min_ticket_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.min_ticket_market_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.min_ticket_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MinTicketInfo')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I64, 2)
      oprot.writeI64(self.product_id)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 3)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.min_ticket_sale_price is not None:
      oprot.writeFieldBegin('min_ticket_sale_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.min_ticket_sale_price)
      oprot.writeFieldEnd()
    if self.min_ticket_market_price is not None:
      oprot.writeFieldBegin('min_ticket_market_price', TType.DOUBLE, 5)
      oprot.writeDouble(self.min_ticket_market_price)
      oprot.writeFieldEnd()
    if self.min_ticket_num is not None:
      oprot.writeFieldBegin('min_ticket_num', TType.I32, 6)
      oprot.writeI32(self.min_ticket_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.product_name)
    value = (value * 31) ^ hash(self.min_ticket_sale_price)
    value = (value * 31) ^ hash(self.min_ticket_market_price)
    value = (value * 31) ^ hash(self.min_ticket_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelTicketProduct:
  """
  Attributes:
   - min_ticket_info
   - product_sale_price
   - ticket_infoes
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'min_ticket_info', (TType.STRUCT,(MinTicketInfo, MinTicketInfo.thrift_spec)), None, ), # 1
    (2, TType.DOUBLE, 'product_sale_price', None, None, ), # 2
    (3, TType.LIST, 'ticket_infoes', (TType.STRUCT,(TicketInfo, TicketInfo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
  )

  def __init__(self, min_ticket_info=None, product_sale_price=None, ticket_infoes=None, status=None,):
    self.min_ticket_info = min_ticket_info
    self.product_sale_price = product_sale_price
    self.ticket_infoes = ticket_infoes
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.min_ticket_info = []
          (_etype691, _size688) = iprot.readListBegin()
          for _i692 in xrange(_size688):
            _elem693 = MinTicketInfo()
            _elem693.read(iprot)
            self.min_ticket_info.append(_elem693)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.product_sale_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ticket_infoes = []
          (_etype697, _size694) = iprot.readListBegin()
          for _i698 in xrange(_size694):
            _elem699 = TicketInfo()
            _elem699.read(iprot)
            self.ticket_infoes.append(_elem699)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelTicketProduct')
    if self.min_ticket_info is not None:
      oprot.writeFieldBegin('min_ticket_info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.min_ticket_info))
      for iter700 in self.min_ticket_info:
        iter700.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.product_sale_price is not None:
      oprot.writeFieldBegin('product_sale_price', TType.DOUBLE, 2)
      oprot.writeDouble(self.product_sale_price)
      oprot.writeFieldEnd()
    if self.ticket_infoes is not None:
      oprot.writeFieldBegin('ticket_infoes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.ticket_infoes))
      for iter701 in self.ticket_infoes:
        iter701.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_ticket_info)
    value = (value * 31) ^ hash(self.product_sale_price)
    value = (value * 31) ^ hash(self.ticket_infoes)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Product:
  """
  Attributes:
   - sroomtype_id
   - shotel_id
   - supplier_id
   - online_search_type
   - sroomtype_status
   - has_breakfast
   - rateplan
   - rp_code
   - room_inventory_days
   - room_num_status
   - price
   - marketing_promotions
   - gifts
   - relations
   - supplier_type
   - shotel_booking_rules
   - is_freesale
   - firstnight_has_discount
   - firstnight_discount
   - firstnight_discount_upper
   - freesale_num
   - cooperation_type
   - supplier_name
   - supplier_short_name
   - supplier_alias
   - supplier_telphone
   - confirm_way
   - shotel_contacter
   - hours_room_info
   - supplier_fax
   - drrMsg
   - weekend_start
   - weekend_end
   - day_marketing_promotions
   - price_origin
   - price_sub_coupon
   - is_min_price_product
   - weight
   - id
   - cvr
   - supplier_confirm_avg_time
   - rateplan_structure_name_cn
   - is_majia
   - majia_id
   - is_resale_product
   - order_id
   - sign_type
   - cost_point
   - hotel_service_point
   - total_point
   - commission_value
   - derivative_type
   - is_exclusive_rp
   - is_hotel_ticket_product
   - hotel_ticket_product
   - force_show
   - is_support_flash_live
   - is_support_credit_live
   - is_dc_product
   - extras
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sroomtype_id', None, None, ), # 1
    (2, TType.I64, 'shotel_id', None, None, ), # 2
    (3, TType.I64, 'supplier_id', None, None, ), # 3
    (4, TType.I32, 'online_search_type', None, None, ), # 4
    (5, TType.BOOL, 'sroomtype_status', None, None, ), # 5
    (6, TType.BOOL, 'has_breakfast', None, None, ), # 6
    (7, TType.STRUCT, 'rateplan', (RPRatePlan, RPRatePlan.thrift_spec), None, ), # 7
    (8, TType.STRING, 'rp_code', None, None, ), # 8
    (9, TType.LIST, 'room_inventory_days', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 9
    (10, TType.I32, 'room_num_status', None, None, ), # 10
    (11, TType.STRUCT, 'price', (Price, Price.thrift_spec), None, ), # 11
    (12, TType.LIST, 'marketing_promotions', (TType.STRUCT,(MarketingPromotion, MarketingPromotion.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'gifts', (TType.STRUCT,(Gift, Gift.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'relations', (HotelProductRelation, HotelProductRelation.thrift_spec), None, ), # 14
    (15, TType.I64, 'supplier_type', None, None, ), # 15
    (16, TType.LIST, 'shotel_booking_rules', (TType.STRUCT,(SHotelBookingRule, SHotelBookingRule.thrift_spec)), None, ), # 16
    (17, TType.BOOL, 'is_freesale', None, None, ), # 17
    (18, TType.BOOL, 'firstnight_has_discount', None, None, ), # 18
    (19, TType.DOUBLE, 'firstnight_discount', None, None, ), # 19
    (20, TType.I32, 'firstnight_discount_upper', None, None, ), # 20
    (21, TType.I32, 'freesale_num', None, None, ), # 21
    (22, TType.I32, 'cooperation_type', None, None, ), # 22
    (23, TType.STRING, 'supplier_name', None, None, ), # 23
    (24, TType.STRING, 'supplier_short_name', None, None, ), # 24
    (25, TType.STRING, 'supplier_alias', None, None, ), # 25
    (26, TType.STRING, 'supplier_telphone', None, None, ), # 26
    (27, TType.I64, 'confirm_way', None, None, ), # 27
    (28, TType.STRING, 'shotel_contacter', None, None, ), # 28
    (29, TType.STRUCT, 'hours_room_info', (HoursRoomInfo, HoursRoomInfo.thrift_spec), None, ), # 29
    (30, TType.STRING, 'supplier_fax', None, None, ), # 30
    None, # 31
    (32, TType.STRUCT, 'drrMsg', (DrrMsg, DrrMsg.thrift_spec), None, ), # 32
    (33, TType.I32, 'weekend_start', None, None, ), # 33
    (34, TType.I32, 'weekend_end', None, None, ), # 34
    (35, TType.LIST, 'day_marketing_promotions', (TType.STRUCT,(DayMarketingPromotion, DayMarketingPromotion.thrift_spec)), None, ), # 35
    (36, TType.I32, 'price_origin', None, None, ), # 36
    (37, TType.I32, 'price_sub_coupon', None, None, ), # 37
    (38, TType.BOOL, 'is_min_price_product', None, None, ), # 38
    (39, TType.DOUBLE, 'weight', None, None, ), # 39
    (40, TType.I32, 'id', None, None, ), # 40
    (41, TType.DOUBLE, 'cvr', None, None, ), # 41
    (42, TType.I64, 'supplier_confirm_avg_time', None, None, ), # 42
    (43, TType.STRING, 'rateplan_structure_name_cn', None, None, ), # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    (134, TType.BOOL, 'is_majia', None, None, ), # 134
    (135, TType.STRING, 'majia_id', None, None, ), # 135
    (136, TType.BOOL, 'is_resale_product', None, None, ), # 136
    (137, TType.I64, 'order_id', None, None, ), # 137
    (138, TType.I32, 'sign_type', None, None, ), # 138
    (139, TType.DOUBLE, 'cost_point', None, None, ), # 139
    (140, TType.DOUBLE, 'hotel_service_point', None, None, ), # 140
    (141, TType.DOUBLE, 'total_point', None, None, ), # 141
    (142, TType.DOUBLE, 'commission_value', None, None, ), # 142
    (143, TType.I32, 'derivative_type', None, None, ), # 143
    (144, TType.BOOL, 'is_exclusive_rp', None, None, ), # 144
    (145, TType.BOOL, 'is_hotel_ticket_product', None, None, ), # 145
    (146, TType.STRUCT, 'hotel_ticket_product', (HotelTicketProduct, HotelTicketProduct.thrift_spec), None, ), # 146
    (147, TType.BYTE, 'force_show', None, None, ), # 147
    (148, TType.BOOL, 'is_support_flash_live', None, None, ), # 148
    (149, TType.BOOL, 'is_support_credit_live', None, None, ), # 149
    (150, TType.BOOL, 'is_dc_product', None, None, ), # 150
    (151, TType.DOUBLE, 'extras', None, None, ), # 151
  )

  def __init__(self, sroomtype_id=None, shotel_id=None, supplier_id=None, online_search_type=None, sroomtype_status=None, has_breakfast=None, rateplan=None, rp_code=None, room_inventory_days=None, room_num_status=None, price=None, marketing_promotions=None, gifts=None, relations=None, supplier_type=None, shotel_booking_rules=None, is_freesale=None, firstnight_has_discount=None, firstnight_discount=None, firstnight_discount_upper=None, freesale_num=None, cooperation_type=None, supplier_name=None, supplier_short_name=None, supplier_alias=None, supplier_telphone=None, confirm_way=None, shotel_contacter=None, hours_room_info=None, supplier_fax=None, drrMsg=None, weekend_start=None, weekend_end=None, day_marketing_promotions=None, price_origin=None, price_sub_coupon=None, is_min_price_product=None, weight=None, id=None, cvr=None, supplier_confirm_avg_time=None, rateplan_structure_name_cn=None, is_majia=None, majia_id=None, is_resale_product=None, order_id=None, sign_type=None, cost_point=None, hotel_service_point=None, total_point=None, commission_value=None, derivative_type=None, is_exclusive_rp=None, is_hotel_ticket_product=None, hotel_ticket_product=None, force_show=None, is_support_flash_live=None, is_support_credit_live=None, is_dc_product=None, extras=None,):
    self.sroomtype_id = sroomtype_id
    self.shotel_id = shotel_id
    self.supplier_id = supplier_id
    self.online_search_type = online_search_type
    self.sroomtype_status = sroomtype_status
    self.has_breakfast = has_breakfast
    self.rateplan = rateplan
    self.rp_code = rp_code
    self.room_inventory_days = room_inventory_days
    self.room_num_status = room_num_status
    self.price = price
    self.marketing_promotions = marketing_promotions
    self.gifts = gifts
    self.relations = relations
    self.supplier_type = supplier_type
    self.shotel_booking_rules = shotel_booking_rules
    self.is_freesale = is_freesale
    self.firstnight_has_discount = firstnight_has_discount
    self.firstnight_discount = firstnight_discount
    self.firstnight_discount_upper = firstnight_discount_upper
    self.freesale_num = freesale_num
    self.cooperation_type = cooperation_type
    self.supplier_name = supplier_name
    self.supplier_short_name = supplier_short_name
    self.supplier_alias = supplier_alias
    self.supplier_telphone = supplier_telphone
    self.confirm_way = confirm_way
    self.shotel_contacter = shotel_contacter
    self.hours_room_info = hours_room_info
    self.supplier_fax = supplier_fax
    self.drrMsg = drrMsg
    self.weekend_start = weekend_start
    self.weekend_end = weekend_end
    self.day_marketing_promotions = day_marketing_promotions
    self.price_origin = price_origin
    self.price_sub_coupon = price_sub_coupon
    self.is_min_price_product = is_min_price_product
    self.weight = weight
    self.id = id
    self.cvr = cvr
    self.supplier_confirm_avg_time = supplier_confirm_avg_time
    self.rateplan_structure_name_cn = rateplan_structure_name_cn
    self.is_majia = is_majia
    self.majia_id = majia_id
    self.is_resale_product = is_resale_product
    self.order_id = order_id
    self.sign_type = sign_type
    self.cost_point = cost_point
    self.hotel_service_point = hotel_service_point
    self.total_point = total_point
    self.commission_value = commission_value
    self.derivative_type = derivative_type
    self.is_exclusive_rp = is_exclusive_rp
    self.is_hotel_ticket_product = is_hotel_ticket_product
    self.hotel_ticket_product = hotel_ticket_product
    self.force_show = force_show
    self.is_support_flash_live = is_support_flash_live
    self.is_support_credit_live = is_support_credit_live
    self.is_dc_product = is_dc_product
    self.extras = extras

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sroomtype_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.shotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.supplier_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.online_search_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.sroomtype_status = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.has_breakfast = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.rateplan = RPRatePlan()
          self.rateplan.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.rp_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.room_inventory_days = []
          (_etype705, _size702) = iprot.readListBegin()
          for _i706 in xrange(_size702):
            _elem707 = Inventory()
            _elem707.read(iprot)
            self.room_inventory_days.append(_elem707)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.room_num_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.price = Price()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.marketing_promotions = []
          (_etype711, _size708) = iprot.readListBegin()
          for _i712 in xrange(_size708):
            _elem713 = MarketingPromotion()
            _elem713.read(iprot)
            self.marketing_promotions.append(_elem713)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.gifts = []
          (_etype717, _size714) = iprot.readListBegin()
          for _i718 in xrange(_size714):
            _elem719 = Gift()
            _elem719.read(iprot)
            self.gifts.append(_elem719)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.relations = HotelProductRelation()
          self.relations.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.supplier_type = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.shotel_booking_rules = []
          (_etype723, _size720) = iprot.readListBegin()
          for _i724 in xrange(_size720):
            _elem725 = SHotelBookingRule()
            _elem725.read(iprot)
            self.shotel_booking_rules.append(_elem725)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.is_freesale = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.firstnight_has_discount = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.firstnight_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.firstnight_discount_upper = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.freesale_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.cooperation_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.supplier_short_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.supplier_alias = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.supplier_telphone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          self.confirm_way = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.shotel_contacter = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.hours_room_info = HoursRoomInfo()
          self.hours_room_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.supplier_fax = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRUCT:
          self.drrMsg = DrrMsg()
          self.drrMsg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.weekend_start = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.weekend_end = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.LIST:
          self.day_marketing_promotions = []
          (_etype729, _size726) = iprot.readListBegin()
          for _i730 in xrange(_size726):
            _elem731 = DayMarketingPromotion()
            _elem731.read(iprot)
            self.day_marketing_promotions.append(_elem731)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.price_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.BOOL:
          self.is_min_price_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.DOUBLE:
          self.cvr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I64:
          self.supplier_confirm_avg_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.rateplan_structure_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 134:
        if ftype == TType.BOOL:
          self.is_majia = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 135:
        if ftype == TType.STRING:
          self.majia_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 136:
        if ftype == TType.BOOL:
          self.is_resale_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 137:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 138:
        if ftype == TType.I32:
          self.sign_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 139:
        if ftype == TType.DOUBLE:
          self.cost_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 140:
        if ftype == TType.DOUBLE:
          self.hotel_service_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 141:
        if ftype == TType.DOUBLE:
          self.total_point = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 142:
        if ftype == TType.DOUBLE:
          self.commission_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 143:
        if ftype == TType.I32:
          self.derivative_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 144:
        if ftype == TType.BOOL:
          self.is_exclusive_rp = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 145:
        if ftype == TType.BOOL:
          self.is_hotel_ticket_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 146:
        if ftype == TType.STRUCT:
          self.hotel_ticket_product = HotelTicketProduct()
          self.hotel_ticket_product.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 147:
        if ftype == TType.BYTE:
          self.force_show = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 148:
        if ftype == TType.BOOL:
          self.is_support_flash_live = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 149:
        if ftype == TType.BOOL:
          self.is_support_credit_live = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 150:
        if ftype == TType.BOOL:
          self.is_dc_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 151:
        if ftype == TType.DOUBLE:
          self.extras = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Product')
    if self.sroomtype_id is not None:
      oprot.writeFieldBegin('sroomtype_id', TType.I64, 1)
      oprot.writeI64(self.sroomtype_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I64, 2)
      oprot.writeI64(self.shotel_id)
      oprot.writeFieldEnd()
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I64, 3)
      oprot.writeI64(self.supplier_id)
      oprot.writeFieldEnd()
    if self.online_search_type is not None:
      oprot.writeFieldBegin('online_search_type', TType.I32, 4)
      oprot.writeI32(self.online_search_type)
      oprot.writeFieldEnd()
    if self.sroomtype_status is not None:
      oprot.writeFieldBegin('sroomtype_status', TType.BOOL, 5)
      oprot.writeBool(self.sroomtype_status)
      oprot.writeFieldEnd()
    if self.has_breakfast is not None:
      oprot.writeFieldBegin('has_breakfast', TType.BOOL, 6)
      oprot.writeBool(self.has_breakfast)
      oprot.writeFieldEnd()
    if self.rateplan is not None:
      oprot.writeFieldBegin('rateplan', TType.STRUCT, 7)
      self.rateplan.write(oprot)
      oprot.writeFieldEnd()
    if self.rp_code is not None:
      oprot.writeFieldBegin('rp_code', TType.STRING, 8)
      oprot.writeString(self.rp_code)
      oprot.writeFieldEnd()
    if self.room_inventory_days is not None:
      oprot.writeFieldBegin('room_inventory_days', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.room_inventory_days))
      for iter732 in self.room_inventory_days:
        iter732.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.room_num_status is not None:
      oprot.writeFieldBegin('room_num_status', TType.I32, 10)
      oprot.writeI32(self.room_num_status)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 11)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.marketing_promotions is not None:
      oprot.writeFieldBegin('marketing_promotions', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.marketing_promotions))
      for iter733 in self.marketing_promotions:
        iter733.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gifts is not None:
      oprot.writeFieldBegin('gifts', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.gifts))
      for iter734 in self.gifts:
        iter734.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relations is not None:
      oprot.writeFieldBegin('relations', TType.STRUCT, 14)
      self.relations.write(oprot)
      oprot.writeFieldEnd()
    if self.supplier_type is not None:
      oprot.writeFieldBegin('supplier_type', TType.I64, 15)
      oprot.writeI64(self.supplier_type)
      oprot.writeFieldEnd()
    if self.shotel_booking_rules is not None:
      oprot.writeFieldBegin('shotel_booking_rules', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_booking_rules))
      for iter735 in self.shotel_booking_rules:
        iter735.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_freesale is not None:
      oprot.writeFieldBegin('is_freesale', TType.BOOL, 17)
      oprot.writeBool(self.is_freesale)
      oprot.writeFieldEnd()
    if self.firstnight_has_discount is not None:
      oprot.writeFieldBegin('firstnight_has_discount', TType.BOOL, 18)
      oprot.writeBool(self.firstnight_has_discount)
      oprot.writeFieldEnd()
    if self.firstnight_discount is not None:
      oprot.writeFieldBegin('firstnight_discount', TType.DOUBLE, 19)
      oprot.writeDouble(self.firstnight_discount)
      oprot.writeFieldEnd()
    if self.firstnight_discount_upper is not None:
      oprot.writeFieldBegin('firstnight_discount_upper', TType.I32, 20)
      oprot.writeI32(self.firstnight_discount_upper)
      oprot.writeFieldEnd()
    if self.freesale_num is not None:
      oprot.writeFieldBegin('freesale_num', TType.I32, 21)
      oprot.writeI32(self.freesale_num)
      oprot.writeFieldEnd()
    if self.cooperation_type is not None:
      oprot.writeFieldBegin('cooperation_type', TType.I32, 22)
      oprot.writeI32(self.cooperation_type)
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 23)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.supplier_short_name is not None:
      oprot.writeFieldBegin('supplier_short_name', TType.STRING, 24)
      oprot.writeString(self.supplier_short_name)
      oprot.writeFieldEnd()
    if self.supplier_alias is not None:
      oprot.writeFieldBegin('supplier_alias', TType.STRING, 25)
      oprot.writeString(self.supplier_alias)
      oprot.writeFieldEnd()
    if self.supplier_telphone is not None:
      oprot.writeFieldBegin('supplier_telphone', TType.STRING, 26)
      oprot.writeString(self.supplier_telphone)
      oprot.writeFieldEnd()
    if self.confirm_way is not None:
      oprot.writeFieldBegin('confirm_way', TType.I64, 27)
      oprot.writeI64(self.confirm_way)
      oprot.writeFieldEnd()
    if self.shotel_contacter is not None:
      oprot.writeFieldBegin('shotel_contacter', TType.STRING, 28)
      oprot.writeString(self.shotel_contacter)
      oprot.writeFieldEnd()
    if self.hours_room_info is not None:
      oprot.writeFieldBegin('hours_room_info', TType.STRUCT, 29)
      self.hours_room_info.write(oprot)
      oprot.writeFieldEnd()
    if self.supplier_fax is not None:
      oprot.writeFieldBegin('supplier_fax', TType.STRING, 30)
      oprot.writeString(self.supplier_fax)
      oprot.writeFieldEnd()
    if self.drrMsg is not None:
      oprot.writeFieldBegin('drrMsg', TType.STRUCT, 32)
      self.drrMsg.write(oprot)
      oprot.writeFieldEnd()
    if self.weekend_start is not None:
      oprot.writeFieldBegin('weekend_start', TType.I32, 33)
      oprot.writeI32(self.weekend_start)
      oprot.writeFieldEnd()
    if self.weekend_end is not None:
      oprot.writeFieldBegin('weekend_end', TType.I32, 34)
      oprot.writeI32(self.weekend_end)
      oprot.writeFieldEnd()
    if self.day_marketing_promotions is not None:
      oprot.writeFieldBegin('day_marketing_promotions', TType.LIST, 35)
      oprot.writeListBegin(TType.STRUCT, len(self.day_marketing_promotions))
      for iter736 in self.day_marketing_promotions:
        iter736.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price_origin is not None:
      oprot.writeFieldBegin('price_origin', TType.I32, 36)
      oprot.writeI32(self.price_origin)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.I32, 37)
      oprot.writeI32(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.is_min_price_product is not None:
      oprot.writeFieldBegin('is_min_price_product', TType.BOOL, 38)
      oprot.writeBool(self.is_min_price_product)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 39)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 40)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.cvr is not None:
      oprot.writeFieldBegin('cvr', TType.DOUBLE, 41)
      oprot.writeDouble(self.cvr)
      oprot.writeFieldEnd()
    if self.supplier_confirm_avg_time is not None:
      oprot.writeFieldBegin('supplier_confirm_avg_time', TType.I64, 42)
      oprot.writeI64(self.supplier_confirm_avg_time)
      oprot.writeFieldEnd()
    if self.rateplan_structure_name_cn is not None:
      oprot.writeFieldBegin('rateplan_structure_name_cn', TType.STRING, 43)
      oprot.writeString(self.rateplan_structure_name_cn)
      oprot.writeFieldEnd()
    if self.is_majia is not None:
      oprot.writeFieldBegin('is_majia', TType.BOOL, 134)
      oprot.writeBool(self.is_majia)
      oprot.writeFieldEnd()
    if self.majia_id is not None:
      oprot.writeFieldBegin('majia_id', TType.STRING, 135)
      oprot.writeString(self.majia_id)
      oprot.writeFieldEnd()
    if self.is_resale_product is not None:
      oprot.writeFieldBegin('is_resale_product', TType.BOOL, 136)
      oprot.writeBool(self.is_resale_product)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 137)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.sign_type is not None:
      oprot.writeFieldBegin('sign_type', TType.I32, 138)
      oprot.writeI32(self.sign_type)
      oprot.writeFieldEnd()
    if self.cost_point is not None:
      oprot.writeFieldBegin('cost_point', TType.DOUBLE, 139)
      oprot.writeDouble(self.cost_point)
      oprot.writeFieldEnd()
    if self.hotel_service_point is not None:
      oprot.writeFieldBegin('hotel_service_point', TType.DOUBLE, 140)
      oprot.writeDouble(self.hotel_service_point)
      oprot.writeFieldEnd()
    if self.total_point is not None:
      oprot.writeFieldBegin('total_point', TType.DOUBLE, 141)
      oprot.writeDouble(self.total_point)
      oprot.writeFieldEnd()
    if self.commission_value is not None:
      oprot.writeFieldBegin('commission_value', TType.DOUBLE, 142)
      oprot.writeDouble(self.commission_value)
      oprot.writeFieldEnd()
    if self.derivative_type is not None:
      oprot.writeFieldBegin('derivative_type', TType.I32, 143)
      oprot.writeI32(self.derivative_type)
      oprot.writeFieldEnd()
    if self.is_exclusive_rp is not None:
      oprot.writeFieldBegin('is_exclusive_rp', TType.BOOL, 144)
      oprot.writeBool(self.is_exclusive_rp)
      oprot.writeFieldEnd()
    if self.is_hotel_ticket_product is not None:
      oprot.writeFieldBegin('is_hotel_ticket_product', TType.BOOL, 145)
      oprot.writeBool(self.is_hotel_ticket_product)
      oprot.writeFieldEnd()
    if self.hotel_ticket_product is not None:
      oprot.writeFieldBegin('hotel_ticket_product', TType.STRUCT, 146)
      self.hotel_ticket_product.write(oprot)
      oprot.writeFieldEnd()
    if self.force_show is not None:
      oprot.writeFieldBegin('force_show', TType.BYTE, 147)
      oprot.writeByte(self.force_show)
      oprot.writeFieldEnd()
    if self.is_support_flash_live is not None:
      oprot.writeFieldBegin('is_support_flash_live', TType.BOOL, 148)
      oprot.writeBool(self.is_support_flash_live)
      oprot.writeFieldEnd()
    if self.is_support_credit_live is not None:
      oprot.writeFieldBegin('is_support_credit_live', TType.BOOL, 149)
      oprot.writeBool(self.is_support_credit_live)
      oprot.writeFieldEnd()
    if self.is_dc_product is not None:
      oprot.writeFieldBegin('is_dc_product', TType.BOOL, 150)
      oprot.writeBool(self.is_dc_product)
      oprot.writeFieldEnd()
    if self.extras is not None:
      oprot.writeFieldBegin('extras', TType.DOUBLE, 151)
      oprot.writeDouble(self.extras)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sroomtype_id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.online_search_type)
    value = (value * 31) ^ hash(self.sroomtype_status)
    value = (value * 31) ^ hash(self.has_breakfast)
    value = (value * 31) ^ hash(self.rateplan)
    value = (value * 31) ^ hash(self.rp_code)
    value = (value * 31) ^ hash(self.room_inventory_days)
    value = (value * 31) ^ hash(self.room_num_status)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.marketing_promotions)
    value = (value * 31) ^ hash(self.gifts)
    value = (value * 31) ^ hash(self.relations)
    value = (value * 31) ^ hash(self.supplier_type)
    value = (value * 31) ^ hash(self.shotel_booking_rules)
    value = (value * 31) ^ hash(self.is_freesale)
    value = (value * 31) ^ hash(self.firstnight_has_discount)
    value = (value * 31) ^ hash(self.firstnight_discount)
    value = (value * 31) ^ hash(self.firstnight_discount_upper)
    value = (value * 31) ^ hash(self.freesale_num)
    value = (value * 31) ^ hash(self.cooperation_type)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.supplier_short_name)
    value = (value * 31) ^ hash(self.supplier_alias)
    value = (value * 31) ^ hash(self.supplier_telphone)
    value = (value * 31) ^ hash(self.confirm_way)
    value = (value * 31) ^ hash(self.shotel_contacter)
    value = (value * 31) ^ hash(self.hours_room_info)
    value = (value * 31) ^ hash(self.supplier_fax)
    value = (value * 31) ^ hash(self.drrMsg)
    value = (value * 31) ^ hash(self.weekend_start)
    value = (value * 31) ^ hash(self.weekend_end)
    value = (value * 31) ^ hash(self.day_marketing_promotions)
    value = (value * 31) ^ hash(self.price_origin)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.is_min_price_product)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.cvr)
    value = (value * 31) ^ hash(self.supplier_confirm_avg_time)
    value = (value * 31) ^ hash(self.rateplan_structure_name_cn)
    value = (value * 31) ^ hash(self.is_majia)
    value = (value * 31) ^ hash(self.majia_id)
    value = (value * 31) ^ hash(self.is_resale_product)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.sign_type)
    value = (value * 31) ^ hash(self.cost_point)
    value = (value * 31) ^ hash(self.hotel_service_point)
    value = (value * 31) ^ hash(self.total_point)
    value = (value * 31) ^ hash(self.commission_value)
    value = (value * 31) ^ hash(self.derivative_type)
    value = (value * 31) ^ hash(self.is_exclusive_rp)
    value = (value * 31) ^ hash(self.is_hotel_ticket_product)
    value = (value * 31) ^ hash(self.hotel_ticket_product)
    value = (value * 31) ^ hash(self.force_show)
    value = (value * 31) ^ hash(self.is_support_flash_live)
    value = (value * 31) ^ hash(self.is_support_credit_live)
    value = (value * 31) ^ hash(self.is_dc_product)
    value = (value * 31) ^ hash(self.extras)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MRoomTypes:
  """
  Attributes:
   - mroomtype_id
   - mroom_name
   - products
   - bed_type
   - priority
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mroomtype_id', None, None, ), # 1
    (2, TType.STRING, 'mroom_name', None, None, ), # 2
    (3, TType.LIST, 'products', (TType.STRUCT,(Product, Product.thrift_spec)), None, ), # 3
    (4, TType.I32, 'bed_type', None, None, ), # 4
    (5, TType.I32, 'priority', None, None, ), # 5
  )

  def __init__(self, mroomtype_id=None, mroom_name=None, products=None, bed_type=None, priority=None,):
    self.mroomtype_id = mroomtype_id
    self.mroom_name = mroom_name
    self.products = products
    self.bed_type = bed_type
    self.priority = priority

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mroomtype_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mroom_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.products = []
          (_etype740, _size737) = iprot.readListBegin()
          for _i741 in xrange(_size737):
            _elem742 = Product()
            _elem742.read(iprot)
            self.products.append(_elem742)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bed_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.priority = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MRoomTypes')
    if self.mroomtype_id is not None:
      oprot.writeFieldBegin('mroomtype_id', TType.I64, 1)
      oprot.writeI64(self.mroomtype_id)
      oprot.writeFieldEnd()
    if self.mroom_name is not None:
      oprot.writeFieldBegin('mroom_name', TType.STRING, 2)
      oprot.writeString(self.mroom_name)
      oprot.writeFieldEnd()
    if self.products is not None:
      oprot.writeFieldBegin('products', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.products))
      for iter743 in self.products:
        iter743.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bed_type is not None:
      oprot.writeFieldBegin('bed_type', TType.I32, 4)
      oprot.writeI32(self.bed_type)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 5)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mroomtype_id)
    value = (value * 31) ^ hash(self.mroom_name)
    value = (value * 31) ^ hash(self.products)
    value = (value * 31) ^ hash(self.bed_type)
    value = (value * 31) ^ hash(self.priority)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelAirportPickUpService:
  """
  Attributes:
   - hotel_id
   - service_providing_department_contact
   - service_providing_department
   - service_providing_department_en
   - free_pick_up_service_notes
   - free_pick_up_service_notes_en
   - driver
   - driver_en
   - airport_name
   - airport_name_en
   - vehicle_type
   - vehicle_type_en
   - end_time
   - start_time
   - end_date
   - start_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hotel_id', None, None, ), # 1
    (2, TType.STRING, 'service_providing_department_contact', None, None, ), # 2
    (3, TType.STRING, 'service_providing_department', None, None, ), # 3
    (4, TType.STRING, 'service_providing_department_en', None, None, ), # 4
    (5, TType.STRING, 'free_pick_up_service_notes', None, None, ), # 5
    (6, TType.STRING, 'free_pick_up_service_notes_en', None, None, ), # 6
    (7, TType.STRING, 'driver', None, None, ), # 7
    (8, TType.STRING, 'driver_en', None, None, ), # 8
    (9, TType.STRING, 'airport_name', None, None, ), # 9
    (10, TType.STRING, 'airport_name_en', None, None, ), # 10
    (11, TType.STRING, 'vehicle_type', None, None, ), # 11
    (12, TType.STRING, 'vehicle_type_en', None, None, ), # 12
    (13, TType.STRING, 'end_time', None, None, ), # 13
    (14, TType.STRING, 'start_time', None, None, ), # 14
    (15, TType.STRING, 'end_date', None, None, ), # 15
    (16, TType.STRING, 'start_date', None, None, ), # 16
  )

  def __init__(self, hotel_id=None, service_providing_department_contact=None, service_providing_department=None, service_providing_department_en=None, free_pick_up_service_notes=None, free_pick_up_service_notes_en=None, driver=None, driver_en=None, airport_name=None, airport_name_en=None, vehicle_type=None, vehicle_type_en=None, end_time=None, start_time=None, end_date=None, start_date=None,):
    self.hotel_id = hotel_id
    self.service_providing_department_contact = service_providing_department_contact
    self.service_providing_department = service_providing_department
    self.service_providing_department_en = service_providing_department_en
    self.free_pick_up_service_notes = free_pick_up_service_notes
    self.free_pick_up_service_notes_en = free_pick_up_service_notes_en
    self.driver = driver
    self.driver_en = driver_en
    self.airport_name = airport_name
    self.airport_name_en = airport_name_en
    self.vehicle_type = vehicle_type
    self.vehicle_type_en = vehicle_type_en
    self.end_time = end_time
    self.start_time = start_time
    self.end_date = end_date
    self.start_date = start_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hotel_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.service_providing_department_contact = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.service_providing_department = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.service_providing_department_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.free_pick_up_service_notes = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.free_pick_up_service_notes_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.driver = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.driver_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.airport_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.airport_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.vehicle_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.vehicle_type_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelAirportPickUpService')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.STRING, 1)
      oprot.writeString(self.hotel_id)
      oprot.writeFieldEnd()
    if self.service_providing_department_contact is not None:
      oprot.writeFieldBegin('service_providing_department_contact', TType.STRING, 2)
      oprot.writeString(self.service_providing_department_contact)
      oprot.writeFieldEnd()
    if self.service_providing_department is not None:
      oprot.writeFieldBegin('service_providing_department', TType.STRING, 3)
      oprot.writeString(self.service_providing_department)
      oprot.writeFieldEnd()
    if self.service_providing_department_en is not None:
      oprot.writeFieldBegin('service_providing_department_en', TType.STRING, 4)
      oprot.writeString(self.service_providing_department_en)
      oprot.writeFieldEnd()
    if self.free_pick_up_service_notes is not None:
      oprot.writeFieldBegin('free_pick_up_service_notes', TType.STRING, 5)
      oprot.writeString(self.free_pick_up_service_notes)
      oprot.writeFieldEnd()
    if self.free_pick_up_service_notes_en is not None:
      oprot.writeFieldBegin('free_pick_up_service_notes_en', TType.STRING, 6)
      oprot.writeString(self.free_pick_up_service_notes_en)
      oprot.writeFieldEnd()
    if self.driver is not None:
      oprot.writeFieldBegin('driver', TType.STRING, 7)
      oprot.writeString(self.driver)
      oprot.writeFieldEnd()
    if self.driver_en is not None:
      oprot.writeFieldBegin('driver_en', TType.STRING, 8)
      oprot.writeString(self.driver_en)
      oprot.writeFieldEnd()
    if self.airport_name is not None:
      oprot.writeFieldBegin('airport_name', TType.STRING, 9)
      oprot.writeString(self.airport_name)
      oprot.writeFieldEnd()
    if self.airport_name_en is not None:
      oprot.writeFieldBegin('airport_name_en', TType.STRING, 10)
      oprot.writeString(self.airport_name_en)
      oprot.writeFieldEnd()
    if self.vehicle_type is not None:
      oprot.writeFieldBegin('vehicle_type', TType.STRING, 11)
      oprot.writeString(self.vehicle_type)
      oprot.writeFieldEnd()
    if self.vehicle_type_en is not None:
      oprot.writeFieldBegin('vehicle_type_en', TType.STRING, 12)
      oprot.writeString(self.vehicle_type_en)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 13)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 14)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 15)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 16)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.service_providing_department_contact)
    value = (value * 31) ^ hash(self.service_providing_department)
    value = (value * 31) ^ hash(self.service_providing_department_en)
    value = (value * 31) ^ hash(self.free_pick_up_service_notes)
    value = (value * 31) ^ hash(self.free_pick_up_service_notes_en)
    value = (value * 31) ^ hash(self.driver)
    value = (value * 31) ^ hash(self.driver_en)
    value = (value * 31) ^ hash(self.airport_name)
    value = (value * 31) ^ hash(self.airport_name_en)
    value = (value * 31) ^ hash(self.vehicle_type)
    value = (value * 31) ^ hash(self.vehicle_type_en)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.start_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelAmenity:
  """
  Attributes:
   - amenity_name
   - amenity_name_en
   - amenity_detail
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'amenity_name', None, None, ), # 1
    (2, TType.STRING, 'amenity_name_en', None, None, ), # 2
    (3, TType.STRING, 'amenity_detail', None, None, ), # 3
  )

  def __init__(self, amenity_name=None, amenity_name_en=None, amenity_detail=None,):
    self.amenity_name = amenity_name
    self.amenity_name_en = amenity_name_en
    self.amenity_detail = amenity_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.amenity_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.amenity_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.amenity_detail = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelAmenity')
    if self.amenity_name is not None:
      oprot.writeFieldBegin('amenity_name', TType.STRING, 1)
      oprot.writeString(self.amenity_name)
      oprot.writeFieldEnd()
    if self.amenity_name_en is not None:
      oprot.writeFieldBegin('amenity_name_en', TType.STRING, 2)
      oprot.writeString(self.amenity_name_en)
      oprot.writeFieldEnd()
    if self.amenity_detail is not None:
      oprot.writeFieldBegin('amenity_detail', TType.STRING, 3)
      oprot.writeString(self.amenity_detail)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.amenity_name)
    value = (value * 31) ^ hash(self.amenity_name_en)
    value = (value * 31) ^ hash(self.amenity_detail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelAroundInformaiton:
  """
  Attributes:
   - name
   - name_en
   - distances
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'name_en', None, None, ), # 2
    (3, TType.STRING, 'distances', None, None, ), # 3
    (4, TType.STRING, 'description', None, None, ), # 4
  )

  def __init__(self, name=None, name_en=None, distances=None, description=None,):
    self.name = name
    self.name_en = name_en
    self.distances = distances
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.distances = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelAroundInformaiton')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 2)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.distances is not None:
      oprot.writeFieldBegin('distances', TType.STRING, 3)
      oprot.writeString(self.distances)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 4)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.distances)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelConferenceAmenities:
  """
  Attributes:
   - overview
   - overview_en
   - amenity_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.LIST, 'amenity_list', (TType.STRUCT,(HotelAmenity, HotelAmenity.thrift_spec)), None, ), # 3
  )

  def __init__(self, overview=None, overview_en=None, amenity_list=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.amenity_list = amenity_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.amenity_list = []
          (_etype747, _size744) = iprot.readListBegin()
          for _i748 in xrange(_size744):
            _elem749 = HotelAmenity()
            _elem749.read(iprot)
            self.amenity_list.append(_elem749)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelConferenceAmenities')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.amenity_list is not None:
      oprot.writeFieldBegin('amenity_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.amenity_list))
      for iter750 in self.amenity_list:
        iter750.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.amenity_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelCreditCategory:
  """
  Attributes:
   - cedit_category_name
   - credit_category_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cedit_category_name', None, None, ), # 1
    (2, TType.STRING, 'credit_category_value', None, None, ), # 2
  )

  def __init__(self, cedit_category_name=None, credit_category_value=None,):
    self.cedit_category_name = cedit_category_name
    self.credit_category_value = credit_category_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cedit_category_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.credit_category_value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelCreditCategory')
    if self.cedit_category_name is not None:
      oprot.writeFieldBegin('cedit_category_name', TType.STRING, 1)
      oprot.writeString(self.cedit_category_name)
      oprot.writeFieldEnd()
    if self.credit_category_value is not None:
      oprot.writeFieldBegin('credit_category_value', TType.STRING, 2)
      oprot.writeString(self.credit_category_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cedit_category_name)
    value = (value * 31) ^ hash(self.credit_category_value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelDiningAmenities:
  """
  Attributes:
   - overview
   - overview_en
   - amenity_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.LIST, 'amenity_list', (TType.STRUCT,(HotelAmenity, HotelAmenity.thrift_spec)), None, ), # 3
  )

  def __init__(self, overview=None, overview_en=None, amenity_list=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.amenity_list = amenity_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.amenity_list = []
          (_etype754, _size751) = iprot.readListBegin()
          for _i755 in xrange(_size751):
            _elem756 = HotelAmenity()
            _elem756.read(iprot)
            self.amenity_list.append(_elem756)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelDiningAmenities')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.amenity_list is not None:
      oprot.writeFieldBegin('amenity_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.amenity_list))
      for iter757 in self.amenity_list:
        iter757.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.amenity_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFacilities:
  """
  Attributes:
   - mhotel_id
   - shotel_id
   - facility_id
   - old_facility_id
   - facility_name_cn
   - facility_name_en
   - facility_type_id
   - facility_type_name
   - notes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.I32, 'shotel_id', None, None, ), # 2
    (3, TType.I32, 'facility_id', None, None, ), # 3
    (4, TType.I32, 'old_facility_id', None, None, ), # 4
    (5, TType.STRING, 'facility_name_cn', None, None, ), # 5
    (6, TType.STRING, 'facility_name_en', None, None, ), # 6
    (7, TType.I32, 'facility_type_id', None, None, ), # 7
    (8, TType.STRING, 'facility_type_name', None, None, ), # 8
    (9, TType.STRING, 'notes', None, None, ), # 9
  )

  def __init__(self, mhotel_id=None, shotel_id=None, facility_id=None, old_facility_id=None, facility_name_cn=None, facility_name_en=None, facility_type_id=None, facility_type_name=None, notes=None,):
    self.mhotel_id = mhotel_id
    self.shotel_id = shotel_id
    self.facility_id = facility_id
    self.old_facility_id = old_facility_id
    self.facility_name_cn = facility_name_cn
    self.facility_name_en = facility_name_en
    self.facility_type_id = facility_type_id
    self.facility_type_name = facility_type_name
    self.notes = notes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.facility_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.old_facility_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.facility_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.facility_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.facility_type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.facility_type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.notes = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFacilities')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 2)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    if self.facility_id is not None:
      oprot.writeFieldBegin('facility_id', TType.I32, 3)
      oprot.writeI32(self.facility_id)
      oprot.writeFieldEnd()
    if self.old_facility_id is not None:
      oprot.writeFieldBegin('old_facility_id', TType.I32, 4)
      oprot.writeI32(self.old_facility_id)
      oprot.writeFieldEnd()
    if self.facility_name_cn is not None:
      oprot.writeFieldBegin('facility_name_cn', TType.STRING, 5)
      oprot.writeString(self.facility_name_cn)
      oprot.writeFieldEnd()
    if self.facility_name_en is not None:
      oprot.writeFieldBegin('facility_name_en', TType.STRING, 6)
      oprot.writeString(self.facility_name_en)
      oprot.writeFieldEnd()
    if self.facility_type_id is not None:
      oprot.writeFieldBegin('facility_type_id', TType.I32, 7)
      oprot.writeI32(self.facility_type_id)
      oprot.writeFieldEnd()
    if self.facility_type_name is not None:
      oprot.writeFieldBegin('facility_type_name', TType.STRING, 8)
      oprot.writeString(self.facility_type_name)
      oprot.writeFieldEnd()
    if self.notes is not None:
      oprot.writeFieldBegin('notes', TType.STRING, 9)
      oprot.writeString(self.notes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.facility_id)
    value = (value * 31) ^ hash(self.old_facility_id)
    value = (value * 31) ^ hash(self.facility_name_cn)
    value = (value * 31) ^ hash(self.facility_name_en)
    value = (value * 31) ^ hash(self.facility_type_id)
    value = (value * 31) ^ hash(self.facility_type_name)
    value = (value * 31) ^ hash(self.notes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelfeatureInfo:
  """
  Attributes:
   - hotel_id
   - driving_guide
   - driving_guide_en
   - property_other_hightlights
   - property_amenities_hightlights
   - location_highlights
   - overview
   - property_other_hightlights_en
   - property_amenities_hightlights_en
   - location_highlights_en
   - overview_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hotel_id', None, None, ), # 1
    (2, TType.STRING, 'driving_guide', None, None, ), # 2
    (3, TType.STRING, 'driving_guide_en', None, None, ), # 3
    (4, TType.STRING, 'property_other_hightlights', None, None, ), # 4
    (5, TType.STRING, 'property_amenities_hightlights', None, None, ), # 5
    (6, TType.STRING, 'location_highlights', None, None, ), # 6
    (7, TType.STRING, 'overview', None, None, ), # 7
    (8, TType.STRING, 'property_other_hightlights_en', None, None, ), # 8
    (9, TType.STRING, 'property_amenities_hightlights_en', None, None, ), # 9
    (10, TType.STRING, 'location_highlights_en', None, None, ), # 10
    (11, TType.STRING, 'overview_en', None, None, ), # 11
  )

  def __init__(self, hotel_id=None, driving_guide=None, driving_guide_en=None, property_other_hightlights=None, property_amenities_hightlights=None, location_highlights=None, overview=None, property_other_hightlights_en=None, property_amenities_hightlights_en=None, location_highlights_en=None, overview_en=None,):
    self.hotel_id = hotel_id
    self.driving_guide = driving_guide
    self.driving_guide_en = driving_guide_en
    self.property_other_hightlights = property_other_hightlights
    self.property_amenities_hightlights = property_amenities_hightlights
    self.location_highlights = location_highlights
    self.overview = overview
    self.property_other_hightlights_en = property_other_hightlights_en
    self.property_amenities_hightlights_en = property_amenities_hightlights_en
    self.location_highlights_en = location_highlights_en
    self.overview_en = overview_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hotel_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.driving_guide = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.driving_guide_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.property_other_hightlights = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.property_amenities_hightlights = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.location_highlights = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.property_other_hightlights_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.property_amenities_hightlights_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.location_highlights_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelfeatureInfo')
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.STRING, 1)
      oprot.writeString(self.hotel_id)
      oprot.writeFieldEnd()
    if self.driving_guide is not None:
      oprot.writeFieldBegin('driving_guide', TType.STRING, 2)
      oprot.writeString(self.driving_guide)
      oprot.writeFieldEnd()
    if self.driving_guide_en is not None:
      oprot.writeFieldBegin('driving_guide_en', TType.STRING, 3)
      oprot.writeString(self.driving_guide_en)
      oprot.writeFieldEnd()
    if self.property_other_hightlights is not None:
      oprot.writeFieldBegin('property_other_hightlights', TType.STRING, 4)
      oprot.writeString(self.property_other_hightlights)
      oprot.writeFieldEnd()
    if self.property_amenities_hightlights is not None:
      oprot.writeFieldBegin('property_amenities_hightlights', TType.STRING, 5)
      oprot.writeString(self.property_amenities_hightlights)
      oprot.writeFieldEnd()
    if self.location_highlights is not None:
      oprot.writeFieldBegin('location_highlights', TType.STRING, 6)
      oprot.writeString(self.location_highlights)
      oprot.writeFieldEnd()
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 7)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.property_other_hightlights_en is not None:
      oprot.writeFieldBegin('property_other_hightlights_en', TType.STRING, 8)
      oprot.writeString(self.property_other_hightlights_en)
      oprot.writeFieldEnd()
    if self.property_amenities_hightlights_en is not None:
      oprot.writeFieldBegin('property_amenities_hightlights_en', TType.STRING, 9)
      oprot.writeString(self.property_amenities_hightlights_en)
      oprot.writeFieldEnd()
    if self.location_highlights_en is not None:
      oprot.writeFieldBegin('location_highlights_en', TType.STRING, 10)
      oprot.writeString(self.location_highlights_en)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 11)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.driving_guide)
    value = (value * 31) ^ hash(self.driving_guide_en)
    value = (value * 31) ^ hash(self.property_other_hightlights)
    value = (value * 31) ^ hash(self.property_amenities_hightlights)
    value = (value * 31) ^ hash(self.location_highlights)
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.property_other_hightlights_en)
    value = (value * 31) ^ hash(self.property_amenities_hightlights_en)
    value = (value * 31) ^ hash(self.location_highlights_en)
    value = (value * 31) ^ hash(self.overview_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelGeneralAmenities:
  """
  Attributes:
   - overview
   - overview_en
   - amenity_simple_list
   - amenity_simple_list_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.LIST, 'amenity_simple_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'amenity_simple_list_en', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, overview=None, overview_en=None, amenity_simple_list=None, amenity_simple_list_en=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.amenity_simple_list = amenity_simple_list
    self.amenity_simple_list_en = amenity_simple_list_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.amenity_simple_list = []
          (_etype761, _size758) = iprot.readListBegin()
          for _i762 in xrange(_size758):
            _elem763 = iprot.readString()
            self.amenity_simple_list.append(_elem763)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.amenity_simple_list_en = []
          (_etype767, _size764) = iprot.readListBegin()
          for _i768 in xrange(_size764):
            _elem769 = iprot.readString()
            self.amenity_simple_list_en.append(_elem769)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelGeneralAmenities')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.amenity_simple_list is not None:
      oprot.writeFieldBegin('amenity_simple_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list))
      for iter770 in self.amenity_simple_list:
        oprot.writeString(iter770)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.amenity_simple_list_en is not None:
      oprot.writeFieldBegin('amenity_simple_list_en', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list_en))
      for iter771 in self.amenity_simple_list_en:
        oprot.writeString(iter771)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.amenity_simple_list)
    value = (value * 31) ^ hash(self.amenity_simple_list_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelLandMark:
  """
  Attributes:
   - land_mark_name
   - land_mark_name_en
   - hotel_id
   - land_mark_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'land_mark_name', None, None, ), # 1
    (2, TType.STRING, 'land_mark_name_en', None, None, ), # 2
    (3, TType.STRING, 'hotel_id', None, None, ), # 3
    (4, TType.STRING, 'land_mark_id', None, None, ), # 4
  )

  def __init__(self, land_mark_name=None, land_mark_name_en=None, hotel_id=None, land_mark_id=None,):
    self.land_mark_name = land_mark_name
    self.land_mark_name_en = land_mark_name_en
    self.hotel_id = hotel_id
    self.land_mark_id = land_mark_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.land_mark_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.land_mark_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.land_mark_id = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelLandMark')
    if self.land_mark_name is not None:
      oprot.writeFieldBegin('land_mark_name', TType.STRING, 1)
      oprot.writeString(self.land_mark_name)
      oprot.writeFieldEnd()
    if self.land_mark_name_en is not None:
      oprot.writeFieldBegin('land_mark_name_en', TType.STRING, 2)
      oprot.writeString(self.land_mark_name_en)
      oprot.writeFieldEnd()
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.STRING, 3)
      oprot.writeString(self.hotel_id)
      oprot.writeFieldEnd()
    if self.land_mark_id is not None:
      oprot.writeFieldBegin('land_mark_id', TType.STRING, 4)
      oprot.writeString(self.land_mark_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.land_mark_name)
    value = (value * 31) ^ hash(self.land_mark_name_en)
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.land_mark_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelRecreationAmenities:
  """
  Attributes:
   - overview
   - overview_en
   - amenity_simple_list
   - amenity_simple_list_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.LIST, 'amenity_simple_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'amenity_simple_list_en', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, overview=None, overview_en=None, amenity_simple_list=None, amenity_simple_list_en=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.amenity_simple_list = amenity_simple_list
    self.amenity_simple_list_en = amenity_simple_list_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.amenity_simple_list = []
          (_etype775, _size772) = iprot.readListBegin()
          for _i776 in xrange(_size772):
            _elem777 = iprot.readString()
            self.amenity_simple_list.append(_elem777)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.amenity_simple_list_en = []
          (_etype781, _size778) = iprot.readListBegin()
          for _i782 in xrange(_size778):
            _elem783 = iprot.readString()
            self.amenity_simple_list_en.append(_elem783)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelRecreationAmenities')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.amenity_simple_list is not None:
      oprot.writeFieldBegin('amenity_simple_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list))
      for iter784 in self.amenity_simple_list:
        oprot.writeString(iter784)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.amenity_simple_list_en is not None:
      oprot.writeFieldBegin('amenity_simple_list_en', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list_en))
      for iter785 in self.amenity_simple_list_en:
        oprot.writeString(iter785)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.amenity_simple_list)
    value = (value * 31) ^ hash(self.amenity_simple_list_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelRoomAmenities:
  """
  Attributes:
   - overview
   - overview_en
   - amenity_simple_list
   - amenity_simple_list_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.LIST, 'amenity_simple_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'amenity_simple_list_en', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, overview=None, overview_en=None, amenity_simple_list=None, amenity_simple_list_en=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.amenity_simple_list = amenity_simple_list
    self.amenity_simple_list_en = amenity_simple_list_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.amenity_simple_list = []
          (_etype789, _size786) = iprot.readListBegin()
          for _i790 in xrange(_size786):
            _elem791 = iprot.readString()
            self.amenity_simple_list.append(_elem791)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.amenity_simple_list_en = []
          (_etype795, _size792) = iprot.readListBegin()
          for _i796 in xrange(_size792):
            _elem797 = iprot.readString()
            self.amenity_simple_list_en.append(_elem797)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelRoomAmenities')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.amenity_simple_list is not None:
      oprot.writeFieldBegin('amenity_simple_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list))
      for iter798 in self.amenity_simple_list:
        oprot.writeString(iter798)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.amenity_simple_list_en is not None:
      oprot.writeFieldBegin('amenity_simple_list_en', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.amenity_simple_list_en))
      for iter799 in self.amenity_simple_list_en:
        oprot.writeString(iter799)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.amenity_simple_list)
    value = (value * 31) ^ hash(self.amenity_simple_list_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelSurroundingAttractions:
  """
  Attributes:
   - name
   - name_en
   - distances
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'name_en', None, None, ), # 2
    (3, TType.STRING, 'distances', None, None, ), # 3
  )

  def __init__(self, name=None, name_en=None, distances=None,):
    self.name = name
    self.name_en = name_en
    self.distances = distances

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.distances = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelSurroundingAttractions')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 2)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.distances is not None:
      oprot.writeFieldBegin('distances', TType.STRING, 3)
      oprot.writeString(self.distances)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.distances)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelTrafficAndAroundInformation:
  """
  Attributes:
   - name
   - name_en
   - distances
   - transportations
   - time_taken
   - transport_fee
   - note
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'name_en', None, None, ), # 2
    (3, TType.STRING, 'distances', None, None, ), # 3
    (4, TType.I32, 'transportations', None, None, ), # 4
    (5, TType.I32, 'time_taken', None, None, ), # 5
    (6, TType.DOUBLE, 'transport_fee', None, None, ), # 6
    (7, TType.STRING, 'note', None, None, ), # 7
  )

  def __init__(self, name=None, name_en=None, distances=None, transportations=None, time_taken=None, transport_fee=None, note=None,):
    self.name = name
    self.name_en = name_en
    self.distances = distances
    self.transportations = transportations
    self.time_taken = time_taken
    self.transport_fee = transport_fee
    self.note = note

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.distances = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.transportations = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.time_taken = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.transport_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.note = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelTrafficAndAroundInformation')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 2)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.distances is not None:
      oprot.writeFieldBegin('distances', TType.STRING, 3)
      oprot.writeString(self.distances)
      oprot.writeFieldEnd()
    if self.transportations is not None:
      oprot.writeFieldBegin('transportations', TType.I32, 4)
      oprot.writeI32(self.transportations)
      oprot.writeFieldEnd()
    if self.time_taken is not None:
      oprot.writeFieldBegin('time_taken', TType.I32, 5)
      oprot.writeI32(self.time_taken)
      oprot.writeFieldEnd()
    if self.transport_fee is not None:
      oprot.writeFieldBegin('transport_fee', TType.DOUBLE, 6)
      oprot.writeDouble(self.transport_fee)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 7)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.distances)
    value = (value * 31) ^ hash(self.transportations)
    value = (value * 31) ^ hash(self.time_taken)
    value = (value * 31) ^ hash(self.transport_fee)
    value = (value * 31) ^ hash(self.note)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelTrafficAndAroundInformations:
  """
  Attributes:
   - overview
   - overview_en
   - traffic_guide
   - traffic_and_around_information_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'overview', None, None, ), # 1
    (2, TType.STRING, 'overview_en', None, None, ), # 2
    (3, TType.STRING, 'traffic_guide', None, None, ), # 3
    (4, TType.LIST, 'traffic_and_around_information_list', (TType.STRUCT,(HotelTrafficAndAroundInformation, HotelTrafficAndAroundInformation.thrift_spec)), None, ), # 4
  )

  def __init__(self, overview=None, overview_en=None, traffic_guide=None, traffic_and_around_information_list=None,):
    self.overview = overview
    self.overview_en = overview_en
    self.traffic_guide = traffic_guide
    self.traffic_and_around_information_list = traffic_and_around_information_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.traffic_guide = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.traffic_and_around_information_list = []
          (_etype803, _size800) = iprot.readListBegin()
          for _i804 in xrange(_size800):
            _elem805 = HotelTrafficAndAroundInformation()
            _elem805.read(iprot)
            self.traffic_and_around_information_list.append(_elem805)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelTrafficAndAroundInformations')
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 1)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 2)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.traffic_guide is not None:
      oprot.writeFieldBegin('traffic_guide', TType.STRING, 3)
      oprot.writeString(self.traffic_guide)
      oprot.writeFieldEnd()
    if self.traffic_and_around_information_list is not None:
      oprot.writeFieldBegin('traffic_and_around_information_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.traffic_and_around_information_list))
      for iter806 in self.traffic_and_around_information_list:
        iter806.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.traffic_guide)
    value = (value * 31) ^ hash(self.traffic_and_around_information_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelSurroundingCommerces:
  """
  Attributes:
   - traffic_and_around_information_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'traffic_and_around_information_list', (TType.STRUCT,(HotelTrafficAndAroundInformation, HotelTrafficAndAroundInformation.thrift_spec)), None, ), # 1
  )

  def __init__(self, traffic_and_around_information_list=None,):
    self.traffic_and_around_information_list = traffic_and_around_information_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.traffic_and_around_information_list = []
          (_etype810, _size807) = iprot.readListBegin()
          for _i811 in xrange(_size807):
            _elem812 = HotelTrafficAndAroundInformation()
            _elem812.read(iprot)
            self.traffic_and_around_information_list.append(_elem812)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelSurroundingCommerces')
    if self.traffic_and_around_information_list is not None:
      oprot.writeFieldBegin('traffic_and_around_information_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.traffic_and_around_information_list))
      for iter813 in self.traffic_and_around_information_list:
        iter813.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.traffic_and_around_information_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceCityLevel:
  """
  Attributes:
   - complainrate
   - confirmrate
   - successrate
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'complainrate', None, None, ), # 1
    (2, TType.DOUBLE, 'confirmrate', None, None, ), # 2
    (3, TType.DOUBLE, 'successrate', None, None, ), # 3
    (4, TType.DOUBLE, 'score', None, None, ), # 4
  )

  def __init__(self, complainrate=None, confirmrate=None, successrate=None, score=None,):
    self.complainrate = complainrate
    self.confirmrate = confirmrate
    self.successrate = successrate
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.complainrate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.confirmrate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.successrate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceCityLevel')
    if self.complainrate is not None:
      oprot.writeFieldBegin('complainrate', TType.DOUBLE, 1)
      oprot.writeDouble(self.complainrate)
      oprot.writeFieldEnd()
    if self.confirmrate is not None:
      oprot.writeFieldBegin('confirmrate', TType.DOUBLE, 2)
      oprot.writeDouble(self.confirmrate)
      oprot.writeFieldEnd()
    if self.successrate is not None:
      oprot.writeFieldBegin('successrate', TType.DOUBLE, 3)
      oprot.writeDouble(self.successrate)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 4)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.complainrate)
    value = (value * 31) ^ hash(self.confirmrate)
    value = (value * 31) ^ hash(self.successrate)
    value = (value * 31) ^ hash(self.score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StructuredFacilityItem:
  """
  Attributes:
   - id
   - name_cn
   - name_en
   - parent_id
   - text_cn
   - text_en
   - rank
   - is_show_on_web
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name_cn', None, None, ), # 2
    (3, TType.STRING, 'name_en', None, None, ), # 3
    (4, TType.I32, 'parent_id', None, None, ), # 4
    (5, TType.STRING, 'text_cn', None, None, ), # 5
    (6, TType.STRING, 'text_en', None, None, ), # 6
    (7, TType.I32, 'rank', None, None, ), # 7
    (8, TType.I32, 'is_show_on_web', None, None, ), # 8
  )

  def __init__(self, id=None, name_cn=None, name_en=None, parent_id=None, text_cn=None, text_en=None, rank=None, is_show_on_web=None,):
    self.id = id
    self.name_cn = name_cn
    self.name_en = name_en
    self.parent_id = parent_id
    self.text_cn = text_cn
    self.text_en = text_en
    self.rank = rank
    self.is_show_on_web = is_show_on_web

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.text_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.text_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rank = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.is_show_on_web = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StructuredFacilityItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name_cn is not None:
      oprot.writeFieldBegin('name_cn', TType.STRING, 2)
      oprot.writeString(self.name_cn)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 3)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 4)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.text_cn is not None:
      oprot.writeFieldBegin('text_cn', TType.STRING, 5)
      oprot.writeString(self.text_cn)
      oprot.writeFieldEnd()
    if self.text_en is not None:
      oprot.writeFieldBegin('text_en', TType.STRING, 6)
      oprot.writeString(self.text_en)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 7)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.is_show_on_web is not None:
      oprot.writeFieldBegin('is_show_on_web', TType.I32, 8)
      oprot.writeI32(self.is_show_on_web)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name_cn)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.parent_id)
    value = (value * 31) ^ hash(self.text_cn)
    value = (value * 31) ^ hash(self.text_en)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.is_show_on_web)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelTag:
  """
  Attributes:
   - tag_id
   - tag_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'tag_id', None, None, ), # 1
    (2, TType.STRING, 'tag_name', None, None, ), # 2
  )

  def __init__(self, tag_id=None, tag_name=None,):
    self.tag_id = tag_id
    self.tag_name = tag_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.tag_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tag_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelTag')
    if self.tag_id is not None:
      oprot.writeFieldBegin('tag_id', TType.I32, 1)
      oprot.writeI32(self.tag_id)
      oprot.writeFieldEnd()
    if self.tag_name is not None:
      oprot.writeFieldBegin('tag_name', TType.STRING, 2)
      oprot.writeString(self.tag_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tag_id)
    value = (value * 31) ^ hash(self.tag_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecommendReason:
  """
  Attributes:
   - theme_id
   - theme_name
   - theme_name_en
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'theme_id', None, None, ), # 1
    (2, TType.STRING, 'theme_name', None, None, ), # 2
    (3, TType.STRING, 'theme_name_en', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
  )

  def __init__(self, theme_id=None, theme_name=None, theme_name_en=None, reason=None,):
    self.theme_id = theme_id
    self.theme_name = theme_name
    self.theme_name_en = theme_name_en
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.theme_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.theme_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.theme_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecommendReason')
    if self.theme_id is not None:
      oprot.writeFieldBegin('theme_id', TType.I32, 1)
      oprot.writeI32(self.theme_id)
      oprot.writeFieldEnd()
    if self.theme_name is not None:
      oprot.writeFieldBegin('theme_name', TType.STRING, 2)
      oprot.writeString(self.theme_name)
      oprot.writeFieldEnd()
    if self.theme_name_en is not None:
      oprot.writeFieldBegin('theme_name_en', TType.STRING, 3)
      oprot.writeString(self.theme_name_en)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.theme_id)
    value = (value * 31) ^ hash(self.theme_name)
    value = (value * 31) ^ hash(self.theme_name_en)
    value = (value * 31) ^ hash(self.reason)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NearByPoiInfo:
  """
  Attributes:
   - id
   - type
   - name
   - name_en
   - distance
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'name_en', None, None, ), # 4
    (5, TType.DOUBLE, 'distance', None, None, ), # 5
  )

  def __init__(self, id=None, type=None, name=None, name_en=None, distance=None,):
    self.id = id
    self.type = type
    self.name = name
    self.name_en = name_en
    self.distance = distance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.distance = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NearByPoiInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 4)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.DOUBLE, 5)
      oprot.writeDouble(self.distance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.distance)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MHotelInfo:
  """
  Attributes:
   - mhotel_id
   - hotel_name
   - hotel_name_en
   - address
   - address_en
   - post_code
   - star
   - real_star
   - latitude
   - longitude
   - baidu_latitude
   - baidu_longitude
   - province
   - city
   - credit_category_list
   - description
   - description_en
   - photo_url
   - credit_card
   - credit_card_en
   - second_name
   - second_name_en
   - hotel_url
   - area_id
   - city_id
   - is_reserve
   - admin_area_id
   - is_show_out
   - additional_status
   - apartment
   - economic
   - open_date
   - decorate_date
   - notes
   - star_out
   - credit
   - lobby_fax
   - airport_pick_up_service
   - general_amenities
   - room_amenitier
   - recreation_amenities
   - conference_amenities
   - dining_amenities
   - traffic_and_around_informations
   - surrounding_commerces_list
   - surrounding_restaurants_list
   - surrounding_attractions_list
   - surrounding_shops_list
   - feature_info
   - hotel_land_marks_list
   - lobby_tel
   - corp_group_id
   - hotel_brand_id
   - hotel_amenities
   - op_date
   - simple_traffic
   - simple_traffic_en
   - meetings
   - meetings_en
   - restaurants
   - restaurants_en
   - relaxs
   - relaxs_en
   - room_amenities
   - room_amenities_en
   - hotel_amenities_en
   - intro_editor_cn
   - intro_editor_en
   - hotel_group_id
   - facility
   - credit_category_list_en
   - complain_rate
   - fmc_rate
   - iot_rate
   - index_result_data_col
   - sum_order
   - total_comment
   - good_comment
   - bad_comment
   - comment_point32
   - old_area_id
   - old_city_id
   - old_admin_area_id
   - admin_area_name
   - days_credit_beign_date
   - days_credit
   - area_name
   - short_name
   - short_name_en
   - serve_status
   - stop_serve_code
   - sellingpoints
   - overview
   - sellingpoints_en
   - overview_en
   - hotelfacility
   - hotelfacility_en
   - addition_info
   - service_city_level
   - rec_reason
   - nearby_poi_info_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.STRING, 'hotel_name', None, None, ), # 2
    (3, TType.STRING, 'hotel_name_en', None, None, ), # 3
    (4, TType.STRING, 'address', None, None, ), # 4
    (5, TType.STRING, 'address_en', None, None, ), # 5
    (6, TType.STRING, 'post_code', None, None, ), # 6
    (7, TType.I32, 'star', None, None, ), # 7
    (8, TType.I32, 'real_star', None, None, ), # 8
    (9, TType.DOUBLE, 'latitude', None, None, ), # 9
    (10, TType.DOUBLE, 'longitude', None, None, ), # 10
    (11, TType.DOUBLE, 'baidu_latitude', None, None, ), # 11
    (12, TType.DOUBLE, 'baidu_longitude', None, None, ), # 12
    (13, TType.STRING, 'province', None, None, ), # 13
    (14, TType.STRING, 'city', None, None, ), # 14
    (15, TType.LIST, 'credit_category_list', (TType.STRUCT,(HotelCreditCategory, HotelCreditCategory.thrift_spec)), None, ), # 15
    (16, TType.STRING, 'description', None, None, ), # 16
    (17, TType.STRING, 'description_en', None, None, ), # 17
    (18, TType.STRING, 'photo_url', None, None, ), # 18
    (19, TType.STRING, 'credit_card', None, None, ), # 19
    (20, TType.STRING, 'credit_card_en', None, None, ), # 20
    (21, TType.STRING, 'second_name', None, None, ), # 21
    (22, TType.STRING, 'second_name_en', None, None, ), # 22
    (23, TType.STRING, 'hotel_url', None, None, ), # 23
    (24, TType.I32, 'area_id', None, None, ), # 24
    (25, TType.I32, 'city_id', None, None, ), # 25
    (26, TType.BOOL, 'is_reserve', None, None, ), # 26
    (27, TType.I32, 'admin_area_id', None, None, ), # 27
    (28, TType.BOOL, 'is_show_out', None, None, ), # 28
    (29, TType.I64, 'additional_status', None, None, ), # 29
    (30, TType.I32, 'apartment', None, None, ), # 30
    (31, TType.I32, 'economic', None, None, ), # 31
    (32, TType.STRING, 'open_date', None, None, ), # 32
    (33, TType.STRING, 'decorate_date', None, None, ), # 33
    (34, TType.STRING, 'notes', None, None, ), # 34
    (35, TType.I32, 'star_out', None, None, ), # 35
    (36, TType.I32, 'credit', None, None, ), # 36
    (37, TType.STRING, 'lobby_fax', None, None, ), # 37
    (38, TType.STRUCT, 'airport_pick_up_service', (HotelAirportPickUpService, HotelAirportPickUpService.thrift_spec), None, ), # 38
    (39, TType.STRUCT, 'general_amenities', (HotelGeneralAmenities, HotelGeneralAmenities.thrift_spec), None, ), # 39
    (40, TType.STRUCT, 'room_amenitier', (HotelRoomAmenities, HotelRoomAmenities.thrift_spec), None, ), # 40
    (41, TType.STRUCT, 'recreation_amenities', (HotelRecreationAmenities, HotelRecreationAmenities.thrift_spec), None, ), # 41
    (42, TType.STRUCT, 'conference_amenities', (HotelConferenceAmenities, HotelConferenceAmenities.thrift_spec), None, ), # 42
    (43, TType.STRUCT, 'dining_amenities', (HotelDiningAmenities, HotelDiningAmenities.thrift_spec), None, ), # 43
    (44, TType.STRUCT, 'traffic_and_around_informations', (HotelTrafficAndAroundInformations, HotelTrafficAndAroundInformations.thrift_spec), None, ), # 44
    (45, TType.LIST, 'surrounding_commerces_list', (TType.STRUCT,(HotelTrafficAndAroundInformation, HotelTrafficAndAroundInformation.thrift_spec)), None, ), # 45
    (46, TType.LIST, 'surrounding_restaurants_list', (TType.STRUCT,(HotelAroundInformaiton, HotelAroundInformaiton.thrift_spec)), None, ), # 46
    (47, TType.LIST, 'surrounding_attractions_list', (TType.STRUCT,(HotelSurroundingAttractions, HotelSurroundingAttractions.thrift_spec)), None, ), # 47
    (48, TType.LIST, 'surrounding_shops_list', (TType.STRUCT,(HotelAroundInformaiton, HotelAroundInformaiton.thrift_spec)), None, ), # 48
    (49, TType.STRUCT, 'feature_info', (HotelfeatureInfo, HotelfeatureInfo.thrift_spec), None, ), # 49
    (50, TType.LIST, 'hotel_land_marks_list', (TType.STRUCT,(HotelLandMark, HotelLandMark.thrift_spec)), None, ), # 50
    (51, TType.STRING, 'lobby_tel', None, None, ), # 51
    (52, TType.I32, 'corp_group_id', None, None, ), # 52
    (53, TType.I32, 'hotel_brand_id', None, None, ), # 53
    (54, TType.STRING, 'hotel_amenities', None, None, ), # 54
    (55, TType.STRING, 'op_date', None, None, ), # 55
    (56, TType.STRING, 'simple_traffic', None, None, ), # 56
    (57, TType.STRING, 'simple_traffic_en', None, None, ), # 57
    (58, TType.STRING, 'meetings', None, None, ), # 58
    (59, TType.STRING, 'meetings_en', None, None, ), # 59
    (60, TType.STRING, 'restaurants', None, None, ), # 60
    (61, TType.STRING, 'restaurants_en', None, None, ), # 61
    (62, TType.STRING, 'relaxs', None, None, ), # 62
    (63, TType.STRING, 'relaxs_en', None, None, ), # 63
    (64, TType.STRING, 'room_amenities', None, None, ), # 64
    (65, TType.STRING, 'room_amenities_en', None, None, ), # 65
    (66, TType.STRING, 'hotel_amenities_en', None, None, ), # 66
    (67, TType.STRING, 'intro_editor_cn', None, None, ), # 67
    (68, TType.STRING, 'intro_editor_en', None, None, ), # 68
    (69, TType.STRING, 'hotel_group_id', None, None, ), # 69
    (70, TType.STRUCT, 'facility', (StructuredFacilityItem, StructuredFacilityItem.thrift_spec), None, ), # 70
    (71, TType.LIST, 'credit_category_list_en', (TType.STRUCT,(HotelCreditCategory, HotelCreditCategory.thrift_spec)), None, ), # 71
    (72, TType.DOUBLE, 'complain_rate', None, None, ), # 72
    (73, TType.DOUBLE, 'fmc_rate', None, None, ), # 73
    (74, TType.DOUBLE, 'iot_rate', None, None, ), # 74
    (75, TType.DOUBLE, 'index_result_data_col', None, None, ), # 75
    (76, TType.I32, 'sum_order', None, None, ), # 76
    (77, TType.I32, 'total_comment', None, None, ), # 77
    (78, TType.I32, 'good_comment', None, None, ), # 78
    (79, TType.I32, 'bad_comment', None, None, ), # 79
    (80, TType.DOUBLE, 'comment_point32', None, None, ), # 80
    (81, TType.I32, 'old_area_id', None, None, ), # 81
    (82, TType.I32, 'old_city_id', None, None, ), # 82
    (83, TType.I32, 'old_admin_area_id', None, None, ), # 83
    (84, TType.STRING, 'admin_area_name', None, None, ), # 84
    (85, TType.I64, 'days_credit_beign_date', None, None, ), # 85
    (86, TType.LIST, 'days_credit', (TType.I32,None), None, ), # 86
    (87, TType.STRING, 'area_name', None, None, ), # 87
    (88, TType.STRING, 'short_name', None, None, ), # 88
    (89, TType.STRING, 'short_name_en', None, None, ), # 89
    (90, TType.I32, 'serve_status', None, None, ), # 90
    (91, TType.I32, 'stop_serve_code', None, None, ), # 91
    (92, TType.STRING, 'sellingpoints', None, None, ), # 92
    (93, TType.STRING, 'overview', None, None, ), # 93
    (94, TType.STRING, 'sellingpoints_en', None, None, ), # 94
    (95, TType.STRING, 'overview_en', None, None, ), # 95
    (96, TType.STRING, 'hotelfacility', None, None, ), # 96
    (97, TType.STRING, 'hotelfacility_en', None, None, ), # 97
    (98, TType.STRING, 'addition_info', None, None, ), # 98
    (99, TType.STRUCT, 'service_city_level', (ServiceCityLevel, ServiceCityLevel.thrift_spec), None, ), # 99
    (100, TType.LIST, 'rec_reason', (TType.STRUCT,(RecommendReason, RecommendReason.thrift_spec)), None, ), # 100
    (101, TType.LIST, 'nearby_poi_info_list', (TType.STRUCT,(NearByPoiInfo, NearByPoiInfo.thrift_spec)), None, ), # 101
  )

  def __init__(self, mhotel_id=None, hotel_name=None, hotel_name_en=None, address=None, address_en=None, post_code=None, star=None, real_star=None, latitude=None, longitude=None, baidu_latitude=None, baidu_longitude=None, province=None, city=None, credit_category_list=None, description=None, description_en=None, photo_url=None, credit_card=None, credit_card_en=None, second_name=None, second_name_en=None, hotel_url=None, area_id=None, city_id=None, is_reserve=None, admin_area_id=None, is_show_out=None, additional_status=None, apartment=None, economic=None, open_date=None, decorate_date=None, notes=None, star_out=None, credit=None, lobby_fax=None, airport_pick_up_service=None, general_amenities=None, room_amenitier=None, recreation_amenities=None, conference_amenities=None, dining_amenities=None, traffic_and_around_informations=None, surrounding_commerces_list=None, surrounding_restaurants_list=None, surrounding_attractions_list=None, surrounding_shops_list=None, feature_info=None, hotel_land_marks_list=None, lobby_tel=None, corp_group_id=None, hotel_brand_id=None, hotel_amenities=None, op_date=None, simple_traffic=None, simple_traffic_en=None, meetings=None, meetings_en=None, restaurants=None, restaurants_en=None, relaxs=None, relaxs_en=None, room_amenities=None, room_amenities_en=None, hotel_amenities_en=None, intro_editor_cn=None, intro_editor_en=None, hotel_group_id=None, facility=None, credit_category_list_en=None, complain_rate=None, fmc_rate=None, iot_rate=None, index_result_data_col=None, sum_order=None, total_comment=None, good_comment=None, bad_comment=None, comment_point32=None, old_area_id=None, old_city_id=None, old_admin_area_id=None, admin_area_name=None, days_credit_beign_date=None, days_credit=None, area_name=None, short_name=None, short_name_en=None, serve_status=None, stop_serve_code=None, sellingpoints=None, overview=None, sellingpoints_en=None, overview_en=None, hotelfacility=None, hotelfacility_en=None, addition_info=None, service_city_level=None, rec_reason=None, nearby_poi_info_list=None,):
    self.mhotel_id = mhotel_id
    self.hotel_name = hotel_name
    self.hotel_name_en = hotel_name_en
    self.address = address
    self.address_en = address_en
    self.post_code = post_code
    self.star = star
    self.real_star = real_star
    self.latitude = latitude
    self.longitude = longitude
    self.baidu_latitude = baidu_latitude
    self.baidu_longitude = baidu_longitude
    self.province = province
    self.city = city
    self.credit_category_list = credit_category_list
    self.description = description
    self.description_en = description_en
    self.photo_url = photo_url
    self.credit_card = credit_card
    self.credit_card_en = credit_card_en
    self.second_name = second_name
    self.second_name_en = second_name_en
    self.hotel_url = hotel_url
    self.area_id = area_id
    self.city_id = city_id
    self.is_reserve = is_reserve
    self.admin_area_id = admin_area_id
    self.is_show_out = is_show_out
    self.additional_status = additional_status
    self.apartment = apartment
    self.economic = economic
    self.open_date = open_date
    self.decorate_date = decorate_date
    self.notes = notes
    self.star_out = star_out
    self.credit = credit
    self.lobby_fax = lobby_fax
    self.airport_pick_up_service = airport_pick_up_service
    self.general_amenities = general_amenities
    self.room_amenitier = room_amenitier
    self.recreation_amenities = recreation_amenities
    self.conference_amenities = conference_amenities
    self.dining_amenities = dining_amenities
    self.traffic_and_around_informations = traffic_and_around_informations
    self.surrounding_commerces_list = surrounding_commerces_list
    self.surrounding_restaurants_list = surrounding_restaurants_list
    self.surrounding_attractions_list = surrounding_attractions_list
    self.surrounding_shops_list = surrounding_shops_list
    self.feature_info = feature_info
    self.hotel_land_marks_list = hotel_land_marks_list
    self.lobby_tel = lobby_tel
    self.corp_group_id = corp_group_id
    self.hotel_brand_id = hotel_brand_id
    self.hotel_amenities = hotel_amenities
    self.op_date = op_date
    self.simple_traffic = simple_traffic
    self.simple_traffic_en = simple_traffic_en
    self.meetings = meetings
    self.meetings_en = meetings_en
    self.restaurants = restaurants
    self.restaurants_en = restaurants_en
    self.relaxs = relaxs
    self.relaxs_en = relaxs_en
    self.room_amenities = room_amenities
    self.room_amenities_en = room_amenities_en
    self.hotel_amenities_en = hotel_amenities_en
    self.intro_editor_cn = intro_editor_cn
    self.intro_editor_en = intro_editor_en
    self.hotel_group_id = hotel_group_id
    self.facility = facility
    self.credit_category_list_en = credit_category_list_en
    self.complain_rate = complain_rate
    self.fmc_rate = fmc_rate
    self.iot_rate = iot_rate
    self.index_result_data_col = index_result_data_col
    self.sum_order = sum_order
    self.total_comment = total_comment
    self.good_comment = good_comment
    self.bad_comment = bad_comment
    self.comment_point32 = comment_point32
    self.old_area_id = old_area_id
    self.old_city_id = old_city_id
    self.old_admin_area_id = old_admin_area_id
    self.admin_area_name = admin_area_name
    self.days_credit_beign_date = days_credit_beign_date
    self.days_credit = days_credit
    self.area_name = area_name
    self.short_name = short_name
    self.short_name_en = short_name_en
    self.serve_status = serve_status
    self.stop_serve_code = stop_serve_code
    self.sellingpoints = sellingpoints
    self.overview = overview
    self.sellingpoints_en = sellingpoints_en
    self.overview_en = overview_en
    self.hotelfacility = hotelfacility
    self.hotelfacility_en = hotelfacility_en
    self.addition_info = addition_info
    self.service_city_level = service_city_level
    self.rec_reason = rec_reason
    self.nearby_poi_info_list = nearby_poi_info_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hotel_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.address_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.post_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.star = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.real_star = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.baidu_latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.baidu_longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.credit_category_list = []
          (_etype817, _size814) = iprot.readListBegin()
          for _i818 in xrange(_size814):
            _elem819 = HotelCreditCategory()
            _elem819.read(iprot)
            self.credit_category_list.append(_elem819)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.description_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.photo_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.credit_card = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.credit_card_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.second_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.second_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.hotel_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.city_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.is_reserve = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.admin_area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.BOOL:
          self.is_show_out = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.additional_status = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.apartment = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.economic = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.open_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.decorate_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.notes = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.star_out = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.credit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.lobby_fax = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRUCT:
          self.airport_pick_up_service = HotelAirportPickUpService()
          self.airport_pick_up_service.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRUCT:
          self.general_amenities = HotelGeneralAmenities()
          self.general_amenities.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.room_amenitier = HotelRoomAmenities()
          self.room_amenitier.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRUCT:
          self.recreation_amenities = HotelRecreationAmenities()
          self.recreation_amenities.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRUCT:
          self.conference_amenities = HotelConferenceAmenities()
          self.conference_amenities.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRUCT:
          self.dining_amenities = HotelDiningAmenities()
          self.dining_amenities.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRUCT:
          self.traffic_and_around_informations = HotelTrafficAndAroundInformations()
          self.traffic_and_around_informations.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.LIST:
          self.surrounding_commerces_list = []
          (_etype823, _size820) = iprot.readListBegin()
          for _i824 in xrange(_size820):
            _elem825 = HotelTrafficAndAroundInformation()
            _elem825.read(iprot)
            self.surrounding_commerces_list.append(_elem825)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.LIST:
          self.surrounding_restaurants_list = []
          (_etype829, _size826) = iprot.readListBegin()
          for _i830 in xrange(_size826):
            _elem831 = HotelAroundInformaiton()
            _elem831.read(iprot)
            self.surrounding_restaurants_list.append(_elem831)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.LIST:
          self.surrounding_attractions_list = []
          (_etype835, _size832) = iprot.readListBegin()
          for _i836 in xrange(_size832):
            _elem837 = HotelSurroundingAttractions()
            _elem837.read(iprot)
            self.surrounding_attractions_list.append(_elem837)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.LIST:
          self.surrounding_shops_list = []
          (_etype841, _size838) = iprot.readListBegin()
          for _i842 in xrange(_size838):
            _elem843 = HotelAroundInformaiton()
            _elem843.read(iprot)
            self.surrounding_shops_list.append(_elem843)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.STRUCT:
          self.feature_info = HotelfeatureInfo()
          self.feature_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.LIST:
          self.hotel_land_marks_list = []
          (_etype847, _size844) = iprot.readListBegin()
          for _i848 in xrange(_size844):
            _elem849 = HotelLandMark()
            _elem849.read(iprot)
            self.hotel_land_marks_list.append(_elem849)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.lobby_tel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I32:
          self.corp_group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.hotel_brand_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.hotel_amenities = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRING:
          self.op_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.STRING:
          self.simple_traffic = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.STRING:
          self.simple_traffic_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.STRING:
          self.meetings = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.meetings_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.restaurants = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.STRING:
          self.restaurants_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.STRING:
          self.relaxs = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRING:
          self.relaxs_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.STRING:
          self.room_amenities = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.STRING:
          self.room_amenities_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.STRING:
          self.hotel_amenities_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.STRING:
          self.intro_editor_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.STRING:
          self.intro_editor_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.STRING:
          self.hotel_group_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRUCT:
          self.facility = StructuredFacilityItem()
          self.facility.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.LIST:
          self.credit_category_list_en = []
          (_etype853, _size850) = iprot.readListBegin()
          for _i854 in xrange(_size850):
            _elem855 = HotelCreditCategory()
            _elem855.read(iprot)
            self.credit_category_list_en.append(_elem855)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.DOUBLE:
          self.complain_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.DOUBLE:
          self.fmc_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 74:
        if ftype == TType.DOUBLE:
          self.iot_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 75:
        if ftype == TType.DOUBLE:
          self.index_result_data_col = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 76:
        if ftype == TType.I32:
          self.sum_order = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 77:
        if ftype == TType.I32:
          self.total_comment = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 78:
        if ftype == TType.I32:
          self.good_comment = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 79:
        if ftype == TType.I32:
          self.bad_comment = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.DOUBLE:
          self.comment_point32 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 81:
        if ftype == TType.I32:
          self.old_area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 82:
        if ftype == TType.I32:
          self.old_city_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 83:
        if ftype == TType.I32:
          self.old_admin_area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 84:
        if ftype == TType.STRING:
          self.admin_area_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 85:
        if ftype == TType.I64:
          self.days_credit_beign_date = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 86:
        if ftype == TType.LIST:
          self.days_credit = []
          (_etype859, _size856) = iprot.readListBegin()
          for _i860 in xrange(_size856):
            _elem861 = iprot.readI32()
            self.days_credit.append(_elem861)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 87:
        if ftype == TType.STRING:
          self.area_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 88:
        if ftype == TType.STRING:
          self.short_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 89:
        if ftype == TType.STRING:
          self.short_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.I32:
          self.serve_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 91:
        if ftype == TType.I32:
          self.stop_serve_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 92:
        if ftype == TType.STRING:
          self.sellingpoints = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 93:
        if ftype == TType.STRING:
          self.overview = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 94:
        if ftype == TType.STRING:
          self.sellingpoints_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 95:
        if ftype == TType.STRING:
          self.overview_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 96:
        if ftype == TType.STRING:
          self.hotelfacility = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 97:
        if ftype == TType.STRING:
          self.hotelfacility_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 98:
        if ftype == TType.STRING:
          self.addition_info = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 99:
        if ftype == TType.STRUCT:
          self.service_city_level = ServiceCityLevel()
          self.service_city_level.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.LIST:
          self.rec_reason = []
          (_etype865, _size862) = iprot.readListBegin()
          for _i866 in xrange(_size862):
            _elem867 = RecommendReason()
            _elem867.read(iprot)
            self.rec_reason.append(_elem867)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.LIST:
          self.nearby_poi_info_list = []
          (_etype871, _size868) = iprot.readListBegin()
          for _i872 in xrange(_size868):
            _elem873 = NearByPoiInfo()
            _elem873.read(iprot)
            self.nearby_poi_info_list.append(_elem873)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MHotelInfo')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.hotel_name is not None:
      oprot.writeFieldBegin('hotel_name', TType.STRING, 2)
      oprot.writeString(self.hotel_name)
      oprot.writeFieldEnd()
    if self.hotel_name_en is not None:
      oprot.writeFieldBegin('hotel_name_en', TType.STRING, 3)
      oprot.writeString(self.hotel_name_en)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 4)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.address_en is not None:
      oprot.writeFieldBegin('address_en', TType.STRING, 5)
      oprot.writeString(self.address_en)
      oprot.writeFieldEnd()
    if self.post_code is not None:
      oprot.writeFieldBegin('post_code', TType.STRING, 6)
      oprot.writeString(self.post_code)
      oprot.writeFieldEnd()
    if self.star is not None:
      oprot.writeFieldBegin('star', TType.I32, 7)
      oprot.writeI32(self.star)
      oprot.writeFieldEnd()
    if self.real_star is not None:
      oprot.writeFieldBegin('real_star', TType.I32, 8)
      oprot.writeI32(self.real_star)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 9)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 10)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.baidu_latitude is not None:
      oprot.writeFieldBegin('baidu_latitude', TType.DOUBLE, 11)
      oprot.writeDouble(self.baidu_latitude)
      oprot.writeFieldEnd()
    if self.baidu_longitude is not None:
      oprot.writeFieldBegin('baidu_longitude', TType.DOUBLE, 12)
      oprot.writeDouble(self.baidu_longitude)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 13)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 14)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.credit_category_list is not None:
      oprot.writeFieldBegin('credit_category_list', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.credit_category_list))
      for iter874 in self.credit_category_list:
        iter874.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 16)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.description_en is not None:
      oprot.writeFieldBegin('description_en', TType.STRING, 17)
      oprot.writeString(self.description_en)
      oprot.writeFieldEnd()
    if self.photo_url is not None:
      oprot.writeFieldBegin('photo_url', TType.STRING, 18)
      oprot.writeString(self.photo_url)
      oprot.writeFieldEnd()
    if self.credit_card is not None:
      oprot.writeFieldBegin('credit_card', TType.STRING, 19)
      oprot.writeString(self.credit_card)
      oprot.writeFieldEnd()
    if self.credit_card_en is not None:
      oprot.writeFieldBegin('credit_card_en', TType.STRING, 20)
      oprot.writeString(self.credit_card_en)
      oprot.writeFieldEnd()
    if self.second_name is not None:
      oprot.writeFieldBegin('second_name', TType.STRING, 21)
      oprot.writeString(self.second_name)
      oprot.writeFieldEnd()
    if self.second_name_en is not None:
      oprot.writeFieldBegin('second_name_en', TType.STRING, 22)
      oprot.writeString(self.second_name_en)
      oprot.writeFieldEnd()
    if self.hotel_url is not None:
      oprot.writeFieldBegin('hotel_url', TType.STRING, 23)
      oprot.writeString(self.hotel_url)
      oprot.writeFieldEnd()
    if self.area_id is not None:
      oprot.writeFieldBegin('area_id', TType.I32, 24)
      oprot.writeI32(self.area_id)
      oprot.writeFieldEnd()
    if self.city_id is not None:
      oprot.writeFieldBegin('city_id', TType.I32, 25)
      oprot.writeI32(self.city_id)
      oprot.writeFieldEnd()
    if self.is_reserve is not None:
      oprot.writeFieldBegin('is_reserve', TType.BOOL, 26)
      oprot.writeBool(self.is_reserve)
      oprot.writeFieldEnd()
    if self.admin_area_id is not None:
      oprot.writeFieldBegin('admin_area_id', TType.I32, 27)
      oprot.writeI32(self.admin_area_id)
      oprot.writeFieldEnd()
    if self.is_show_out is not None:
      oprot.writeFieldBegin('is_show_out', TType.BOOL, 28)
      oprot.writeBool(self.is_show_out)
      oprot.writeFieldEnd()
    if self.additional_status is not None:
      oprot.writeFieldBegin('additional_status', TType.I64, 29)
      oprot.writeI64(self.additional_status)
      oprot.writeFieldEnd()
    if self.apartment is not None:
      oprot.writeFieldBegin('apartment', TType.I32, 30)
      oprot.writeI32(self.apartment)
      oprot.writeFieldEnd()
    if self.economic is not None:
      oprot.writeFieldBegin('economic', TType.I32, 31)
      oprot.writeI32(self.economic)
      oprot.writeFieldEnd()
    if self.open_date is not None:
      oprot.writeFieldBegin('open_date', TType.STRING, 32)
      oprot.writeString(self.open_date)
      oprot.writeFieldEnd()
    if self.decorate_date is not None:
      oprot.writeFieldBegin('decorate_date', TType.STRING, 33)
      oprot.writeString(self.decorate_date)
      oprot.writeFieldEnd()
    if self.notes is not None:
      oprot.writeFieldBegin('notes', TType.STRING, 34)
      oprot.writeString(self.notes)
      oprot.writeFieldEnd()
    if self.star_out is not None:
      oprot.writeFieldBegin('star_out', TType.I32, 35)
      oprot.writeI32(self.star_out)
      oprot.writeFieldEnd()
    if self.credit is not None:
      oprot.writeFieldBegin('credit', TType.I32, 36)
      oprot.writeI32(self.credit)
      oprot.writeFieldEnd()
    if self.lobby_fax is not None:
      oprot.writeFieldBegin('lobby_fax', TType.STRING, 37)
      oprot.writeString(self.lobby_fax)
      oprot.writeFieldEnd()
    if self.airport_pick_up_service is not None:
      oprot.writeFieldBegin('airport_pick_up_service', TType.STRUCT, 38)
      self.airport_pick_up_service.write(oprot)
      oprot.writeFieldEnd()
    if self.general_amenities is not None:
      oprot.writeFieldBegin('general_amenities', TType.STRUCT, 39)
      self.general_amenities.write(oprot)
      oprot.writeFieldEnd()
    if self.room_amenitier is not None:
      oprot.writeFieldBegin('room_amenitier', TType.STRUCT, 40)
      self.room_amenitier.write(oprot)
      oprot.writeFieldEnd()
    if self.recreation_amenities is not None:
      oprot.writeFieldBegin('recreation_amenities', TType.STRUCT, 41)
      self.recreation_amenities.write(oprot)
      oprot.writeFieldEnd()
    if self.conference_amenities is not None:
      oprot.writeFieldBegin('conference_amenities', TType.STRUCT, 42)
      self.conference_amenities.write(oprot)
      oprot.writeFieldEnd()
    if self.dining_amenities is not None:
      oprot.writeFieldBegin('dining_amenities', TType.STRUCT, 43)
      self.dining_amenities.write(oprot)
      oprot.writeFieldEnd()
    if self.traffic_and_around_informations is not None:
      oprot.writeFieldBegin('traffic_and_around_informations', TType.STRUCT, 44)
      self.traffic_and_around_informations.write(oprot)
      oprot.writeFieldEnd()
    if self.surrounding_commerces_list is not None:
      oprot.writeFieldBegin('surrounding_commerces_list', TType.LIST, 45)
      oprot.writeListBegin(TType.STRUCT, len(self.surrounding_commerces_list))
      for iter875 in self.surrounding_commerces_list:
        iter875.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surrounding_restaurants_list is not None:
      oprot.writeFieldBegin('surrounding_restaurants_list', TType.LIST, 46)
      oprot.writeListBegin(TType.STRUCT, len(self.surrounding_restaurants_list))
      for iter876 in self.surrounding_restaurants_list:
        iter876.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surrounding_attractions_list is not None:
      oprot.writeFieldBegin('surrounding_attractions_list', TType.LIST, 47)
      oprot.writeListBegin(TType.STRUCT, len(self.surrounding_attractions_list))
      for iter877 in self.surrounding_attractions_list:
        iter877.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surrounding_shops_list is not None:
      oprot.writeFieldBegin('surrounding_shops_list', TType.LIST, 48)
      oprot.writeListBegin(TType.STRUCT, len(self.surrounding_shops_list))
      for iter878 in self.surrounding_shops_list:
        iter878.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.feature_info is not None:
      oprot.writeFieldBegin('feature_info', TType.STRUCT, 49)
      self.feature_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_land_marks_list is not None:
      oprot.writeFieldBegin('hotel_land_marks_list', TType.LIST, 50)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_land_marks_list))
      for iter879 in self.hotel_land_marks_list:
        iter879.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lobby_tel is not None:
      oprot.writeFieldBegin('lobby_tel', TType.STRING, 51)
      oprot.writeString(self.lobby_tel)
      oprot.writeFieldEnd()
    if self.corp_group_id is not None:
      oprot.writeFieldBegin('corp_group_id', TType.I32, 52)
      oprot.writeI32(self.corp_group_id)
      oprot.writeFieldEnd()
    if self.hotel_brand_id is not None:
      oprot.writeFieldBegin('hotel_brand_id', TType.I32, 53)
      oprot.writeI32(self.hotel_brand_id)
      oprot.writeFieldEnd()
    if self.hotel_amenities is not None:
      oprot.writeFieldBegin('hotel_amenities', TType.STRING, 54)
      oprot.writeString(self.hotel_amenities)
      oprot.writeFieldEnd()
    if self.op_date is not None:
      oprot.writeFieldBegin('op_date', TType.STRING, 55)
      oprot.writeString(self.op_date)
      oprot.writeFieldEnd()
    if self.simple_traffic is not None:
      oprot.writeFieldBegin('simple_traffic', TType.STRING, 56)
      oprot.writeString(self.simple_traffic)
      oprot.writeFieldEnd()
    if self.simple_traffic_en is not None:
      oprot.writeFieldBegin('simple_traffic_en', TType.STRING, 57)
      oprot.writeString(self.simple_traffic_en)
      oprot.writeFieldEnd()
    if self.meetings is not None:
      oprot.writeFieldBegin('meetings', TType.STRING, 58)
      oprot.writeString(self.meetings)
      oprot.writeFieldEnd()
    if self.meetings_en is not None:
      oprot.writeFieldBegin('meetings_en', TType.STRING, 59)
      oprot.writeString(self.meetings_en)
      oprot.writeFieldEnd()
    if self.restaurants is not None:
      oprot.writeFieldBegin('restaurants', TType.STRING, 60)
      oprot.writeString(self.restaurants)
      oprot.writeFieldEnd()
    if self.restaurants_en is not None:
      oprot.writeFieldBegin('restaurants_en', TType.STRING, 61)
      oprot.writeString(self.restaurants_en)
      oprot.writeFieldEnd()
    if self.relaxs is not None:
      oprot.writeFieldBegin('relaxs', TType.STRING, 62)
      oprot.writeString(self.relaxs)
      oprot.writeFieldEnd()
    if self.relaxs_en is not None:
      oprot.writeFieldBegin('relaxs_en', TType.STRING, 63)
      oprot.writeString(self.relaxs_en)
      oprot.writeFieldEnd()
    if self.room_amenities is not None:
      oprot.writeFieldBegin('room_amenities', TType.STRING, 64)
      oprot.writeString(self.room_amenities)
      oprot.writeFieldEnd()
    if self.room_amenities_en is not None:
      oprot.writeFieldBegin('room_amenities_en', TType.STRING, 65)
      oprot.writeString(self.room_amenities_en)
      oprot.writeFieldEnd()
    if self.hotel_amenities_en is not None:
      oprot.writeFieldBegin('hotel_amenities_en', TType.STRING, 66)
      oprot.writeString(self.hotel_amenities_en)
      oprot.writeFieldEnd()
    if self.intro_editor_cn is not None:
      oprot.writeFieldBegin('intro_editor_cn', TType.STRING, 67)
      oprot.writeString(self.intro_editor_cn)
      oprot.writeFieldEnd()
    if self.intro_editor_en is not None:
      oprot.writeFieldBegin('intro_editor_en', TType.STRING, 68)
      oprot.writeString(self.intro_editor_en)
      oprot.writeFieldEnd()
    if self.hotel_group_id is not None:
      oprot.writeFieldBegin('hotel_group_id', TType.STRING, 69)
      oprot.writeString(self.hotel_group_id)
      oprot.writeFieldEnd()
    if self.facility is not None:
      oprot.writeFieldBegin('facility', TType.STRUCT, 70)
      self.facility.write(oprot)
      oprot.writeFieldEnd()
    if self.credit_category_list_en is not None:
      oprot.writeFieldBegin('credit_category_list_en', TType.LIST, 71)
      oprot.writeListBegin(TType.STRUCT, len(self.credit_category_list_en))
      for iter880 in self.credit_category_list_en:
        iter880.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.complain_rate is not None:
      oprot.writeFieldBegin('complain_rate', TType.DOUBLE, 72)
      oprot.writeDouble(self.complain_rate)
      oprot.writeFieldEnd()
    if self.fmc_rate is not None:
      oprot.writeFieldBegin('fmc_rate', TType.DOUBLE, 73)
      oprot.writeDouble(self.fmc_rate)
      oprot.writeFieldEnd()
    if self.iot_rate is not None:
      oprot.writeFieldBegin('iot_rate', TType.DOUBLE, 74)
      oprot.writeDouble(self.iot_rate)
      oprot.writeFieldEnd()
    if self.index_result_data_col is not None:
      oprot.writeFieldBegin('index_result_data_col', TType.DOUBLE, 75)
      oprot.writeDouble(self.index_result_data_col)
      oprot.writeFieldEnd()
    if self.sum_order is not None:
      oprot.writeFieldBegin('sum_order', TType.I32, 76)
      oprot.writeI32(self.sum_order)
      oprot.writeFieldEnd()
    if self.total_comment is not None:
      oprot.writeFieldBegin('total_comment', TType.I32, 77)
      oprot.writeI32(self.total_comment)
      oprot.writeFieldEnd()
    if self.good_comment is not None:
      oprot.writeFieldBegin('good_comment', TType.I32, 78)
      oprot.writeI32(self.good_comment)
      oprot.writeFieldEnd()
    if self.bad_comment is not None:
      oprot.writeFieldBegin('bad_comment', TType.I32, 79)
      oprot.writeI32(self.bad_comment)
      oprot.writeFieldEnd()
    if self.comment_point32 is not None:
      oprot.writeFieldBegin('comment_point32', TType.DOUBLE, 80)
      oprot.writeDouble(self.comment_point32)
      oprot.writeFieldEnd()
    if self.old_area_id is not None:
      oprot.writeFieldBegin('old_area_id', TType.I32, 81)
      oprot.writeI32(self.old_area_id)
      oprot.writeFieldEnd()
    if self.old_city_id is not None:
      oprot.writeFieldBegin('old_city_id', TType.I32, 82)
      oprot.writeI32(self.old_city_id)
      oprot.writeFieldEnd()
    if self.old_admin_area_id is not None:
      oprot.writeFieldBegin('old_admin_area_id', TType.I32, 83)
      oprot.writeI32(self.old_admin_area_id)
      oprot.writeFieldEnd()
    if self.admin_area_name is not None:
      oprot.writeFieldBegin('admin_area_name', TType.STRING, 84)
      oprot.writeString(self.admin_area_name)
      oprot.writeFieldEnd()
    if self.days_credit_beign_date is not None:
      oprot.writeFieldBegin('days_credit_beign_date', TType.I64, 85)
      oprot.writeI64(self.days_credit_beign_date)
      oprot.writeFieldEnd()
    if self.days_credit is not None:
      oprot.writeFieldBegin('days_credit', TType.LIST, 86)
      oprot.writeListBegin(TType.I32, len(self.days_credit))
      for iter881 in self.days_credit:
        oprot.writeI32(iter881)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.area_name is not None:
      oprot.writeFieldBegin('area_name', TType.STRING, 87)
      oprot.writeString(self.area_name)
      oprot.writeFieldEnd()
    if self.short_name is not None:
      oprot.writeFieldBegin('short_name', TType.STRING, 88)
      oprot.writeString(self.short_name)
      oprot.writeFieldEnd()
    if self.short_name_en is not None:
      oprot.writeFieldBegin('short_name_en', TType.STRING, 89)
      oprot.writeString(self.short_name_en)
      oprot.writeFieldEnd()
    if self.serve_status is not None:
      oprot.writeFieldBegin('serve_status', TType.I32, 90)
      oprot.writeI32(self.serve_status)
      oprot.writeFieldEnd()
    if self.stop_serve_code is not None:
      oprot.writeFieldBegin('stop_serve_code', TType.I32, 91)
      oprot.writeI32(self.stop_serve_code)
      oprot.writeFieldEnd()
    if self.sellingpoints is not None:
      oprot.writeFieldBegin('sellingpoints', TType.STRING, 92)
      oprot.writeString(self.sellingpoints)
      oprot.writeFieldEnd()
    if self.overview is not None:
      oprot.writeFieldBegin('overview', TType.STRING, 93)
      oprot.writeString(self.overview)
      oprot.writeFieldEnd()
    if self.sellingpoints_en is not None:
      oprot.writeFieldBegin('sellingpoints_en', TType.STRING, 94)
      oprot.writeString(self.sellingpoints_en)
      oprot.writeFieldEnd()
    if self.overview_en is not None:
      oprot.writeFieldBegin('overview_en', TType.STRING, 95)
      oprot.writeString(self.overview_en)
      oprot.writeFieldEnd()
    if self.hotelfacility is not None:
      oprot.writeFieldBegin('hotelfacility', TType.STRING, 96)
      oprot.writeString(self.hotelfacility)
      oprot.writeFieldEnd()
    if self.hotelfacility_en is not None:
      oprot.writeFieldBegin('hotelfacility_en', TType.STRING, 97)
      oprot.writeString(self.hotelfacility_en)
      oprot.writeFieldEnd()
    if self.addition_info is not None:
      oprot.writeFieldBegin('addition_info', TType.STRING, 98)
      oprot.writeString(self.addition_info)
      oprot.writeFieldEnd()
    if self.service_city_level is not None:
      oprot.writeFieldBegin('service_city_level', TType.STRUCT, 99)
      self.service_city_level.write(oprot)
      oprot.writeFieldEnd()
    if self.rec_reason is not None:
      oprot.writeFieldBegin('rec_reason', TType.LIST, 100)
      oprot.writeListBegin(TType.STRUCT, len(self.rec_reason))
      for iter882 in self.rec_reason:
        iter882.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nearby_poi_info_list is not None:
      oprot.writeFieldBegin('nearby_poi_info_list', TType.LIST, 101)
      oprot.writeListBegin(TType.STRUCT, len(self.nearby_poi_info_list))
      for iter883 in self.nearby_poi_info_list:
        iter883.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.hotel_name)
    value = (value * 31) ^ hash(self.hotel_name_en)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.address_en)
    value = (value * 31) ^ hash(self.post_code)
    value = (value * 31) ^ hash(self.star)
    value = (value * 31) ^ hash(self.real_star)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.baidu_latitude)
    value = (value * 31) ^ hash(self.baidu_longitude)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.credit_category_list)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.description_en)
    value = (value * 31) ^ hash(self.photo_url)
    value = (value * 31) ^ hash(self.credit_card)
    value = (value * 31) ^ hash(self.credit_card_en)
    value = (value * 31) ^ hash(self.second_name)
    value = (value * 31) ^ hash(self.second_name_en)
    value = (value * 31) ^ hash(self.hotel_url)
    value = (value * 31) ^ hash(self.area_id)
    value = (value * 31) ^ hash(self.city_id)
    value = (value * 31) ^ hash(self.is_reserve)
    value = (value * 31) ^ hash(self.admin_area_id)
    value = (value * 31) ^ hash(self.is_show_out)
    value = (value * 31) ^ hash(self.additional_status)
    value = (value * 31) ^ hash(self.apartment)
    value = (value * 31) ^ hash(self.economic)
    value = (value * 31) ^ hash(self.open_date)
    value = (value * 31) ^ hash(self.decorate_date)
    value = (value * 31) ^ hash(self.notes)
    value = (value * 31) ^ hash(self.star_out)
    value = (value * 31) ^ hash(self.credit)
    value = (value * 31) ^ hash(self.lobby_fax)
    value = (value * 31) ^ hash(self.airport_pick_up_service)
    value = (value * 31) ^ hash(self.general_amenities)
    value = (value * 31) ^ hash(self.room_amenitier)
    value = (value * 31) ^ hash(self.recreation_amenities)
    value = (value * 31) ^ hash(self.conference_amenities)
    value = (value * 31) ^ hash(self.dining_amenities)
    value = (value * 31) ^ hash(self.traffic_and_around_informations)
    value = (value * 31) ^ hash(self.surrounding_commerces_list)
    value = (value * 31) ^ hash(self.surrounding_restaurants_list)
    value = (value * 31) ^ hash(self.surrounding_attractions_list)
    value = (value * 31) ^ hash(self.surrounding_shops_list)
    value = (value * 31) ^ hash(self.feature_info)
    value = (value * 31) ^ hash(self.hotel_land_marks_list)
    value = (value * 31) ^ hash(self.lobby_tel)
    value = (value * 31) ^ hash(self.corp_group_id)
    value = (value * 31) ^ hash(self.hotel_brand_id)
    value = (value * 31) ^ hash(self.hotel_amenities)
    value = (value * 31) ^ hash(self.op_date)
    value = (value * 31) ^ hash(self.simple_traffic)
    value = (value * 31) ^ hash(self.simple_traffic_en)
    value = (value * 31) ^ hash(self.meetings)
    value = (value * 31) ^ hash(self.meetings_en)
    value = (value * 31) ^ hash(self.restaurants)
    value = (value * 31) ^ hash(self.restaurants_en)
    value = (value * 31) ^ hash(self.relaxs)
    value = (value * 31) ^ hash(self.relaxs_en)
    value = (value * 31) ^ hash(self.room_amenities)
    value = (value * 31) ^ hash(self.room_amenities_en)
    value = (value * 31) ^ hash(self.hotel_amenities_en)
    value = (value * 31) ^ hash(self.intro_editor_cn)
    value = (value * 31) ^ hash(self.intro_editor_en)
    value = (value * 31) ^ hash(self.hotel_group_id)
    value = (value * 31) ^ hash(self.facility)
    value = (value * 31) ^ hash(self.credit_category_list_en)
    value = (value * 31) ^ hash(self.complain_rate)
    value = (value * 31) ^ hash(self.fmc_rate)
    value = (value * 31) ^ hash(self.iot_rate)
    value = (value * 31) ^ hash(self.index_result_data_col)
    value = (value * 31) ^ hash(self.sum_order)
    value = (value * 31) ^ hash(self.total_comment)
    value = (value * 31) ^ hash(self.good_comment)
    value = (value * 31) ^ hash(self.bad_comment)
    value = (value * 31) ^ hash(self.comment_point32)
    value = (value * 31) ^ hash(self.old_area_id)
    value = (value * 31) ^ hash(self.old_city_id)
    value = (value * 31) ^ hash(self.old_admin_area_id)
    value = (value * 31) ^ hash(self.admin_area_name)
    value = (value * 31) ^ hash(self.days_credit_beign_date)
    value = (value * 31) ^ hash(self.days_credit)
    value = (value * 31) ^ hash(self.area_name)
    value = (value * 31) ^ hash(self.short_name)
    value = (value * 31) ^ hash(self.short_name_en)
    value = (value * 31) ^ hash(self.serve_status)
    value = (value * 31) ^ hash(self.stop_serve_code)
    value = (value * 31) ^ hash(self.sellingpoints)
    value = (value * 31) ^ hash(self.overview)
    value = (value * 31) ^ hash(self.sellingpoints_en)
    value = (value * 31) ^ hash(self.overview_en)
    value = (value * 31) ^ hash(self.hotelfacility)
    value = (value * 31) ^ hash(self.hotelfacility_en)
    value = (value * 31) ^ hash(self.addition_info)
    value = (value * 31) ^ hash(self.service_city_level)
    value = (value * 31) ^ hash(self.rec_reason)
    value = (value * 31) ^ hash(self.nearby_poi_info_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoomAdditionDefine:
  """
  Attributes:
   - addition_id
   - addition_name
   - eaddition_type
   - notes
   - addition_name_en
   - info_type
   - hotel_id
   - room_type_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'addition_id', None, None, ), # 1
    (2, TType.STRING, 'addition_name', None, None, ), # 2
    (3, TType.I32, 'eaddition_type', None, None, ), # 3
    (4, TType.STRING, 'notes', None, None, ), # 4
    (5, TType.STRING, 'addition_name_en', None, None, ), # 5
    (6, TType.I32, 'info_type', None, None, ), # 6
    (7, TType.I32, 'hotel_id', None, None, ), # 7
    (8, TType.I32, 'room_type_id', None, None, ), # 8
  )

  def __init__(self, addition_id=None, addition_name=None, eaddition_type=None, notes=None, addition_name_en=None, info_type=None, hotel_id=None, room_type_id=None,):
    self.addition_id = addition_id
    self.addition_name = addition_name
    self.eaddition_type = eaddition_type
    self.notes = notes
    self.addition_name_en = addition_name_en
    self.info_type = info_type
    self.hotel_id = hotel_id
    self.room_type_id = room_type_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.addition_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.addition_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.eaddition_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.notes = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.addition_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.info_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.room_type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoomAdditionDefine')
    if self.addition_id is not None:
      oprot.writeFieldBegin('addition_id', TType.I64, 1)
      oprot.writeI64(self.addition_id)
      oprot.writeFieldEnd()
    if self.addition_name is not None:
      oprot.writeFieldBegin('addition_name', TType.STRING, 2)
      oprot.writeString(self.addition_name)
      oprot.writeFieldEnd()
    if self.eaddition_type is not None:
      oprot.writeFieldBegin('eaddition_type', TType.I32, 3)
      oprot.writeI32(self.eaddition_type)
      oprot.writeFieldEnd()
    if self.notes is not None:
      oprot.writeFieldBegin('notes', TType.STRING, 4)
      oprot.writeString(self.notes)
      oprot.writeFieldEnd()
    if self.addition_name_en is not None:
      oprot.writeFieldBegin('addition_name_en', TType.STRING, 5)
      oprot.writeString(self.addition_name_en)
      oprot.writeFieldEnd()
    if self.info_type is not None:
      oprot.writeFieldBegin('info_type', TType.I32, 6)
      oprot.writeI32(self.info_type)
      oprot.writeFieldEnd()
    if self.hotel_id is not None:
      oprot.writeFieldBegin('hotel_id', TType.I32, 7)
      oprot.writeI32(self.hotel_id)
      oprot.writeFieldEnd()
    if self.room_type_id is not None:
      oprot.writeFieldBegin('room_type_id', TType.I32, 8)
      oprot.writeI32(self.room_type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addition_id)
    value = (value * 31) ^ hash(self.addition_name)
    value = (value * 31) ^ hash(self.eaddition_type)
    value = (value * 31) ^ hash(self.notes)
    value = (value * 31) ^ hash(self.addition_name_en)
    value = (value * 31) ^ hash(self.info_type)
    value = (value * 31) ^ hash(self.hotel_id)
    value = (value * 31) ^ hash(self.room_type_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MRoomTypeInfo:
  """
  Attributes:
   - rid
   - room_type_id
   - room_type_name
   - room_type_name_en
   - mhotel_id
   - room_type_num
   - room_lines
   - room_unique_id
   - area
   - floor
   - other_notes
   - room_separate_nums
   - i_product_type
   - other_notes_en
   - available
   - facility
   - room_addition_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rid', None, None, ), # 1
    (2, TType.I32, 'room_type_id', None, None, ), # 2
    (3, TType.STRING, 'room_type_name', None, None, ), # 3
    (4, TType.STRING, 'room_type_name_en', None, None, ), # 4
    (5, TType.I32, 'mhotel_id', None, None, ), # 5
    (6, TType.I32, 'room_type_num', None, None, ), # 6
    (7, TType.STRING, 'room_lines', None, None, ), # 7
    (8, TType.STRING, 'room_unique_id', None, None, ), # 8
    (9, TType.STRING, 'area', None, None, ), # 9
    (10, TType.STRING, 'floor', None, None, ), # 10
    (11, TType.STRING, 'other_notes', None, None, ), # 11
    (12, TType.I32, 'room_separate_nums', None, None, ), # 12
    (13, TType.I32, 'i_product_type', None, None, ), # 13
    (14, TType.STRING, 'other_notes_en', None, None, ), # 14
    (15, TType.STRING, 'available', None, None, ), # 15
    (16, TType.STRUCT, 'facility', (StructuredFacilityItem, StructuredFacilityItem.thrift_spec), None, ), # 16
    (17, TType.LIST, 'room_addition_list', (TType.STRUCT,(RoomAdditionDefine, RoomAdditionDefine.thrift_spec)), None, ), # 17
  )

  def __init__(self, rid=None, room_type_id=None, room_type_name=None, room_type_name_en=None, mhotel_id=None, room_type_num=None, room_lines=None, room_unique_id=None, area=None, floor=None, other_notes=None, room_separate_nums=None, i_product_type=None, other_notes_en=None, available=None, facility=None, room_addition_list=None,):
    self.rid = rid
    self.room_type_id = room_type_id
    self.room_type_name = room_type_name
    self.room_type_name_en = room_type_name_en
    self.mhotel_id = mhotel_id
    self.room_type_num = room_type_num
    self.room_lines = room_lines
    self.room_unique_id = room_unique_id
    self.area = area
    self.floor = floor
    self.other_notes = other_notes
    self.room_separate_nums = room_separate_nums
    self.i_product_type = i_product_type
    self.other_notes_en = other_notes_en
    self.available = available
    self.facility = facility
    self.room_addition_list = room_addition_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.room_type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.room_type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.room_type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.room_type_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.room_lines = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.room_unique_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.area = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.floor = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.other_notes = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.room_separate_nums = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.i_product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.other_notes_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.available = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.facility = StructuredFacilityItem()
          self.facility.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.room_addition_list = []
          (_etype887, _size884) = iprot.readListBegin()
          for _i888 in xrange(_size884):
            _elem889 = RoomAdditionDefine()
            _elem889.read(iprot)
            self.room_addition_list.append(_elem889)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MRoomTypeInfo')
    if self.rid is not None:
      oprot.writeFieldBegin('rid', TType.I32, 1)
      oprot.writeI32(self.rid)
      oprot.writeFieldEnd()
    if self.room_type_id is not None:
      oprot.writeFieldBegin('room_type_id', TType.I32, 2)
      oprot.writeI32(self.room_type_id)
      oprot.writeFieldEnd()
    if self.room_type_name is not None:
      oprot.writeFieldBegin('room_type_name', TType.STRING, 3)
      oprot.writeString(self.room_type_name)
      oprot.writeFieldEnd()
    if self.room_type_name_en is not None:
      oprot.writeFieldBegin('room_type_name_en', TType.STRING, 4)
      oprot.writeString(self.room_type_name_en)
      oprot.writeFieldEnd()
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 5)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.room_type_num is not None:
      oprot.writeFieldBegin('room_type_num', TType.I32, 6)
      oprot.writeI32(self.room_type_num)
      oprot.writeFieldEnd()
    if self.room_lines is not None:
      oprot.writeFieldBegin('room_lines', TType.STRING, 7)
      oprot.writeString(self.room_lines)
      oprot.writeFieldEnd()
    if self.room_unique_id is not None:
      oprot.writeFieldBegin('room_unique_id', TType.STRING, 8)
      oprot.writeString(self.room_unique_id)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 9)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.floor is not None:
      oprot.writeFieldBegin('floor', TType.STRING, 10)
      oprot.writeString(self.floor)
      oprot.writeFieldEnd()
    if self.other_notes is not None:
      oprot.writeFieldBegin('other_notes', TType.STRING, 11)
      oprot.writeString(self.other_notes)
      oprot.writeFieldEnd()
    if self.room_separate_nums is not None:
      oprot.writeFieldBegin('room_separate_nums', TType.I32, 12)
      oprot.writeI32(self.room_separate_nums)
      oprot.writeFieldEnd()
    if self.i_product_type is not None:
      oprot.writeFieldBegin('i_product_type', TType.I32, 13)
      oprot.writeI32(self.i_product_type)
      oprot.writeFieldEnd()
    if self.other_notes_en is not None:
      oprot.writeFieldBegin('other_notes_en', TType.STRING, 14)
      oprot.writeString(self.other_notes_en)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.STRING, 15)
      oprot.writeString(self.available)
      oprot.writeFieldEnd()
    if self.facility is not None:
      oprot.writeFieldBegin('facility', TType.STRUCT, 16)
      self.facility.write(oprot)
      oprot.writeFieldEnd()
    if self.room_addition_list is not None:
      oprot.writeFieldBegin('room_addition_list', TType.LIST, 17)
      oprot.writeListBegin(TType.STRUCT, len(self.room_addition_list))
      for iter890 in self.room_addition_list:
        iter890.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rid)
    value = (value * 31) ^ hash(self.room_type_id)
    value = (value * 31) ^ hash(self.room_type_name)
    value = (value * 31) ^ hash(self.room_type_name_en)
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.room_type_num)
    value = (value * 31) ^ hash(self.room_lines)
    value = (value * 31) ^ hash(self.room_unique_id)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.floor)
    value = (value * 31) ^ hash(self.other_notes)
    value = (value * 31) ^ hash(self.room_separate_nums)
    value = (value * 31) ^ hash(self.i_product_type)
    value = (value * 31) ^ hash(self.other_notes_en)
    value = (value * 31) ^ hash(self.available)
    value = (value * 31) ^ hash(self.facility)
    value = (value * 31) ^ hash(self.room_addition_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelInfo:
  """
  Attributes:
   - shotel_id
   - is_reserve
   - auditing_type
   - audit
   - audit_name
   - phone
   - fax
   - contacter
   - auto_send_fax
   - additional_status
   - week_end_start
   - week_end_end
   - week_end_spe
   - bank_info
   - inventory_use_type
   - online_search_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'shotel_id', None, None, ), # 1
    (2, TType.STRING, 'is_reserve', None, None, ), # 2
    (3, TType.I32, 'auditing_type', None, None, ), # 3
    (4, TType.STRING, 'audit', None, None, ), # 4
    (5, TType.STRING, 'audit_name', None, None, ), # 5
    (6, TType.STRING, 'phone', None, None, ), # 6
    (7, TType.STRING, 'fax', None, None, ), # 7
    (8, TType.STRING, 'contacter', None, None, ), # 8
    (9, TType.I32, 'auto_send_fax', None, None, ), # 9
    (10, TType.I64, 'additional_status', None, None, ), # 10
    (11, TType.I32, 'week_end_start', None, None, ), # 11
    (12, TType.I32, 'week_end_end', None, None, ), # 12
    (13, TType.STRING, 'week_end_spe', None, None, ), # 13
    (14, TType.STRING, 'bank_info', None, None, ), # 14
    (15, TType.I32, 'inventory_use_type', None, None, ), # 15
    (16, TType.I32, 'online_search_type', None, None, ), # 16
  )

  def __init__(self, shotel_id=None, is_reserve=None, auditing_type=None, audit=None, audit_name=None, phone=None, fax=None, contacter=None, auto_send_fax=None, additional_status=None, week_end_start=None, week_end_end=None, week_end_spe=None, bank_info=None, inventory_use_type=None, online_search_type=None,):
    self.shotel_id = shotel_id
    self.is_reserve = is_reserve
    self.auditing_type = auditing_type
    self.audit = audit
    self.audit_name = audit_name
    self.phone = phone
    self.fax = fax
    self.contacter = contacter
    self.auto_send_fax = auto_send_fax
    self.additional_status = additional_status
    self.week_end_start = week_end_start
    self.week_end_end = week_end_end
    self.week_end_spe = week_end_spe
    self.bank_info = bank_info
    self.inventory_use_type = inventory_use_type
    self.online_search_type = online_search_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.shotel_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.is_reserve = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.auditing_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.audit = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.audit_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.phone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.fax = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.contacter = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.auto_send_fax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.additional_status = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.week_end_start = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.week_end_end = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.week_end_spe = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.bank_info = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.inventory_use_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.online_search_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelInfo')
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.STRING, 1)
      oprot.writeString(self.shotel_id)
      oprot.writeFieldEnd()
    if self.is_reserve is not None:
      oprot.writeFieldBegin('is_reserve', TType.STRING, 2)
      oprot.writeString(self.is_reserve)
      oprot.writeFieldEnd()
    if self.auditing_type is not None:
      oprot.writeFieldBegin('auditing_type', TType.I32, 3)
      oprot.writeI32(self.auditing_type)
      oprot.writeFieldEnd()
    if self.audit is not None:
      oprot.writeFieldBegin('audit', TType.STRING, 4)
      oprot.writeString(self.audit)
      oprot.writeFieldEnd()
    if self.audit_name is not None:
      oprot.writeFieldBegin('audit_name', TType.STRING, 5)
      oprot.writeString(self.audit_name)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 6)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.fax is not None:
      oprot.writeFieldBegin('fax', TType.STRING, 7)
      oprot.writeString(self.fax)
      oprot.writeFieldEnd()
    if self.contacter is not None:
      oprot.writeFieldBegin('contacter', TType.STRING, 8)
      oprot.writeString(self.contacter)
      oprot.writeFieldEnd()
    if self.auto_send_fax is not None:
      oprot.writeFieldBegin('auto_send_fax', TType.I32, 9)
      oprot.writeI32(self.auto_send_fax)
      oprot.writeFieldEnd()
    if self.additional_status is not None:
      oprot.writeFieldBegin('additional_status', TType.I64, 10)
      oprot.writeI64(self.additional_status)
      oprot.writeFieldEnd()
    if self.week_end_start is not None:
      oprot.writeFieldBegin('week_end_start', TType.I32, 11)
      oprot.writeI32(self.week_end_start)
      oprot.writeFieldEnd()
    if self.week_end_end is not None:
      oprot.writeFieldBegin('week_end_end', TType.I32, 12)
      oprot.writeI32(self.week_end_end)
      oprot.writeFieldEnd()
    if self.week_end_spe is not None:
      oprot.writeFieldBegin('week_end_spe', TType.STRING, 13)
      oprot.writeString(self.week_end_spe)
      oprot.writeFieldEnd()
    if self.bank_info is not None:
      oprot.writeFieldBegin('bank_info', TType.STRING, 14)
      oprot.writeString(self.bank_info)
      oprot.writeFieldEnd()
    if self.inventory_use_type is not None:
      oprot.writeFieldBegin('inventory_use_type', TType.I32, 15)
      oprot.writeI32(self.inventory_use_type)
      oprot.writeFieldEnd()
    if self.online_search_type is not None:
      oprot.writeFieldBegin('online_search_type', TType.I32, 16)
      oprot.writeI32(self.online_search_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.is_reserve)
    value = (value * 31) ^ hash(self.auditing_type)
    value = (value * 31) ^ hash(self.audit)
    value = (value * 31) ^ hash(self.audit_name)
    value = (value * 31) ^ hash(self.phone)
    value = (value * 31) ^ hash(self.fax)
    value = (value * 31) ^ hash(self.contacter)
    value = (value * 31) ^ hash(self.auto_send_fax)
    value = (value * 31) ^ hash(self.additional_status)
    value = (value * 31) ^ hash(self.week_end_start)
    value = (value * 31) ^ hash(self.week_end_end)
    value = (value * 31) ^ hash(self.week_end_spe)
    value = (value * 31) ^ hash(self.bank_info)
    value = (value * 31) ^ hash(self.inventory_use_type)
    value = (value * 31) ^ hash(self.online_search_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SRoomTypeInfo:
  """
  Attributes:
   - room_type_id
   - room_type_name
   - shotel_id
   - i_product_type
   - available
   - mroom_type_id
   - suffix_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'room_type_id', None, None, ), # 1
    (2, TType.STRING, 'room_type_name', None, None, ), # 2
    (3, TType.STRING, 'shotel_id', None, None, ), # 3
    (4, TType.I32, 'i_product_type', None, None, ), # 4
    (5, TType.STRING, 'available', None, None, ), # 5
    (6, TType.STRING, 'mroom_type_id', None, None, ), # 6
    (7, TType.STRING, 'suffix_name', None, None, ), # 7
  )

  def __init__(self, room_type_id=None, room_type_name=None, shotel_id=None, i_product_type=None, available=None, mroom_type_id=None, suffix_name=None,):
    self.room_type_id = room_type_id
    self.room_type_name = room_type_name
    self.shotel_id = shotel_id
    self.i_product_type = i_product_type
    self.available = available
    self.mroom_type_id = mroom_type_id
    self.suffix_name = suffix_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.room_type_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.room_type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.shotel_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.i_product_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.available = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mroom_type_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.suffix_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SRoomTypeInfo')
    if self.room_type_id is not None:
      oprot.writeFieldBegin('room_type_id', TType.STRING, 1)
      oprot.writeString(self.room_type_id)
      oprot.writeFieldEnd()
    if self.room_type_name is not None:
      oprot.writeFieldBegin('room_type_name', TType.STRING, 2)
      oprot.writeString(self.room_type_name)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.STRING, 3)
      oprot.writeString(self.shotel_id)
      oprot.writeFieldEnd()
    if self.i_product_type is not None:
      oprot.writeFieldBegin('i_product_type', TType.I32, 4)
      oprot.writeI32(self.i_product_type)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.STRING, 5)
      oprot.writeString(self.available)
      oprot.writeFieldEnd()
    if self.mroom_type_id is not None:
      oprot.writeFieldBegin('mroom_type_id', TType.STRING, 6)
      oprot.writeString(self.mroom_type_id)
      oprot.writeFieldEnd()
    if self.suffix_name is not None:
      oprot.writeFieldBegin('suffix_name', TType.STRING, 7)
      oprot.writeString(self.suffix_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.room_type_id)
    value = (value * 31) ^ hash(self.room_type_name)
    value = (value * 31) ^ hash(self.shotel_id)
    value = (value * 31) ^ hash(self.i_product_type)
    value = (value * 31) ^ hash(self.available)
    value = (value * 31) ^ hash(self.mroom_type_id)
    value = (value * 31) ^ hash(self.suffix_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SupplierInfo:
  """
  Attributes:
   - supplier_id
   - supplier_name
   - supplier_abbr
   - supplier_code
   - enabled
   - remark
   - address
   - post_code
   - post_address
   - is_prepay
   - is_direct_link
   - agreement_entity_id
   - type
   - self_operate
   - channel
   - additional_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'supplier_id', None, None, ), # 1
    (2, TType.STRING, 'supplier_name', None, None, ), # 2
    (3, TType.STRING, 'supplier_abbr', None, None, ), # 3
    (4, TType.STRING, 'supplier_code', None, None, ), # 4
    (5, TType.BOOL, 'enabled', None, None, ), # 5
    (6, TType.STRING, 'remark', None, None, ), # 6
    (7, TType.STRING, 'address', None, None, ), # 7
    (8, TType.STRING, 'post_code', None, None, ), # 8
    (9, TType.STRING, 'post_address', None, None, ), # 9
    (10, TType.BOOL, 'is_prepay', None, None, ), # 10
    (11, TType.BOOL, 'is_direct_link', None, None, ), # 11
    (12, TType.I32, 'agreement_entity_id', None, None, ), # 12
    (13, TType.I32, 'type', None, None, ), # 13
    (14, TType.STRING, 'self_operate', None, None, ), # 14
    (15, TType.I32, 'channel', None, None, ), # 15
    (16, TType.I64, 'additional_status', None, None, ), # 16
  )

  def __init__(self, supplier_id=None, supplier_name=None, supplier_abbr=None, supplier_code=None, enabled=None, remark=None, address=None, post_code=None, post_address=None, is_prepay=None, is_direct_link=None, agreement_entity_id=None, type=None, self_operate=None, channel=None, additional_status=None,):
    self.supplier_id = supplier_id
    self.supplier_name = supplier_name
    self.supplier_abbr = supplier_abbr
    self.supplier_code = supplier_code
    self.enabled = enabled
    self.remark = remark
    self.address = address
    self.post_code = post_code
    self.post_address = post_address
    self.is_prepay = is_prepay
    self.is_direct_link = is_direct_link
    self.agreement_entity_id = agreement_entity_id
    self.type = type
    self.self_operate = self_operate
    self.channel = channel
    self.additional_status = additional_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.supplier_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.supplier_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.supplier_abbr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.supplier_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.remark = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.post_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.post_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.is_prepay = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.is_direct_link = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.agreement_entity_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.self_operate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.channel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.additional_status = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SupplierInfo')
    if self.supplier_id is not None:
      oprot.writeFieldBegin('supplier_id', TType.I32, 1)
      oprot.writeI32(self.supplier_id)
      oprot.writeFieldEnd()
    if self.supplier_name is not None:
      oprot.writeFieldBegin('supplier_name', TType.STRING, 2)
      oprot.writeString(self.supplier_name)
      oprot.writeFieldEnd()
    if self.supplier_abbr is not None:
      oprot.writeFieldBegin('supplier_abbr', TType.STRING, 3)
      oprot.writeString(self.supplier_abbr)
      oprot.writeFieldEnd()
    if self.supplier_code is not None:
      oprot.writeFieldBegin('supplier_code', TType.STRING, 4)
      oprot.writeString(self.supplier_code)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 5)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.remark is not None:
      oprot.writeFieldBegin('remark', TType.STRING, 6)
      oprot.writeString(self.remark)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 7)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.post_code is not None:
      oprot.writeFieldBegin('post_code', TType.STRING, 8)
      oprot.writeString(self.post_code)
      oprot.writeFieldEnd()
    if self.post_address is not None:
      oprot.writeFieldBegin('post_address', TType.STRING, 9)
      oprot.writeString(self.post_address)
      oprot.writeFieldEnd()
    if self.is_prepay is not None:
      oprot.writeFieldBegin('is_prepay', TType.BOOL, 10)
      oprot.writeBool(self.is_prepay)
      oprot.writeFieldEnd()
    if self.is_direct_link is not None:
      oprot.writeFieldBegin('is_direct_link', TType.BOOL, 11)
      oprot.writeBool(self.is_direct_link)
      oprot.writeFieldEnd()
    if self.agreement_entity_id is not None:
      oprot.writeFieldBegin('agreement_entity_id', TType.I32, 12)
      oprot.writeI32(self.agreement_entity_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 13)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.self_operate is not None:
      oprot.writeFieldBegin('self_operate', TType.STRING, 14)
      oprot.writeString(self.self_operate)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 15)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.additional_status is not None:
      oprot.writeFieldBegin('additional_status', TType.I64, 16)
      oprot.writeI64(self.additional_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.supplier_id)
    value = (value * 31) ^ hash(self.supplier_name)
    value = (value * 31) ^ hash(self.supplier_abbr)
    value = (value * 31) ^ hash(self.supplier_code)
    value = (value * 31) ^ hash(self.enabled)
    value = (value * 31) ^ hash(self.remark)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.post_code)
    value = (value * 31) ^ hash(self.post_address)
    value = (value * 31) ^ hash(self.is_prepay)
    value = (value * 31) ^ hash(self.is_direct_link)
    value = (value * 31) ^ hash(self.agreement_entity_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.self_operate)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.additional_status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SHotelProductInfo:
  """
  Attributes:
   - shotel_base_info
   - shotel_supplier_info
   - hotel_special_info
   - hotel_special_info_start_date
   - hotel_special_info_end_date
   - room_base_infos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'shotel_base_info', (SHotelInfo, SHotelInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'shotel_supplier_info', (SupplierInfo, SupplierInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'hotel_special_info', None, None, ), # 3
    (4, TType.STRING, 'hotel_special_info_start_date', None, None, ), # 4
    (5, TType.STRING, 'hotel_special_info_end_date', None, None, ), # 5
    (6, TType.LIST, 'room_base_infos', (TType.STRUCT,(SRoomTypeInfo, SRoomTypeInfo.thrift_spec)), None, ), # 6
  )

  def __init__(self, shotel_base_info=None, shotel_supplier_info=None, hotel_special_info=None, hotel_special_info_start_date=None, hotel_special_info_end_date=None, room_base_infos=None,):
    self.shotel_base_info = shotel_base_info
    self.shotel_supplier_info = shotel_supplier_info
    self.hotel_special_info = hotel_special_info
    self.hotel_special_info_start_date = hotel_special_info_start_date
    self.hotel_special_info_end_date = hotel_special_info_end_date
    self.room_base_infos = room_base_infos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.shotel_base_info = SHotelInfo()
          self.shotel_base_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.shotel_supplier_info = SupplierInfo()
          self.shotel_supplier_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hotel_special_info = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hotel_special_info_start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hotel_special_info_end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.room_base_infos = []
          (_etype894, _size891) = iprot.readListBegin()
          for _i895 in xrange(_size891):
            _elem896 = SRoomTypeInfo()
            _elem896.read(iprot)
            self.room_base_infos.append(_elem896)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SHotelProductInfo')
    if self.shotel_base_info is not None:
      oprot.writeFieldBegin('shotel_base_info', TType.STRUCT, 1)
      self.shotel_base_info.write(oprot)
      oprot.writeFieldEnd()
    if self.shotel_supplier_info is not None:
      oprot.writeFieldBegin('shotel_supplier_info', TType.STRUCT, 2)
      self.shotel_supplier_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_special_info is not None:
      oprot.writeFieldBegin('hotel_special_info', TType.STRING, 3)
      oprot.writeString(self.hotel_special_info)
      oprot.writeFieldEnd()
    if self.hotel_special_info_start_date is not None:
      oprot.writeFieldBegin('hotel_special_info_start_date', TType.STRING, 4)
      oprot.writeString(self.hotel_special_info_start_date)
      oprot.writeFieldEnd()
    if self.hotel_special_info_end_date is not None:
      oprot.writeFieldBegin('hotel_special_info_end_date', TType.STRING, 5)
      oprot.writeString(self.hotel_special_info_end_date)
      oprot.writeFieldEnd()
    if self.room_base_infos is not None:
      oprot.writeFieldBegin('room_base_infos', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.room_base_infos))
      for iter897 in self.room_base_infos:
        iter897.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shotel_base_info)
    value = (value * 31) ^ hash(self.shotel_supplier_info)
    value = (value * 31) ^ hash(self.hotel_special_info)
    value = (value * 31) ^ hash(self.hotel_special_info_start_date)
    value = (value * 31) ^ hash(self.hotel_special_info_end_date)
    value = (value * 31) ^ hash(self.room_base_infos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StaticDetail:
  """
  Attributes:
   - mHotel_base_info
   - mroom_type_list
   - hotel_facility_list
   - shotel_list
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'mHotel_base_info', (MHotelInfo, MHotelInfo.thrift_spec), None, ), # 1
    (2, TType.LIST, 'mroom_type_list', (TType.STRUCT,(MRoomTypeInfo, MRoomTypeInfo.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'hotel_facility_list', (TType.STRUCT,(HotelFacilities, HotelFacilities.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'shotel_list', (TType.STRUCT,(SHotelProductInfo, SHotelProductInfo.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'create_time', None, None, ), # 5
  )

  def __init__(self, mHotel_base_info=None, mroom_type_list=None, hotel_facility_list=None, shotel_list=None, create_time=None,):
    self.mHotel_base_info = mHotel_base_info
    self.mroom_type_list = mroom_type_list
    self.hotel_facility_list = hotel_facility_list
    self.shotel_list = shotel_list
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.mHotel_base_info = MHotelInfo()
          self.mHotel_base_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.mroom_type_list = []
          (_etype901, _size898) = iprot.readListBegin()
          for _i902 in xrange(_size898):
            _elem903 = MRoomTypeInfo()
            _elem903.read(iprot)
            self.mroom_type_list.append(_elem903)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.hotel_facility_list = []
          (_etype907, _size904) = iprot.readListBegin()
          for _i908 in xrange(_size904):
            _elem909 = HotelFacilities()
            _elem909.read(iprot)
            self.hotel_facility_list.append(_elem909)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.shotel_list = []
          (_etype913, _size910) = iprot.readListBegin()
          for _i914 in xrange(_size910):
            _elem915 = SHotelProductInfo()
            _elem915.read(iprot)
            self.shotel_list.append(_elem915)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StaticDetail')
    if self.mHotel_base_info is not None:
      oprot.writeFieldBegin('mHotel_base_info', TType.STRUCT, 1)
      self.mHotel_base_info.write(oprot)
      oprot.writeFieldEnd()
    if self.mroom_type_list is not None:
      oprot.writeFieldBegin('mroom_type_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.mroom_type_list))
      for iter916 in self.mroom_type_list:
        iter916.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_facility_list is not None:
      oprot.writeFieldBegin('hotel_facility_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_facility_list))
      for iter917 in self.hotel_facility_list:
        iter917.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_list is not None:
      oprot.writeFieldBegin('shotel_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_list))
      for iter918 in self.shotel_list:
        iter918.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 5)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mHotel_base_info)
    value = (value * 31) ^ hash(self.mroom_type_list)
    value = (value * 31) ^ hash(self.hotel_facility_list)
    value = (value * 31) ^ hash(self.shotel_list)
    value = (value * 31) ^ hash(self.create_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LongcuiMessage:
  """
  Attributes:
   - has_longcuionly
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_longcuionly', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_longcuionly=None, type=None,):
    self.has_longcuionly = has_longcuionly
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_longcuionly = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LongcuiMessage')
    if self.has_longcuionly is not None:
      oprot.writeFieldBegin('has_longcuionly', TType.BOOL, 1)
      oprot.writeBool(self.has_longcuionly)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_longcuionly)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TejiaMessage:
  """
  Attributes:
   - has_weifang
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_weifang', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_weifang=None, type=None,):
    self.has_weifang = has_weifang
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_weifang = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TejiaMessage')
    if self.has_weifang is not None:
      oprot.writeFieldBegin('has_weifang', TType.BOOL, 1)
      oprot.writeBool(self.has_weifang)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_weifang)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DanbaoMessage:
  """
  Attributes:
   - need_guarantee
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'need_guarantee', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, need_guarantee=None, type=None,):
    self.need_guarantee = need_guarantee
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.need_guarantee = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DanbaoMessage')
    if self.need_guarantee is not None:
      oprot.writeFieldBegin('need_guarantee', TType.BOOL, 1)
      oprot.writeBool(self.need_guarantee)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.need_guarantee)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MobileOnlyMessage:
  """
  Attributes:
   - has_mobileonly
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_mobileonly', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_mobileonly=None, type=None,):
    self.has_mobileonly = has_mobileonly
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_mobileonly = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MobileOnlyMessage')
    if self.has_mobileonly is not None:
      oprot.writeFieldBegin('has_mobileonly', TType.BOOL, 1)
      oprot.writeBool(self.has_mobileonly)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_mobileonly)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ZhoubianProduct:
  """
  Attributes:
   - has_zhoubian_pro
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_zhoubian_pro', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
  )

  def __init__(self, has_zhoubian_pro=None, type=None,):
    self.has_zhoubian_pro = has_zhoubian_pro
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_zhoubian_pro = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ZhoubianProduct')
    if self.has_zhoubian_pro is not None:
      oprot.writeFieldBegin('has_zhoubian_pro', TType.BOOL, 1)
      oprot.writeBool(self.has_zhoubian_pro)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_zhoubian_pro)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponMessage:
  """
  Attributes:
   - has_coupon
   - upper_limit
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_coupon', None, None, ), # 1
    (2, TType.DOUBLE, 'upper_limit', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
  )

  def __init__(self, has_coupon=None, upper_limit=None, type=None,):
    self.has_coupon = has_coupon
    self.upper_limit = upper_limit
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_coupon = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponMessage')
    if self.has_coupon is not None:
      oprot.writeFieldBegin('has_coupon', TType.BOOL, 1)
      oprot.writeBool(self.has_coupon)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 2)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_coupon)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HongBaoMessage:
  """
  Attributes:
   - has_hongbao
   - upper_limit
   - type
   - promotion_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_hongbao', None, None, ), # 1
    (2, TType.DOUBLE, 'upper_limit', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I32, 'promotion_type', None, None, ), # 4
  )

  def __init__(self, has_hongbao=None, upper_limit=None, type=None, promotion_type=None,):
    self.has_hongbao = has_hongbao
    self.upper_limit = upper_limit
    self.type = type
    self.promotion_type = promotion_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_hongbao = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HongBaoMessage')
    if self.has_hongbao is not None:
      oprot.writeFieldBegin('has_hongbao', TType.BOOL, 1)
      oprot.writeBool(self.has_hongbao)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 2)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 4)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.has_hongbao)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.promotion_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DistancePoi:
  """
  Attributes:
   - id
   - old_id
   - location
   - name
   - distance
   - bigpoi_name
   - rank_score
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'old_id', None, None, ), # 2
    (3, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.I32, 'distance', None, None, ), # 5
    (6, TType.STRING, 'bigpoi_name', None, None, ), # 6
    (7, TType.I32, 'rank_score', None, None, ), # 7
  )

  def __init__(self, id=None, old_id=None, location=None, name=None, distance=None, bigpoi_name=None, rank_score=None,):
    self.id = id
    self.old_id = old_id
    self.location = location
    self.name = name
    self.distance = distance
    self.bigpoi_name = bigpoi_name
    self.rank_score = rank_score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.old_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bigpoi_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rank_score = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DistancePoi')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I64, 2)
      oprot.writeI64(self.old_id)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 3)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.I32, 5)
      oprot.writeI32(self.distance)
      oprot.writeFieldEnd()
    if self.bigpoi_name is not None:
      oprot.writeFieldBegin('bigpoi_name', TType.STRING, 6)
      oprot.writeString(self.bigpoi_name)
      oprot.writeFieldEnd()
    if self.rank_score is not None:
      oprot.writeFieldBegin('rank_score', TType.I32, 7)
      oprot.writeI32(self.rank_score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.bigpoi_name)
    value = (value * 31) ^ hash(self.rank_score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTag:
  """
  Attributes:
   - tag_id
   - tag_name
   - priority_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'tag_id', None, None, ), # 1
    (2, TType.STRING, 'tag_name', None, None, ), # 2
    (3, TType.I32, 'priority_level', None, None, ), # 3
  )

  def __init__(self, tag_id=None, tag_name=None, priority_level=None,):
    self.tag_id = tag_id
    self.tag_name = tag_name
    self.priority_level = priority_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.tag_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tag_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.priority_level = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTag')
    if self.tag_id is not None:
      oprot.writeFieldBegin('tag_id', TType.I32, 1)
      oprot.writeI32(self.tag_id)
      oprot.writeFieldEnd()
    if self.tag_name is not None:
      oprot.writeFieldBegin('tag_name', TType.STRING, 2)
      oprot.writeString(self.tag_name)
      oprot.writeFieldEnd()
    if self.priority_level is not None:
      oprot.writeFieldBegin('priority_level', TType.I32, 3)
      oprot.writeI32(self.priority_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tag_id)
    value = (value * 31) ^ hash(self.tag_name)
    value = (value * 31) ^ hash(self.priority_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelFlag:
  """
  Attributes:
   - flag_type
   - effective
   - object
   - upper_limit
   - promotion_type
   - promotion_description
   - price
   - discount_rates
   - low_discount_rate
   - high_sub
   - activity_tags
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flag_type', None, None, ), # 1
    (2, TType.BOOL, 'effective', None, None, ), # 2
    (3, TType.I32, 'object', None, None, ), # 3
    (4, TType.DOUBLE, 'upper_limit', None, None, ), # 4
    (5, TType.I32, 'promotion_type', None, None, ), # 5
    (6, TType.LIST, 'promotion_description', (TType.STRUCT,(PromotionDescription, PromotionDescription.thrift_spec)), None, ), # 6
    (7, TType.I32, 'price', None, None, ), # 7
    (8, TType.LIST, 'discount_rates', (TType.DOUBLE,None), None, ), # 8
    (9, TType.DOUBLE, 'low_discount_rate', None, None, ), # 9
    (10, TType.I32, 'high_sub', None, None, ), # 10
    (11, TType.LIST, 'activity_tags', (TType.STRUCT,(ActivityTag, ActivityTag.thrift_spec)), None, ), # 11
  )

  def __init__(self, flag_type=None, effective=None, object=None, upper_limit=None, promotion_type=None, promotion_description=None, price=None, discount_rates=None, low_discount_rate=None, high_sub=None, activity_tags=None,):
    self.flag_type = flag_type
    self.effective = effective
    self.object = object
    self.upper_limit = upper_limit
    self.promotion_type = promotion_type
    self.promotion_description = promotion_description
    self.price = price
    self.discount_rates = discount_rates
    self.low_discount_rate = low_discount_rate
    self.high_sub = high_sub
    self.activity_tags = activity_tags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flag_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.effective = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.object = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.upper_limit = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.promotion_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.promotion_description = []
          (_etype922, _size919) = iprot.readListBegin()
          for _i923 in xrange(_size919):
            _elem924 = PromotionDescription()
            _elem924.read(iprot)
            self.promotion_description.append(_elem924)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.discount_rates = []
          (_etype928, _size925) = iprot.readListBegin()
          for _i929 in xrange(_size925):
            _elem930 = iprot.readDouble()
            self.discount_rates.append(_elem930)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.low_discount_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.high_sub = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.activity_tags = []
          (_etype934, _size931) = iprot.readListBegin()
          for _i935 in xrange(_size931):
            _elem936 = ActivityTag()
            _elem936.read(iprot)
            self.activity_tags.append(_elem936)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelFlag')
    if self.flag_type is not None:
      oprot.writeFieldBegin('flag_type', TType.I32, 1)
      oprot.writeI32(self.flag_type)
      oprot.writeFieldEnd()
    if self.effective is not None:
      oprot.writeFieldBegin('effective', TType.BOOL, 2)
      oprot.writeBool(self.effective)
      oprot.writeFieldEnd()
    if self.object is not None:
      oprot.writeFieldBegin('object', TType.I32, 3)
      oprot.writeI32(self.object)
      oprot.writeFieldEnd()
    if self.upper_limit is not None:
      oprot.writeFieldBegin('upper_limit', TType.DOUBLE, 4)
      oprot.writeDouble(self.upper_limit)
      oprot.writeFieldEnd()
    if self.promotion_type is not None:
      oprot.writeFieldBegin('promotion_type', TType.I32, 5)
      oprot.writeI32(self.promotion_type)
      oprot.writeFieldEnd()
    if self.promotion_description is not None:
      oprot.writeFieldBegin('promotion_description', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_description))
      for iter937 in self.promotion_description:
        iter937.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 7)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.discount_rates is not None:
      oprot.writeFieldBegin('discount_rates', TType.LIST, 8)
      oprot.writeListBegin(TType.DOUBLE, len(self.discount_rates))
      for iter938 in self.discount_rates:
        oprot.writeDouble(iter938)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.low_discount_rate is not None:
      oprot.writeFieldBegin('low_discount_rate', TType.DOUBLE, 9)
      oprot.writeDouble(self.low_discount_rate)
      oprot.writeFieldEnd()
    if self.high_sub is not None:
      oprot.writeFieldBegin('high_sub', TType.I32, 10)
      oprot.writeI32(self.high_sub)
      oprot.writeFieldEnd()
    if self.activity_tags is not None:
      oprot.writeFieldBegin('activity_tags', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.activity_tags))
      for iter939 in self.activity_tags:
        iter939.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.flag_type is None:
      raise TProtocol.TProtocolException(message='Required field flag_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flag_type)
    value = (value * 31) ^ hash(self.effective)
    value = (value * 31) ^ hash(self.object)
    value = (value * 31) ^ hash(self.upper_limit)
    value = (value * 31) ^ hash(self.promotion_type)
    value = (value * 31) ^ hash(self.promotion_description)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.discount_rates)
    value = (value * 31) ^ hash(self.low_discount_rate)
    value = (value * 31) ^ hash(self.high_sub)
    value = (value * 31) ^ hash(self.activity_tags)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MinPriceInfo:
  """
  Attributes:
   - type
   - min_price
   - min_price_rpid
   - min_price_sroomid
   - min_price_mroomid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'min_price', None, None, ), # 2
    (3, TType.I64, 'min_price_rpid', None, None, ), # 3
    (4, TType.I32, 'min_price_sroomid', None, None, ), # 4
    (5, TType.I32, 'min_price_mroomid', None, None, ), # 5
  )

  def __init__(self, type=None, min_price=None, min_price_rpid=None, min_price_sroomid=None, min_price_mroomid=None,):
    self.type = type
    self.min_price = min_price
    self.min_price_rpid = min_price_rpid
    self.min_price_sroomid = min_price_sroomid
    self.min_price_mroomid = min_price_mroomid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.min_price_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.min_price_sroomid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.min_price_mroomid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MinPriceInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.min_price is not None:
      oprot.writeFieldBegin('min_price', TType.I32, 2)
      oprot.writeI32(self.min_price)
      oprot.writeFieldEnd()
    if self.min_price_rpid is not None:
      oprot.writeFieldBegin('min_price_rpid', TType.I64, 3)
      oprot.writeI64(self.min_price_rpid)
      oprot.writeFieldEnd()
    if self.min_price_sroomid is not None:
      oprot.writeFieldBegin('min_price_sroomid', TType.I32, 4)
      oprot.writeI32(self.min_price_sroomid)
      oprot.writeFieldEnd()
    if self.min_price_mroomid is not None:
      oprot.writeFieldBegin('min_price_mroomid', TType.I32, 5)
      oprot.writeI32(self.min_price_mroomid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.min_price)
    value = (value * 31) ^ hash(self.min_price_rpid)
    value = (value * 31) ^ hash(self.min_price_sroomid)
    value = (value * 31) ^ hash(self.min_price_mroomid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IncidentalPriceInfo:
  """
  Attributes:
   - min_price_cansale_sub_coupon_origin
   - min_price_cansale_sub_coupon
   - min_price_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'min_price_cansale_sub_coupon_origin', None, None, ), # 1
    (2, TType.I32, 'min_price_cansale_sub_coupon', None, None, ), # 2
    (3, TType.LIST, 'min_price_info', (TType.STRUCT,(MinPriceInfo, MinPriceInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, min_price_cansale_sub_coupon_origin=None, min_price_cansale_sub_coupon=None, min_price_info=None,):
    self.min_price_cansale_sub_coupon_origin = min_price_cansale_sub_coupon_origin
    self.min_price_cansale_sub_coupon = min_price_cansale_sub_coupon
    self.min_price_info = min_price_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.min_price_cansale_sub_coupon_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.min_price_cansale_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.min_price_info = []
          (_etype943, _size940) = iprot.readListBegin()
          for _i944 in xrange(_size940):
            _elem945 = MinPriceInfo()
            _elem945.read(iprot)
            self.min_price_info.append(_elem945)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IncidentalPriceInfo')
    if self.min_price_cansale_sub_coupon_origin is not None:
      oprot.writeFieldBegin('min_price_cansale_sub_coupon_origin', TType.I32, 1)
      oprot.writeI32(self.min_price_cansale_sub_coupon_origin)
      oprot.writeFieldEnd()
    if self.min_price_cansale_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_cansale_sub_coupon', TType.I32, 2)
      oprot.writeI32(self.min_price_cansale_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_info is not None:
      oprot.writeFieldBegin('min_price_info', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_info))
      for iter946 in self.min_price_info:
        iter946.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_price_cansale_sub_coupon_origin)
    value = (value * 31) ^ hash(self.min_price_cansale_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankDebug:
  """
  Attributes:
   - mhotel_id
   - base_hotel_id
   - model_score
   - min_price_sub_coupon
   - min_price_product_cost
   - position
   - default_score
   - feature_vector
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mhotel_id', None, None, ), # 1
    (2, TType.I32, 'base_hotel_id', None, None, ), # 2
    (3, TType.DOUBLE, 'model_score', None, None, ), # 3
    (4, TType.DOUBLE, 'min_price_sub_coupon', None, None, ), # 4
    (5, TType.DOUBLE, 'min_price_product_cost', None, None, ), # 5
    (6, TType.I32, 'position', None, None, ), # 6
    (7, TType.I32, 'default_score', None, None, ), # 7
    (8, TType.STRING, 'feature_vector', None, None, ), # 8
  )

  def __init__(self, mhotel_id=None, base_hotel_id=None, model_score=None, min_price_sub_coupon=None, min_price_product_cost=None, position=None, default_score=None, feature_vector=None,):
    self.mhotel_id = mhotel_id
    self.base_hotel_id = base_hotel_id
    self.model_score = model_score
    self.min_price_sub_coupon = min_price_sub_coupon
    self.min_price_product_cost = min_price_product_cost
    self.position = position
    self.default_score = default_score
    self.feature_vector = feature_vector

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mhotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base_hotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.model_score = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.min_price_sub_coupon = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.min_price_product_cost = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.position = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.default_score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.feature_vector = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankDebug')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I32, 1)
      oprot.writeI32(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.base_hotel_id is not None:
      oprot.writeFieldBegin('base_hotel_id', TType.I32, 2)
      oprot.writeI32(self.base_hotel_id)
      oprot.writeFieldEnd()
    if self.model_score is not None:
      oprot.writeFieldBegin('model_score', TType.DOUBLE, 3)
      oprot.writeDouble(self.model_score)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_sub_coupon', TType.DOUBLE, 4)
      oprot.writeDouble(self.min_price_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_product_cost is not None:
      oprot.writeFieldBegin('min_price_product_cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.min_price_product_cost)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I32, 6)
      oprot.writeI32(self.position)
      oprot.writeFieldEnd()
    if self.default_score is not None:
      oprot.writeFieldBegin('default_score', TType.I32, 7)
      oprot.writeI32(self.default_score)
      oprot.writeFieldEnd()
    if self.feature_vector is not None:
      oprot.writeFieldBegin('feature_vector', TType.STRING, 8)
      oprot.writeString(self.feature_vector)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.base_hotel_id)
    value = (value * 31) ^ hash(self.model_score)
    value = (value * 31) ^ hash(self.min_price_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_product_cost)
    value = (value * 31) ^ hash(self.position)
    value = (value * 31) ^ hash(self.default_score)
    value = (value * 31) ^ hash(self.feature_vector)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomizedProductInfo:
  """
  Attributes:
   - type
   - price
   - price_sub_coupon
   - roomtypeid
   - rateplan_id
   - mroom_id
   - shotel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'price', None, None, ), # 2
    (3, TType.I32, 'price_sub_coupon', None, None, ), # 3
    (4, TType.I64, 'roomtypeid', None, None, ), # 4
    (5, TType.I64, 'rateplan_id', None, None, ), # 5
    (6, TType.I64, 'mroom_id', None, None, ), # 6
    (7, TType.I32, 'shotel_id', None, None, ), # 7
  )

  def __init__(self, type=None, price=None, price_sub_coupon=None, roomtypeid=None, rateplan_id=None, mroom_id=None, shotel_id=None,):
    self.type = type
    self.price = price
    self.price_sub_coupon = price_sub_coupon
    self.roomtypeid = roomtypeid
    self.rateplan_id = rateplan_id
    self.mroom_id = mroom_id
    self.shotel_id = shotel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.rateplan_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.mroom_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.shotel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomizedProductInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 2)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.price_sub_coupon is not None:
      oprot.writeFieldBegin('price_sub_coupon', TType.I32, 3)
      oprot.writeI32(self.price_sub_coupon)
      oprot.writeFieldEnd()
    if self.roomtypeid is not None:
      oprot.writeFieldBegin('roomtypeid', TType.I64, 4)
      oprot.writeI64(self.roomtypeid)
      oprot.writeFieldEnd()
    if self.rateplan_id is not None:
      oprot.writeFieldBegin('rateplan_id', TType.I64, 5)
      oprot.writeI64(self.rateplan_id)
      oprot.writeFieldEnd()
    if self.mroom_id is not None:
      oprot.writeFieldBegin('mroom_id', TType.I64, 6)
      oprot.writeI64(self.mroom_id)
      oprot.writeFieldEnd()
    if self.shotel_id is not None:
      oprot.writeFieldBegin('shotel_id', TType.I32, 7)
      oprot.writeI32(self.shotel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.price_sub_coupon)
    value = (value * 31) ^ hash(self.roomtypeid)
    value = (value * 31) ^ hash(self.rateplan_id)
    value = (value * 31) ^ hash(self.mroom_id)
    value = (value * 31) ^ hash(self.shotel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatisticsInfo:
  """
  Attributes:
   - type
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, type=None, count=None,):
    self.type = type
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatisticsInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecallReason:
  """
  Attributes:
   - id
   - name
   - distance
   - geo
   - introduce
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'distance', None, None, ), # 3
    (4, TType.STRUCT, 'geo', (GeoInfo, GeoInfo.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'introduce', (NearByPoiInfo, NearByPoiInfo.thrift_spec), None, ), # 5
  )

  def __init__(self, id=None, name=None, distance=None, geo=None, introduce=None,):
    self.id = id
    self.name = name
    self.distance = distance
    self.geo = geo
    self.introduce = introduce

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.geo = GeoInfo()
          self.geo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.introduce = NearByPoiInfo()
          self.introduce.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecallReason')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.I32, 3)
      oprot.writeI32(self.distance)
      oprot.writeFieldEnd()
    if self.geo is not None:
      oprot.writeFieldBegin('geo', TType.STRUCT, 4)
      self.geo.write(oprot)
      oprot.writeFieldEnd()
    if self.introduce is not None:
      oprot.writeFieldBegin('introduce', TType.STRUCT, 5)
      self.introduce.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.geo)
    value = (value * 31) ^ hash(self.introduce)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecallInfo:
  """
  Attributes:
   - type
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'reason', (RecallReason, RecallReason.thrift_spec), None, ), # 2
  )

  def __init__(self, type=None, reason=None,):
    self.type = type
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reason = RecallReason()
          self.reason.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecallInfo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRUCT, 2)
      self.reason.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.reason)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotelDetail:
  """
  Attributes:
   - mhotel_id
   - has_drr
   - longcui_info
   - weifang_info
   - inventory_type
   - min_price
   - min_price_rpid
   - min_price_roomtypeid
   - need_guarantee
   - product_count
   - promotion_type_count
   - room_types
   - shotel_helpfultips
   - shotel_booking_rules
   - hotel_static_info
   - distance
   - hotel_service_status
   - tuan_gou
   - shotel_invoice_info
   - mobileonly_message
   - has_yufu
   - product_count_reason
   - coupon_message
   - product_can_be_showed
   - distance_poi
   - has_timerush_product
   - min_price_pro_relation_price
   - min_price_mroomtypeid
   - hongbao_message
   - is_hotel_inventory_full
   - mroom_count
   - zhoubian_message
   - has_buy5send1_promotion
   - has_halfdiscount_promotion
   - min_price_sub_coupon
   - min_price_sub_coupon_rpid
   - min_price_sub_coupon_roomtypeid
   - min_price_sub_coupon_mroomtypeid
   - firstnight_has_discount
   - allbuyroom_message
   - promotion_count
   - manjian_message
   - min_price_sub_coupon_origin
   - confirm_message
   - hotel_flag
   - has_moremember_products
   - rank_debug
   - incidental_price_info
   - cp_info
   - statistics_info
   - loom
   - mul_distance_pois
   - recall_info
   - hours_room_min_price_cansale
   - min_price_cost
   - min_price_sub_coupon_cost
   - exclusive_bhotels
   - exclusive_discount
   - min_price_inventories
   - min_price_sub_coupon_inventories
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mhotel_id', None, None, ), # 1
    (2, TType.BOOL, 'has_drr', None, None, ), # 2
    (3, TType.STRUCT, 'longcui_info', (LongcuiMessage, LongcuiMessage.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'weifang_info', (TejiaMessage, TejiaMessage.thrift_spec), None, ), # 4
    (5, TType.I32, 'inventory_type', None, None, ), # 5
    (6, TType.I32, 'min_price', None, None, ), # 6
    None, # 7
    (8, TType.I64, 'min_price_rpid', None, None, ), # 8
    (9, TType.I64, 'min_price_roomtypeid', None, None, ), # 9
    (10, TType.STRUCT, 'need_guarantee', (DanbaoMessage, DanbaoMessage.thrift_spec), None, ), # 10
    (11, TType.I32, 'product_count', None, None, ), # 11
    (12, TType.I32, 'promotion_type_count', None, None, ), # 12
    (13, TType.LIST, 'room_types', (TType.STRUCT,(MRoomTypes, MRoomTypes.thrift_spec)), None, ), # 13
    (14, TType.LIST, 'shotel_helpfultips', (TType.STRUCT,(SHotelHelpfulTips, SHotelHelpfulTips.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'shotel_booking_rules', (TType.STRUCT,(SHotelBookingRule, SHotelBookingRule.thrift_spec)), None, ), # 15
    (16, TType.STRUCT, 'hotel_static_info', (StaticDetail, StaticDetail.thrift_spec), None, ), # 16
    (17, TType.I32, 'distance', None, None, ), # 17
    (18, TType.I32, 'hotel_service_status', None, None, ), # 18
    (19, TType.BOOL, 'tuan_gou', None, None, ), # 19
    (20, TType.LIST, 'shotel_invoice_info', (TType.STRUCT,(SHotelInvoiceInfo, SHotelInvoiceInfo.thrift_spec)), None, ), # 20
    (21, TType.STRUCT, 'mobileonly_message', (MobileOnlyMessage, MobileOnlyMessage.thrift_spec), None, ), # 21
    (22, TType.BOOL, 'has_yufu', None, None, ), # 22
    (23, TType.I32, 'product_count_reason', None, None, ), # 23
    (24, TType.STRUCT, 'coupon_message', (CouponMessage, CouponMessage.thrift_spec), None, ), # 24
    (25, TType.I32, 'product_can_be_showed', None, None, ), # 25
    (26, TType.STRUCT, 'distance_poi', (DistancePoi, DistancePoi.thrift_spec), None, ), # 26
    (27, TType.BOOL, 'has_timerush_product', None, None, ), # 27
    (28, TType.I32, 'min_price_pro_relation_price', None, None, ), # 28
    (29, TType.I32, 'min_price_mroomtypeid', None, None, ), # 29
    (30, TType.STRUCT, 'hongbao_message', (HongBaoMessage, HongBaoMessage.thrift_spec), None, ), # 30
    (31, TType.BOOL, 'is_hotel_inventory_full', None, None, ), # 31
    (32, TType.I32, 'mroom_count', None, None, ), # 32
    (33, TType.STRUCT, 'zhoubian_message', (ZhoubianProduct, ZhoubianProduct.thrift_spec), None, ), # 33
    (34, TType.BOOL, 'has_buy5send1_promotion', None, None, ), # 34
    (35, TType.BOOL, 'has_halfdiscount_promotion', None, None, ), # 35
    (36, TType.I32, 'min_price_sub_coupon', None, None, ), # 36
    (37, TType.I64, 'min_price_sub_coupon_rpid', None, None, ), # 37
    (38, TType.I64, 'min_price_sub_coupon_roomtypeid', None, None, ), # 38
    (39, TType.I32, 'min_price_sub_coupon_mroomtypeid', None, None, ), # 39
    (40, TType.BOOL, 'firstnight_has_discount', None, None, ), # 40
    (41, TType.STRUCT, 'allbuyroom_message', (AllBuyRoomMessage, AllBuyRoomMessage.thrift_spec), None, ), # 41
    (42, TType.LIST, 'promotion_count', (TType.STRUCT,(PromotionCount, PromotionCount.thrift_spec)), None, ), # 42
    (43, TType.STRUCT, 'manjian_message', (ManJianMessage, ManJianMessage.thrift_spec), None, ), # 43
    (44, TType.I32, 'min_price_sub_coupon_origin', None, None, ), # 44
    (45, TType.STRUCT, 'confirm_message', (ConfirmMessage, ConfirmMessage.thrift_spec), None, ), # 45
    (46, TType.LIST, 'hotel_flag', (TType.STRUCT,(HotelFlag, HotelFlag.thrift_spec)), None, ), # 46
    (47, TType.BOOL, 'has_moremember_products', None, None, ), # 47
    (48, TType.STRUCT, 'rank_debug', (RankDebug, RankDebug.thrift_spec), None, ), # 48
    (49, TType.STRUCT, 'incidental_price_info', (IncidentalPriceInfo, IncidentalPriceInfo.thrift_spec), None, ), # 49
    (50, TType.LIST, 'cp_info', (TType.STRUCT,(CustomizedProductInfo, CustomizedProductInfo.thrift_spec)), None, ), # 50
    (51, TType.LIST, 'statistics_info', (TType.STRUCT,(StatisticsInfo, StatisticsInfo.thrift_spec)), None, ), # 51
    (52, TType.STRING, 'loom', None, None, ), # 52
    (53, TType.LIST, 'mul_distance_pois', (TType.STRUCT,(DistancePoi, DistancePoi.thrift_spec)), None, ), # 53
    (54, TType.STRUCT, 'recall_info', (RecallInfo, RecallInfo.thrift_spec), None, ), # 54
    (55, TType.LIST, 'hours_room_min_price_cansale', (TType.STRUCT,(MinPriceInfo, MinPriceInfo.thrift_spec)), None, ), # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.I32, 'min_price_cost', None, None, ), # 100
    (101, TType.I32, 'min_price_sub_coupon_cost', None, None, ), # 101
    # (102, TType.LIST, 'exclusive_bhotels', (TType.STRUCT,(HotelDetail, HotelDetail.thrift_spec)), None, ), # 102
    (103, TType.I32, 'exclusive_discount', None, None, ), # 103
    (104, TType.LIST, 'min_price_inventories', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 104
    (105, TType.LIST, 'min_price_sub_coupon_inventories', (TType.STRUCT,(Inventory, Inventory.thrift_spec)), None, ), # 105
  )

  def __init__(self, mhotel_id=None, has_drr=None, longcui_info=None, weifang_info=None, inventory_type=None, min_price=None, min_price_rpid=None, min_price_roomtypeid=None, need_guarantee=None, product_count=None, promotion_type_count=None, room_types=None, shotel_helpfultips=None, shotel_booking_rules=None, hotel_static_info=None, distance=None, hotel_service_status=None, tuan_gou=None, shotel_invoice_info=None, mobileonly_message=None, has_yufu=None, product_count_reason=None, coupon_message=None, product_can_be_showed=None, distance_poi=None, has_timerush_product=None, min_price_pro_relation_price=None, min_price_mroomtypeid=None, hongbao_message=None, is_hotel_inventory_full=None, mroom_count=None, zhoubian_message=None, has_buy5send1_promotion=None, has_halfdiscount_promotion=None, min_price_sub_coupon=None, min_price_sub_coupon_rpid=None, min_price_sub_coupon_roomtypeid=None, min_price_sub_coupon_mroomtypeid=None, firstnight_has_discount=None, allbuyroom_message=None, promotion_count=None, manjian_message=None, min_price_sub_coupon_origin=None, confirm_message=None, hotel_flag=None, has_moremember_products=None, rank_debug=None, incidental_price_info=None, cp_info=None, statistics_info=None, loom=None, mul_distance_pois=None, recall_info=None, hours_room_min_price_cansale=None, min_price_cost=None, min_price_sub_coupon_cost=None, exclusive_bhotels=None, exclusive_discount=None, min_price_inventories=None, min_price_sub_coupon_inventories=None,):
    self.mhotel_id = mhotel_id
    self.has_drr = has_drr
    self.longcui_info = longcui_info
    self.weifang_info = weifang_info
    self.inventory_type = inventory_type
    self.min_price = min_price
    self.min_price_rpid = min_price_rpid
    self.min_price_roomtypeid = min_price_roomtypeid
    self.need_guarantee = need_guarantee
    self.product_count = product_count
    self.promotion_type_count = promotion_type_count
    self.room_types = room_types
    self.shotel_helpfultips = shotel_helpfultips
    self.shotel_booking_rules = shotel_booking_rules
    self.hotel_static_info = hotel_static_info
    self.distance = distance
    self.hotel_service_status = hotel_service_status
    self.tuan_gou = tuan_gou
    self.shotel_invoice_info = shotel_invoice_info
    self.mobileonly_message = mobileonly_message
    self.has_yufu = has_yufu
    self.product_count_reason = product_count_reason
    self.coupon_message = coupon_message
    self.product_can_be_showed = product_can_be_showed
    self.distance_poi = distance_poi
    self.has_timerush_product = has_timerush_product
    self.min_price_pro_relation_price = min_price_pro_relation_price
    self.min_price_mroomtypeid = min_price_mroomtypeid
    self.hongbao_message = hongbao_message
    self.is_hotel_inventory_full = is_hotel_inventory_full
    self.mroom_count = mroom_count
    self.zhoubian_message = zhoubian_message
    self.has_buy5send1_promotion = has_buy5send1_promotion
    self.has_halfdiscount_promotion = has_halfdiscount_promotion
    self.min_price_sub_coupon = min_price_sub_coupon
    self.min_price_sub_coupon_rpid = min_price_sub_coupon_rpid
    self.min_price_sub_coupon_roomtypeid = min_price_sub_coupon_roomtypeid
    self.min_price_sub_coupon_mroomtypeid = min_price_sub_coupon_mroomtypeid
    self.firstnight_has_discount = firstnight_has_discount
    self.allbuyroom_message = allbuyroom_message
    self.promotion_count = promotion_count
    self.manjian_message = manjian_message
    self.min_price_sub_coupon_origin = min_price_sub_coupon_origin
    self.confirm_message = confirm_message
    self.hotel_flag = hotel_flag
    self.has_moremember_products = has_moremember_products
    self.rank_debug = rank_debug
    self.incidental_price_info = incidental_price_info
    self.cp_info = cp_info
    self.statistics_info = statistics_info
    self.loom = loom
    self.mul_distance_pois = mul_distance_pois
    self.recall_info = recall_info
    self.hours_room_min_price_cansale = hours_room_min_price_cansale
    self.min_price_cost = min_price_cost
    self.min_price_sub_coupon_cost = min_price_sub_coupon_cost
    self.exclusive_bhotels = exclusive_bhotels
    self.exclusive_discount = exclusive_discount
    self.min_price_inventories = min_price_inventories
    self.min_price_sub_coupon_inventories = min_price_sub_coupon_inventories

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mhotel_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_drr = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.longcui_info = LongcuiMessage()
          self.longcui_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.weifang_info = TejiaMessage()
          self.weifang_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.inventory_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.min_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.min_price_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.min_price_roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.need_guarantee = DanbaoMessage()
          self.need_guarantee.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.product_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.promotion_type_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.room_types = []
          (_etype950, _size947) = iprot.readListBegin()
          for _i951 in xrange(_size947):
            _elem952 = MRoomTypes()
            _elem952.read(iprot)
            self.room_types.append(_elem952)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.shotel_helpfultips = []
          (_etype956, _size953) = iprot.readListBegin()
          for _i957 in xrange(_size953):
            _elem958 = SHotelHelpfulTips()
            _elem958.read(iprot)
            self.shotel_helpfultips.append(_elem958)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.shotel_booking_rules = []
          (_etype962, _size959) = iprot.readListBegin()
          for _i963 in xrange(_size959):
            _elem964 = SHotelBookingRule()
            _elem964.read(iprot)
            self.shotel_booking_rules.append(_elem964)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.hotel_static_info = StaticDetail()
          self.hotel_static_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.hotel_service_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.tuan_gou = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.shotel_invoice_info = []
          (_etype968, _size965) = iprot.readListBegin()
          for _i969 in xrange(_size965):
            _elem970 = SHotelInvoiceInfo()
            _elem970.read(iprot)
            self.shotel_invoice_info.append(_elem970)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.mobileonly_message = MobileOnlyMessage()
          self.mobileonly_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.has_yufu = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.product_count_reason = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRUCT:
          self.coupon_message = CouponMessage()
          self.coupon_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.product_can_be_showed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.distance_poi = DistancePoi()
          self.distance_poi.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.has_timerush_product = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.min_price_pro_relation_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.min_price_mroomtypeid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.hongbao_message = HongBaoMessage()
          self.hongbao_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.is_hotel_inventory_full = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.mroom_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRUCT:
          self.zhoubian_message = ZhoubianProduct()
          self.zhoubian_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.BOOL:
          self.has_buy5send1_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.BOOL:
          self.has_halfdiscount_promotion = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.min_price_sub_coupon = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I64:
          self.min_price_sub_coupon_rpid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I64:
          self.min_price_sub_coupon_roomtypeid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.min_price_sub_coupon_mroomtypeid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.firstnight_has_discount = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRUCT:
          self.allbuyroom_message = AllBuyRoomMessage()
          self.allbuyroom_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.LIST:
          self.promotion_count = []
          (_etype974, _size971) = iprot.readListBegin()
          for _i975 in xrange(_size971):
            _elem976 = PromotionCount()
            _elem976.read(iprot)
            self.promotion_count.append(_elem976)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRUCT:
          self.manjian_message = ManJianMessage()
          self.manjian_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.min_price_sub_coupon_origin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRUCT:
          self.confirm_message = ConfirmMessage()
          self.confirm_message.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.LIST:
          self.hotel_flag = []
          (_etype980, _size977) = iprot.readListBegin()
          for _i981 in xrange(_size977):
            _elem982 = HotelFlag()
            _elem982.read(iprot)
            self.hotel_flag.append(_elem982)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.BOOL:
          self.has_moremember_products = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.STRUCT:
          self.rank_debug = RankDebug()
          self.rank_debug.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.STRUCT:
          self.incidental_price_info = IncidentalPriceInfo()
          self.incidental_price_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.LIST:
          self.cp_info = []
          (_etype986, _size983) = iprot.readListBegin()
          for _i987 in xrange(_size983):
            _elem988 = CustomizedProductInfo()
            _elem988.read(iprot)
            self.cp_info.append(_elem988)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.LIST:
          self.statistics_info = []
          (_etype992, _size989) = iprot.readListBegin()
          for _i993 in xrange(_size989):
            _elem994 = StatisticsInfo()
            _elem994.read(iprot)
            self.statistics_info.append(_elem994)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.STRING:
          self.loom = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.LIST:
          self.mul_distance_pois = []
          (_etype998, _size995) = iprot.readListBegin()
          for _i999 in xrange(_size995):
            _elem1000 = DistancePoi()
            _elem1000.read(iprot)
            self.mul_distance_pois.append(_elem1000)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRUCT:
          self.recall_info = RecallInfo()
          self.recall_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.LIST:
          self.hours_room_min_price_cansale = []
          (_etype1004, _size1001) = iprot.readListBegin()
          for _i1005 in xrange(_size1001):
            _elem1006 = MinPriceInfo()
            _elem1006.read(iprot)
            self.hours_room_min_price_cansale.append(_elem1006)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.I32:
          self.min_price_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.I32:
          self.min_price_sub_coupon_cost = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 102:
        if ftype == TType.LIST:
          self.exclusive_bhotels = []
          (_etype1010, _size1007) = iprot.readListBegin()
          for _i1011 in xrange(_size1007):
            _elem1012 = HotelDetail()
            _elem1012.read(iprot)
            self.exclusive_bhotels.append(_elem1012)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 103:
        if ftype == TType.I32:
          self.exclusive_discount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 104:
        if ftype == TType.LIST:
          self.min_price_inventories = []
          (_etype1016, _size1013) = iprot.readListBegin()
          for _i1017 in xrange(_size1013):
            _elem1018 = Inventory()
            _elem1018.read(iprot)
            self.min_price_inventories.append(_elem1018)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.LIST:
          self.min_price_sub_coupon_inventories = []
          (_etype1022, _size1019) = iprot.readListBegin()
          for _i1023 in xrange(_size1019):
            _elem1024 = Inventory()
            _elem1024.read(iprot)
            self.min_price_sub_coupon_inventories.append(_elem1024)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotelDetail')
    if self.mhotel_id is not None:
      oprot.writeFieldBegin('mhotel_id', TType.I64, 1)
      oprot.writeI64(self.mhotel_id)
      oprot.writeFieldEnd()
    if self.has_drr is not None:
      oprot.writeFieldBegin('has_drr', TType.BOOL, 2)
      oprot.writeBool(self.has_drr)
      oprot.writeFieldEnd()
    if self.longcui_info is not None:
      oprot.writeFieldBegin('longcui_info', TType.STRUCT, 3)
      self.longcui_info.write(oprot)
      oprot.writeFieldEnd()
    if self.weifang_info is not None:
      oprot.writeFieldBegin('weifang_info', TType.STRUCT, 4)
      self.weifang_info.write(oprot)
      oprot.writeFieldEnd()
    if self.inventory_type is not None:
      oprot.writeFieldBegin('inventory_type', TType.I32, 5)
      oprot.writeI32(self.inventory_type)
      oprot.writeFieldEnd()
    if self.min_price is not None:
      oprot.writeFieldBegin('min_price', TType.I32, 6)
      oprot.writeI32(self.min_price)
      oprot.writeFieldEnd()
    if self.min_price_rpid is not None:
      oprot.writeFieldBegin('min_price_rpid', TType.I64, 8)
      oprot.writeI64(self.min_price_rpid)
      oprot.writeFieldEnd()
    if self.min_price_roomtypeid is not None:
      oprot.writeFieldBegin('min_price_roomtypeid', TType.I64, 9)
      oprot.writeI64(self.min_price_roomtypeid)
      oprot.writeFieldEnd()
    if self.need_guarantee is not None:
      oprot.writeFieldBegin('need_guarantee', TType.STRUCT, 10)
      self.need_guarantee.write(oprot)
      oprot.writeFieldEnd()
    if self.product_count is not None:
      oprot.writeFieldBegin('product_count', TType.I32, 11)
      oprot.writeI32(self.product_count)
      oprot.writeFieldEnd()
    if self.promotion_type_count is not None:
      oprot.writeFieldBegin('promotion_type_count', TType.I32, 12)
      oprot.writeI32(self.promotion_type_count)
      oprot.writeFieldEnd()
    if self.room_types is not None:
      oprot.writeFieldBegin('room_types', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.room_types))
      for iter1025 in self.room_types:
        iter1025.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_helpfultips is not None:
      oprot.writeFieldBegin('shotel_helpfultips', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_helpfultips))
      for iter1026 in self.shotel_helpfultips:
        iter1026.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shotel_booking_rules is not None:
      oprot.writeFieldBegin('shotel_booking_rules', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_booking_rules))
      for iter1027 in self.shotel_booking_rules:
        iter1027.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hotel_static_info is not None:
      oprot.writeFieldBegin('hotel_static_info', TType.STRUCT, 16)
      self.hotel_static_info.write(oprot)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.I32, 17)
      oprot.writeI32(self.distance)
      oprot.writeFieldEnd()
    if self.hotel_service_status is not None:
      oprot.writeFieldBegin('hotel_service_status', TType.I32, 18)
      oprot.writeI32(self.hotel_service_status)
      oprot.writeFieldEnd()
    if self.tuan_gou is not None:
      oprot.writeFieldBegin('tuan_gou', TType.BOOL, 19)
      oprot.writeBool(self.tuan_gou)
      oprot.writeFieldEnd()
    if self.shotel_invoice_info is not None:
      oprot.writeFieldBegin('shotel_invoice_info', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.shotel_invoice_info))
      for iter1028 in self.shotel_invoice_info:
        iter1028.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mobileonly_message is not None:
      oprot.writeFieldBegin('mobileonly_message', TType.STRUCT, 21)
      self.mobileonly_message.write(oprot)
      oprot.writeFieldEnd()
    if self.has_yufu is not None:
      oprot.writeFieldBegin('has_yufu', TType.BOOL, 22)
      oprot.writeBool(self.has_yufu)
      oprot.writeFieldEnd()
    if self.product_count_reason is not None:
      oprot.writeFieldBegin('product_count_reason', TType.I32, 23)
      oprot.writeI32(self.product_count_reason)
      oprot.writeFieldEnd()
    if self.coupon_message is not None:
      oprot.writeFieldBegin('coupon_message', TType.STRUCT, 24)
      self.coupon_message.write(oprot)
      oprot.writeFieldEnd()
    if self.product_can_be_showed is not None:
      oprot.writeFieldBegin('product_can_be_showed', TType.I32, 25)
      oprot.writeI32(self.product_can_be_showed)
      oprot.writeFieldEnd()
    if self.distance_poi is not None:
      oprot.writeFieldBegin('distance_poi', TType.STRUCT, 26)
      self.distance_poi.write(oprot)
      oprot.writeFieldEnd()
    if self.has_timerush_product is not None:
      oprot.writeFieldBegin('has_timerush_product', TType.BOOL, 27)
      oprot.writeBool(self.has_timerush_product)
      oprot.writeFieldEnd()
    if self.min_price_pro_relation_price is not None:
      oprot.writeFieldBegin('min_price_pro_relation_price', TType.I32, 28)
      oprot.writeI32(self.min_price_pro_relation_price)
      oprot.writeFieldEnd()
    if self.min_price_mroomtypeid is not None:
      oprot.writeFieldBegin('min_price_mroomtypeid', TType.I32, 29)
      oprot.writeI32(self.min_price_mroomtypeid)
      oprot.writeFieldEnd()
    if self.hongbao_message is not None:
      oprot.writeFieldBegin('hongbao_message', TType.STRUCT, 30)
      self.hongbao_message.write(oprot)
      oprot.writeFieldEnd()
    if self.is_hotel_inventory_full is not None:
      oprot.writeFieldBegin('is_hotel_inventory_full', TType.BOOL, 31)
      oprot.writeBool(self.is_hotel_inventory_full)
      oprot.writeFieldEnd()
    if self.mroom_count is not None:
      oprot.writeFieldBegin('mroom_count', TType.I32, 32)
      oprot.writeI32(self.mroom_count)
      oprot.writeFieldEnd()
    if self.zhoubian_message is not None:
      oprot.writeFieldBegin('zhoubian_message', TType.STRUCT, 33)
      self.zhoubian_message.write(oprot)
      oprot.writeFieldEnd()
    if self.has_buy5send1_promotion is not None:
      oprot.writeFieldBegin('has_buy5send1_promotion', TType.BOOL, 34)
      oprot.writeBool(self.has_buy5send1_promotion)
      oprot.writeFieldEnd()
    if self.has_halfdiscount_promotion is not None:
      oprot.writeFieldBegin('has_halfdiscount_promotion', TType.BOOL, 35)
      oprot.writeBool(self.has_halfdiscount_promotion)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon is not None:
      oprot.writeFieldBegin('min_price_sub_coupon', TType.I32, 36)
      oprot.writeI32(self.min_price_sub_coupon)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_rpid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_rpid', TType.I64, 37)
      oprot.writeI64(self.min_price_sub_coupon_rpid)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_roomtypeid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_roomtypeid', TType.I64, 38)
      oprot.writeI64(self.min_price_sub_coupon_roomtypeid)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_mroomtypeid is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_mroomtypeid', TType.I32, 39)
      oprot.writeI32(self.min_price_sub_coupon_mroomtypeid)
      oprot.writeFieldEnd()
    if self.firstnight_has_discount is not None:
      oprot.writeFieldBegin('firstnight_has_discount', TType.BOOL, 40)
      oprot.writeBool(self.firstnight_has_discount)
      oprot.writeFieldEnd()
    if self.allbuyroom_message is not None:
      oprot.writeFieldBegin('allbuyroom_message', TType.STRUCT, 41)
      self.allbuyroom_message.write(oprot)
      oprot.writeFieldEnd()
    if self.promotion_count is not None:
      oprot.writeFieldBegin('promotion_count', TType.LIST, 42)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion_count))
      for iter1029 in self.promotion_count:
        iter1029.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.manjian_message is not None:
      oprot.writeFieldBegin('manjian_message', TType.STRUCT, 43)
      self.manjian_message.write(oprot)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_origin is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_origin', TType.I32, 44)
      oprot.writeI32(self.min_price_sub_coupon_origin)
      oprot.writeFieldEnd()
    if self.confirm_message is not None:
      oprot.writeFieldBegin('confirm_message', TType.STRUCT, 45)
      self.confirm_message.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_flag is not None:
      oprot.writeFieldBegin('hotel_flag', TType.LIST, 46)
      oprot.writeListBegin(TType.STRUCT, len(self.hotel_flag))
      for iter1030 in self.hotel_flag:
        iter1030.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.has_moremember_products is not None:
      oprot.writeFieldBegin('has_moremember_products', TType.BOOL, 47)
      oprot.writeBool(self.has_moremember_products)
      oprot.writeFieldEnd()
    if self.rank_debug is not None:
      oprot.writeFieldBegin('rank_debug', TType.STRUCT, 48)
      self.rank_debug.write(oprot)
      oprot.writeFieldEnd()
    if self.incidental_price_info is not None:
      oprot.writeFieldBegin('incidental_price_info', TType.STRUCT, 49)
      self.incidental_price_info.write(oprot)
      oprot.writeFieldEnd()
    if self.cp_info is not None:
      oprot.writeFieldBegin('cp_info', TType.LIST, 50)
      oprot.writeListBegin(TType.STRUCT, len(self.cp_info))
      for iter1031 in self.cp_info:
        iter1031.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.statistics_info is not None:
      oprot.writeFieldBegin('statistics_info', TType.LIST, 51)
      oprot.writeListBegin(TType.STRUCT, len(self.statistics_info))
      for iter1032 in self.statistics_info:
        iter1032.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.loom is not None:
      oprot.writeFieldBegin('loom', TType.STRING, 52)
      oprot.writeString(self.loom)
      oprot.writeFieldEnd()
    if self.mul_distance_pois is not None:
      oprot.writeFieldBegin('mul_distance_pois', TType.LIST, 53)
      oprot.writeListBegin(TType.STRUCT, len(self.mul_distance_pois))
      for iter1033 in self.mul_distance_pois:
        iter1033.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recall_info is not None:
      oprot.writeFieldBegin('recall_info', TType.STRUCT, 54)
      self.recall_info.write(oprot)
      oprot.writeFieldEnd()
    if self.hours_room_min_price_cansale is not None:
      oprot.writeFieldBegin('hours_room_min_price_cansale', TType.LIST, 55)
      oprot.writeListBegin(TType.STRUCT, len(self.hours_room_min_price_cansale))
      for iter1034 in self.hours_room_min_price_cansale:
        iter1034.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.min_price_cost is not None:
      oprot.writeFieldBegin('min_price_cost', TType.I32, 100)
      oprot.writeI32(self.min_price_cost)
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_cost is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_cost', TType.I32, 101)
      oprot.writeI32(self.min_price_sub_coupon_cost)
      oprot.writeFieldEnd()
    if self.exclusive_bhotels is not None:
      oprot.writeFieldBegin('exclusive_bhotels', TType.LIST, 102)
      oprot.writeListBegin(TType.STRUCT, len(self.exclusive_bhotels))
      for iter1035 in self.exclusive_bhotels:
        iter1035.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exclusive_discount is not None:
      oprot.writeFieldBegin('exclusive_discount', TType.I32, 103)
      oprot.writeI32(self.exclusive_discount)
      oprot.writeFieldEnd()
    if self.min_price_inventories is not None:
      oprot.writeFieldBegin('min_price_inventories', TType.LIST, 104)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_inventories))
      for iter1036 in self.min_price_inventories:
        iter1036.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.min_price_sub_coupon_inventories is not None:
      oprot.writeFieldBegin('min_price_sub_coupon_inventories', TType.LIST, 105)
      oprot.writeListBegin(TType.STRUCT, len(self.min_price_sub_coupon_inventories))
      for iter1037 in self.min_price_sub_coupon_inventories:
        iter1037.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mhotel_id)
    value = (value * 31) ^ hash(self.has_drr)
    value = (value * 31) ^ hash(self.longcui_info)
    value = (value * 31) ^ hash(self.weifang_info)
    value = (value * 31) ^ hash(self.inventory_type)
    value = (value * 31) ^ hash(self.min_price)
    value = (value * 31) ^ hash(self.min_price_rpid)
    value = (value * 31) ^ hash(self.min_price_roomtypeid)
    value = (value * 31) ^ hash(self.need_guarantee)
    value = (value * 31) ^ hash(self.product_count)
    value = (value * 31) ^ hash(self.promotion_type_count)
    value = (value * 31) ^ hash(self.room_types)
    value = (value * 31) ^ hash(self.shotel_helpfultips)
    value = (value * 31) ^ hash(self.shotel_booking_rules)
    value = (value * 31) ^ hash(self.hotel_static_info)
    value = (value * 31) ^ hash(self.distance)
    value = (value * 31) ^ hash(self.hotel_service_status)
    value = (value * 31) ^ hash(self.tuan_gou)
    value = (value * 31) ^ hash(self.shotel_invoice_info)
    value = (value * 31) ^ hash(self.mobileonly_message)
    value = (value * 31) ^ hash(self.has_yufu)
    value = (value * 31) ^ hash(self.product_count_reason)
    value = (value * 31) ^ hash(self.coupon_message)
    value = (value * 31) ^ hash(self.product_can_be_showed)
    value = (value * 31) ^ hash(self.distance_poi)
    value = (value * 31) ^ hash(self.has_timerush_product)
    value = (value * 31) ^ hash(self.min_price_pro_relation_price)
    value = (value * 31) ^ hash(self.min_price_mroomtypeid)
    value = (value * 31) ^ hash(self.hongbao_message)
    value = (value * 31) ^ hash(self.is_hotel_inventory_full)
    value = (value * 31) ^ hash(self.mroom_count)
    value = (value * 31) ^ hash(self.zhoubian_message)
    value = (value * 31) ^ hash(self.has_buy5send1_promotion)
    value = (value * 31) ^ hash(self.has_halfdiscount_promotion)
    value = (value * 31) ^ hash(self.min_price_sub_coupon)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_rpid)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_roomtypeid)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_mroomtypeid)
    value = (value * 31) ^ hash(self.firstnight_has_discount)
    value = (value * 31) ^ hash(self.allbuyroom_message)
    value = (value * 31) ^ hash(self.promotion_count)
    value = (value * 31) ^ hash(self.manjian_message)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_origin)
    value = (value * 31) ^ hash(self.confirm_message)
    value = (value * 31) ^ hash(self.hotel_flag)
    value = (value * 31) ^ hash(self.has_moremember_products)
    value = (value * 31) ^ hash(self.rank_debug)
    value = (value * 31) ^ hash(self.incidental_price_info)
    value = (value * 31) ^ hash(self.cp_info)
    value = (value * 31) ^ hash(self.statistics_info)
    value = (value * 31) ^ hash(self.loom)
    value = (value * 31) ^ hash(self.mul_distance_pois)
    value = (value * 31) ^ hash(self.recall_info)
    value = (value * 31) ^ hash(self.hours_room_min_price_cansale)
    value = (value * 31) ^ hash(self.min_price_cost)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_cost)
    value = (value * 31) ^ hash(self.exclusive_bhotels)
    value = (value * 31) ^ hash(self.exclusive_discount)
    value = (value * 31) ^ hash(self.min_price_inventories)
    value = (value * 31) ^ hash(self.min_price_sub_coupon_inventories)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TalentRecommend:
  """
  Attributes:
   - theme_id
   - theme_name
   - theme_name_en
   - hoteldetail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'theme_id', None, None, ), # 1
    (2, TType.STRING, 'theme_name', None, None, ), # 2
    (3, TType.STRING, 'theme_name_en', None, None, ), # 3
    (4, TType.LIST, 'hoteldetail', (TType.STRUCT,(HotelDetail, HotelDetail.thrift_spec)), None, ), # 4
  )

  def __init__(self, theme_id=None, theme_name=None, theme_name_en=None, hoteldetail=None,):
    self.theme_id = theme_id
    self.theme_name = theme_name
    self.theme_name_en = theme_name_en
    self.hoteldetail = hoteldetail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.theme_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.theme_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.theme_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.hoteldetail = []
          (_etype1041, _size1038) = iprot.readListBegin()
          for _i1042 in xrange(_size1038):
            _elem1043 = HotelDetail()
            _elem1043.read(iprot)
            self.hoteldetail.append(_elem1043)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TalentRecommend')
    if self.theme_id is not None:
      oprot.writeFieldBegin('theme_id', TType.I32, 1)
      oprot.writeI32(self.theme_id)
      oprot.writeFieldEnd()
    if self.theme_name is not None:
      oprot.writeFieldBegin('theme_name', TType.STRING, 2)
      oprot.writeString(self.theme_name)
      oprot.writeFieldEnd()
    if self.theme_name_en is not None:
      oprot.writeFieldBegin('theme_name_en', TType.STRING, 3)
      oprot.writeString(self.theme_name_en)
      oprot.writeFieldEnd()
    if self.hoteldetail is not None:
      oprot.writeFieldBegin('hoteldetail', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.hoteldetail))
      for iter1044 in self.hoteldetail:
        iter1044.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.theme_id)
    value = (value * 31) ^ hash(self.theme_name)
    value = (value * 31) ^ hash(self.theme_name_en)
    value = (value * 31) ^ hash(self.hoteldetail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Recommend:
  """
  Attributes:
   - type
   - talent_rec
   - rec_hotel_details
   - rec_all_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'talent_rec', (TType.STRUCT,(TalentRecommend, TalentRecommend.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'rec_hotel_details', (TType.STRUCT,(HotelDetail, HotelDetail.thrift_spec)), None, ), # 3
    (4, TType.I32, 'rec_all_num', None, None, ), # 4
  )

  def __init__(self, type=None, talent_rec=None, rec_hotel_details=None, rec_all_num=None,):
    self.type = type
    self.talent_rec = talent_rec
    self.rec_hotel_details = rec_hotel_details
    self.rec_all_num = rec_all_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.talent_rec = []
          (_etype1048, _size1045) = iprot.readListBegin()
          for _i1049 in xrange(_size1045):
            _elem1050 = TalentRecommend()
            _elem1050.read(iprot)
            self.talent_rec.append(_elem1050)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.rec_hotel_details = []
          (_etype1054, _size1051) = iprot.readListBegin()
          for _i1055 in xrange(_size1051):
            _elem1056 = HotelDetail()
            _elem1056.read(iprot)
            self.rec_hotel_details.append(_elem1056)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rec_all_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Recommend')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.talent_rec is not None:
      oprot.writeFieldBegin('talent_rec', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.talent_rec))
      for iter1057 in self.talent_rec:
        iter1057.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rec_hotel_details is not None:
      oprot.writeFieldBegin('rec_hotel_details', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.rec_hotel_details))
      for iter1058 in self.rec_hotel_details:
        iter1058.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rec_all_num is not None:
      oprot.writeFieldBegin('rec_all_num', TType.I32, 4)
      oprot.writeI32(self.rec_all_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.talent_rec)
    value = (value * 31) ^ hash(self.rec_hotel_details)
    value = (value * 31) ^ hash(self.rec_all_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatisticsItem:
  """
  Attributes:
   - id
   - old_id
   - num
   - all_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'old_id', None, None, ), # 2
    (3, TType.I32, 'num', None, None, ), # 3
    (4, TType.I32, 'all_num', None, None, ), # 4
  )

  def __init__(self, id=None, old_id=None, num=None, all_num=None,):
    self.id = id
    self.old_id = old_id
    self.num = num
    self.all_num = all_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.old_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.all_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatisticsItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I32, 2)
      oprot.writeI32(self.old_id)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 3)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.all_num is not None:
      oprot.writeFieldBegin('all_num', TType.I32, 4)
      oprot.writeI32(self.all_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.all_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Statistics:
  """
  Attributes:
   - brand
   - star
   - facility
   - sheme
   - static_count
   - booking_rate
   - promotions
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'brand', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'star', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'facility', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'sheme', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'static_count', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 5
    (6, TType.DOUBLE, 'booking_rate', None, None, ), # 6
    (7, TType.LIST, 'promotions', (TType.STRUCT,(StatisticsItem, StatisticsItem.thrift_spec)), None, ), # 7
  )

  def __init__(self, brand=None, star=None, facility=None, sheme=None, static_count=None, booking_rate=None, promotions=None,):
    self.brand = brand
    self.star = star
    self.facility = facility
    self.sheme = sheme
    self.static_count = static_count
    self.booking_rate = booking_rate
    self.promotions = promotions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.brand = []
          (_etype1062, _size1059) = iprot.readListBegin()
          for _i1063 in xrange(_size1059):
            _elem1064 = StatisticsItem()
            _elem1064.read(iprot)
            self.brand.append(_elem1064)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.star = []
          (_etype1068, _size1065) = iprot.readListBegin()
          for _i1069 in xrange(_size1065):
            _elem1070 = StatisticsItem()
            _elem1070.read(iprot)
            self.star.append(_elem1070)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.facility = []
          (_etype1074, _size1071) = iprot.readListBegin()
          for _i1075 in xrange(_size1071):
            _elem1076 = StatisticsItem()
            _elem1076.read(iprot)
            self.facility.append(_elem1076)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.sheme = []
          (_etype1080, _size1077) = iprot.readListBegin()
          for _i1081 in xrange(_size1077):
            _elem1082 = StatisticsItem()
            _elem1082.read(iprot)
            self.sheme.append(_elem1082)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.static_count = []
          (_etype1086, _size1083) = iprot.readListBegin()
          for _i1087 in xrange(_size1083):
            _elem1088 = StatisticsItem()
            _elem1088.read(iprot)
            self.static_count.append(_elem1088)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.booking_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.promotions = []
          (_etype1092, _size1089) = iprot.readListBegin()
          for _i1093 in xrange(_size1089):
            _elem1094 = StatisticsItem()
            _elem1094.read(iprot)
            self.promotions.append(_elem1094)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Statistics')
    if self.brand is not None:
      oprot.writeFieldBegin('brand', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.brand))
      for iter1095 in self.brand:
        iter1095.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.star is not None:
      oprot.writeFieldBegin('star', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.star))
      for iter1096 in self.star:
        iter1096.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.facility is not None:
      oprot.writeFieldBegin('facility', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.facility))
      for iter1097 in self.facility:
        iter1097.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sheme is not None:
      oprot.writeFieldBegin('sheme', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.sheme))
      for iter1098 in self.sheme:
        iter1098.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.static_count is not None:
      oprot.writeFieldBegin('static_count', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.static_count))
      for iter1099 in self.static_count:
        iter1099.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.booking_rate is not None:
      oprot.writeFieldBegin('booking_rate', TType.DOUBLE, 6)
      oprot.writeDouble(self.booking_rate)
      oprot.writeFieldEnd()
    if self.promotions is not None:
      oprot.writeFieldBegin('promotions', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.promotions))
      for iter1100 in self.promotions:
        iter1100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.brand)
    value = (value * 31) ^ hash(self.star)
    value = (value * 31) ^ hash(self.facility)
    value = (value * 31) ^ hash(self.sheme)
    value = (value * 31) ^ hash(self.static_count)
    value = (value * 31) ^ hash(self.booking_rate)
    value = (value * 31) ^ hash(self.promotions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Term:
  """
  Attributes:
   - term_word
   - weight
   - omit_flag
   - phrase_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'term_word', None, None, ), # 1
    (2, TType.DOUBLE, 'weight', None, None, ), # 2
    (3, TType.BOOL, 'omit_flag', None, None, ), # 3
    (4, TType.BOOL, 'phrase_flag', None, None, ), # 4
  )

  def __init__(self, term_word=None, weight=None, omit_flag=None, phrase_flag=None,):
    self.term_word = term_word
    self.weight = weight
    self.omit_flag = omit_flag
    self.phrase_flag = phrase_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.term_word = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.omit_flag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.phrase_flag = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Term')
    if self.term_word is not None:
      oprot.writeFieldBegin('term_word', TType.STRING, 1)
      oprot.writeString(self.term_word)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    if self.omit_flag is not None:
      oprot.writeFieldBegin('omit_flag', TType.BOOL, 3)
      oprot.writeBool(self.omit_flag)
      oprot.writeFieldEnd()
    if self.phrase_flag is not None:
      oprot.writeFieldBegin('phrase_flag', TType.BOOL, 4)
      oprot.writeBool(self.phrase_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.term_word is None:
      raise TProtocol.TProtocolException(message='Required field term_word is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.term_word)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.omit_flag)
    value = (value * 31) ^ hash(self.phrase_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubASPoi:
  """
  Attributes:
   - id
   - name
   - location
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 3
    (4, TType.I32, 'weight', None, None, ), # 4
  )

  def __init__(self, id=None, name=None, location=None, weight=None,):
    self.id = id
    self.name = name
    self.location = location
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubASPoi')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 3)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 4)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.weight)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ParseItem:
  """
  Attributes:
   - type
   - id
   - old_id
   - name
   - terms
   - center_point
   - sub_pois
   - region_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'id', None, None, ), # 2
    (3, TType.I64, 'old_id', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.LIST, 'terms', (TType.STRUCT,(Term, Term.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'center_point', (Location, Location.thrift_spec), None, ), # 6
    (7, TType.LIST, 'sub_pois', (TType.STRUCT,(SubASPoi, SubASPoi.thrift_spec)), None, ), # 7
    (8, TType.I32, 'region_type', None, None, ), # 8
  )

  def __init__(self, type=None, id=None, old_id=None, name=None, terms=None, center_point=None, sub_pois=None, region_type=None,):
    self.type = type
    self.id = id
    self.old_id = old_id
    self.name = name
    self.terms = terms
    self.center_point = center_point
    self.sub_pois = sub_pois
    self.region_type = region_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.old_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.terms = []
          (_etype1104, _size1101) = iprot.readListBegin()
          for _i1105 in xrange(_size1101):
            _elem1106 = Term()
            _elem1106.read(iprot)
            self.terms.append(_elem1106)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.center_point = Location()
          self.center_point.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.sub_pois = []
          (_etype1110, _size1107) = iprot.readListBegin()
          for _i1111 in xrange(_size1107):
            _elem1112 = SubASPoi()
            _elem1112.read(iprot)
            self.sub_pois.append(_elem1112)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.region_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParseItem')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 2)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I64, 3)
      oprot.writeI64(self.old_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.terms is not None:
      oprot.writeFieldBegin('terms', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.terms))
      for iter1113 in self.terms:
        iter1113.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.center_point is not None:
      oprot.writeFieldBegin('center_point', TType.STRUCT, 6)
      self.center_point.write(oprot)
      oprot.writeFieldEnd()
    if self.sub_pois is not None:
      oprot.writeFieldBegin('sub_pois', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.sub_pois))
      for iter1114 in self.sub_pois:
        iter1114.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.region_type is not None:
      oprot.writeFieldBegin('region_type', TType.I32, 8)
      oprot.writeI32(self.region_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.terms)
    value = (value * 31) ^ hash(self.center_point)
    value = (value * 31) ^ hash(self.sub_pois)
    value = (value * 31) ^ hash(self.region_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryParseResult:
  """
  Attributes:
   - parse_item
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'parse_item', (TType.STRUCT,(ParseItem, ParseItem.thrift_spec)), None, ), # 1
  )

  def __init__(self, parse_item=None,):
    self.parse_item = parse_item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.parse_item = []
          (_etype1118, _size1115) = iprot.readListBegin()
          for _i1119 in xrange(_size1115):
            _elem1120 = ParseItem()
            _elem1120.read(iprot)
            self.parse_item.append(_elem1120)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryParseResult')
    if self.parse_item is not None:
      oprot.writeFieldBegin('parse_item', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.parse_item))
      for iter1121 in self.parse_item:
        iter1121.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.parse_item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterRegionResult:
  """
  Attributes:
   - region_id
   - region_type
   - v4_region_id
   - region_name
   - region_name_en
   - language
   - hotel_num
   - weight
   - show_name
   - sub_v4_region_id
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'region_id', None, None, ), # 1
    (2, TType.I32, 'region_type', None, None, ), # 2
    (3, TType.I32, 'v4_region_id', None, None, ), # 3
    (4, TType.STRING, 'region_name', None, None, ), # 4
    (5, TType.STRING, 'region_name_en', None, None, ), # 5
    (6, TType.I32, 'language', None, None, ), # 6
    (7, TType.I32, 'hotel_num', None, None, ), # 7
    (8, TType.I32, 'weight', None, None, ), # 8
    (9, TType.STRING, 'show_name', None, None, ), # 9
    (10, TType.I32, 'sub_v4_region_id', None, None, ), # 10
    (11, TType.STRING, 'type_name', None, None, ), # 11
    (12, TType.STRING, 'type_name_en', None, None, ), # 12
  )

  def __init__(self, region_id=None, region_type=None, v4_region_id=None, region_name=None, region_name_en=None, language=None, hotel_num=None, weight=None, show_name=None, sub_v4_region_id=None, type_name=None, type_name_en=None,):
    self.region_id = region_id
    self.region_type = region_type
    self.v4_region_id = v4_region_id
    self.region_name = region_name
    self.region_name_en = region_name_en
    self.language = language
    self.hotel_num = hotel_num
    self.weight = weight
    self.show_name = show_name
    self.sub_v4_region_id = sub_v4_region_id
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.region_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.v4_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.region_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.region_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.sub_v4_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterRegionResult')
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.I32, 1)
      oprot.writeI32(self.region_id)
      oprot.writeFieldEnd()
    if self.region_type is not None:
      oprot.writeFieldBegin('region_type', TType.I32, 2)
      oprot.writeI32(self.region_type)
      oprot.writeFieldEnd()
    if self.v4_region_id is not None:
      oprot.writeFieldBegin('v4_region_id', TType.I32, 3)
      oprot.writeI32(self.v4_region_id)
      oprot.writeFieldEnd()
    if self.region_name is not None:
      oprot.writeFieldBegin('region_name', TType.STRING, 4)
      oprot.writeString(self.region_name)
      oprot.writeFieldEnd()
    if self.region_name_en is not None:
      oprot.writeFieldBegin('region_name_en', TType.STRING, 5)
      oprot.writeString(self.region_name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 6)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 7)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 8)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 9)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.sub_v4_region_id is not None:
      oprot.writeFieldBegin('sub_v4_region_id', TType.I32, 10)
      oprot.writeI32(self.sub_v4_region_id)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 11)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 12)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.region_id)
    value = (value * 31) ^ hash(self.region_type)
    value = (value * 31) ^ hash(self.v4_region_id)
    value = (value * 31) ^ hash(self.region_name)
    value = (value * 31) ^ hash(self.region_name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.sub_v4_region_id)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterPoiResult:
  """
  Attributes:
   - poi_type
   - poi_name
   - poi_name_en
   - language
   - hotel_num
   - geo_info
   - weight
   - show_name
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'poi_type', None, None, ), # 1
    (2, TType.STRING, 'poi_name', None, None, ), # 2
    (3, TType.STRING, 'poi_name_en', None, None, ), # 3
    (4, TType.I32, 'language', None, None, ), # 4
    (5, TType.I32, 'hotel_num', None, None, ), # 5
    (6, TType.STRUCT, 'geo_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 6
    (7, TType.I32, 'weight', None, None, ), # 7
    (8, TType.STRING, 'show_name', None, None, ), # 8
    (9, TType.STRING, 'type_name', None, None, ), # 9
    (10, TType.STRING, 'type_name_en', None, None, ), # 10
  )

  def __init__(self, poi_type=None, poi_name=None, poi_name_en=None, language=None, hotel_num=None, geo_info=None, weight=None, show_name=None, type_name=None, type_name_en=None,):
    self.poi_type = poi_type
    self.poi_name = poi_name
    self.poi_name_en = poi_name_en
    self.language = language
    self.hotel_num = hotel_num
    self.geo_info = geo_info
    self.weight = weight
    self.show_name = show_name
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.poi_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.poi_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.poi_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.geo_info = GeoInfo()
          self.geo_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterPoiResult')
    if self.poi_type is not None:
      oprot.writeFieldBegin('poi_type', TType.I32, 1)
      oprot.writeI32(self.poi_type)
      oprot.writeFieldEnd()
    if self.poi_name is not None:
      oprot.writeFieldBegin('poi_name', TType.STRING, 2)
      oprot.writeString(self.poi_name)
      oprot.writeFieldEnd()
    if self.poi_name_en is not None:
      oprot.writeFieldBegin('poi_name_en', TType.STRING, 3)
      oprot.writeString(self.poi_name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 4)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 5)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.geo_info is not None:
      oprot.writeFieldBegin('geo_info', TType.STRUCT, 6)
      self.geo_info.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 7)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 8)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 9)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 10)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.poi_type)
    value = (value * 31) ^ hash(self.poi_name)
    value = (value * 31) ^ hash(self.poi_name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.geo_info)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BigPoiResult:
  """
  Attributes:
   - poi_name
   - poi_name_en
   - language
   - hotel_num
   - subpoi
   - type
   - weight
   - show_name
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'poi_name', None, None, ), # 1
    (2, TType.STRING, 'poi_name_en', None, None, ), # 2
    (3, TType.I32, 'language', None, None, ), # 3
    (4, TType.I32, 'hotel_num', None, None, ), # 4
    (5, TType.LIST, 'subpoi', (TType.STRUCT,(FilterPoiResult, FilterPoiResult.thrift_spec)), None, ), # 5
    (6, TType.I32, 'type', None, None, ), # 6
    (7, TType.I32, 'weight', None, None, ), # 7
    (8, TType.STRING, 'show_name', None, None, ), # 8
    (9, TType.STRING, 'type_name', None, None, ), # 9
    (10, TType.STRING, 'type_name_en', None, None, ), # 10
  )

  def __init__(self, poi_name=None, poi_name_en=None, language=None, hotel_num=None, subpoi=None, type=None, weight=None, show_name=None, type_name=None, type_name_en=None,):
    self.poi_name = poi_name
    self.poi_name_en = poi_name_en
    self.language = language
    self.hotel_num = hotel_num
    self.subpoi = subpoi
    self.type = type
    self.weight = weight
    self.show_name = show_name
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.poi_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.poi_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.subpoi = []
          (_etype1125, _size1122) = iprot.readListBegin()
          for _i1126 in xrange(_size1122):
            _elem1127 = FilterPoiResult()
            _elem1127.read(iprot)
            self.subpoi.append(_elem1127)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BigPoiResult')
    if self.poi_name is not None:
      oprot.writeFieldBegin('poi_name', TType.STRING, 1)
      oprot.writeString(self.poi_name)
      oprot.writeFieldEnd()
    if self.poi_name_en is not None:
      oprot.writeFieldBegin('poi_name_en', TType.STRING, 2)
      oprot.writeString(self.poi_name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 3)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 4)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.subpoi is not None:
      oprot.writeFieldBegin('subpoi', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.subpoi))
      for iter1128 in self.subpoi:
        iter1128.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 6)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 7)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 8)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 9)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 10)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.poi_name)
    value = (value * 31) ^ hash(self.poi_name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.subpoi)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceResult:
  """
  Attributes:
   - price_pair
   - hotel_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'price_pair', (PricePair, PricePair.thrift_spec), None, ), # 1
    (2, TType.I32, 'hotel_num', None, None, ), # 2
  )

  def __init__(self, price_pair=None, hotel_num=None,):
    self.price_pair = price_pair
    self.hotel_num = hotel_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.price_pair = PricePair()
          self.price_pair.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceResult')
    if self.price_pair is not None:
      oprot.writeFieldBegin('price_pair', TType.STRUCT, 1)
      self.price_pair.write(oprot)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 2)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price_pair)
    value = (value * 31) ^ hash(self.hotel_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilResult:
  """
  Attributes:
   - id
   - old_id
   - hotel_num
   - type
   - name
   - name_en
   - language
   - weight_web
   - weight_app
   - show_name
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'old_id', None, None, ), # 2
    (3, TType.I32, 'hotel_num', None, None, ), # 3
    (4, TType.I32, 'type', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'name_en', None, None, ), # 6
    (7, TType.I32, 'language', None, None, ), # 7
    (8, TType.I32, 'weight_web', None, None, ), # 8
    (9, TType.I32, 'weight_app', None, None, ), # 9
    (10, TType.STRING, 'show_name', None, None, ), # 10
    (11, TType.STRING, 'type_name', None, None, ), # 11
    (12, TType.STRING, 'type_name_en', None, None, ), # 12
  )

  def __init__(self, id=None, old_id=None, hotel_num=None, type=None, name=None, name_en=None, language=None, weight_web=None, weight_app=None, show_name=None, type_name=None, type_name_en=None,):
    self.id = id
    self.old_id = old_id
    self.hotel_num = hotel_num
    self.type = type
    self.name = name
    self.name_en = name_en
    self.language = language
    self.weight_web = weight_web
    self.weight_app = weight_app
    self.show_name = show_name
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.old_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight_web = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.weight_app = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilResult')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I32, 2)
      oprot.writeI32(self.old_id)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 3)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 6)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 7)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.weight_web is not None:
      oprot.writeFieldBegin('weight_web', TType.I32, 8)
      oprot.writeI32(self.weight_web)
      oprot.writeFieldEnd()
    if self.weight_app is not None:
      oprot.writeFieldBegin('weight_app', TType.I32, 9)
      oprot.writeI32(self.weight_app)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 10)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 11)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 12)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.weight_web)
    value = (value * 31) ^ hash(self.weight_app)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayResult:
  """
  Attributes:
   - id
   - old_id
   - type
   - hotel_num
   - name
   - name_en
   - language
   - weight_web
   - weight_app
   - show_name
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'old_id', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I32, 'hotel_num', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'name_en', None, None, ), # 6
    (7, TType.I32, 'language', None, None, ), # 7
    (8, TType.I32, 'weight_web', None, None, ), # 8
    (9, TType.I32, 'weight_app', None, None, ), # 9
    (10, TType.STRING, 'show_name', None, None, ), # 10
    (11, TType.STRING, 'type_name', None, None, ), # 11
    (12, TType.STRING, 'type_name_en', None, None, ), # 12
  )

  def __init__(self, id=None, old_id=None, type=None, hotel_num=None, name=None, name_en=None, language=None, weight_web=None, weight_app=None, show_name=None, type_name=None, type_name_en=None,):
    self.id = id
    self.old_id = old_id
    self.type = type
    self.hotel_num = hotel_num
    self.name = name
    self.name_en = name_en
    self.language = language
    self.weight_web = weight_web
    self.weight_app = weight_app
    self.show_name = show_name
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.old_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight_web = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.weight_app = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayResult')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I32, 2)
      oprot.writeI32(self.old_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 4)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 6)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 7)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.weight_web is not None:
      oprot.writeFieldBegin('weight_web', TType.I32, 8)
      oprot.writeI32(self.weight_web)
      oprot.writeFieldEnd()
    if self.weight_app is not None:
      oprot.writeFieldBegin('weight_app', TType.I32, 9)
      oprot.writeI32(self.weight_app)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 10)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 11)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 12)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.weight_web)
    value = (value * 31) ^ hash(self.weight_app)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromotionResult:
  """
  Attributes:
   - id
   - old_id
   - type
   - hotel_num
   - name
   - name_en
   - language
   - weight_web
   - weight_app
   - show_name
   - type_name
   - type_name_en
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'old_id', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I32, 'hotel_num', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'name_en', None, None, ), # 6
    (7, TType.I32, 'language', None, None, ), # 7
    (8, TType.I32, 'weight_web', None, None, ), # 8
    (9, TType.I32, 'weight_app', None, None, ), # 9
    (10, TType.STRING, 'show_name', None, None, ), # 10
    (11, TType.STRING, 'type_name', None, None, ), # 11
    (12, TType.STRING, 'type_name_en', None, None, ), # 12
  )

  def __init__(self, id=None, old_id=None, type=None, hotel_num=None, name=None, name_en=None, language=None, weight_web=None, weight_app=None, show_name=None, type_name=None, type_name_en=None,):
    self.id = id
    self.old_id = old_id
    self.type = type
    self.hotel_num = hotel_num
    self.name = name
    self.name_en = name_en
    self.language = language
    self.weight_web = weight_web
    self.weight_app = weight_app
    self.show_name = show_name
    self.type_name = type_name
    self.type_name_en = type_name_en

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.old_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.language = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight_web = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.weight_app = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.show_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.type_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromotionResult')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.old_id is not None:
      oprot.writeFieldBegin('old_id', TType.I32, 2)
      oprot.writeI32(self.old_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 4)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 6)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.I32, 7)
      oprot.writeI32(self.language)
      oprot.writeFieldEnd()
    if self.weight_web is not None:
      oprot.writeFieldBegin('weight_web', TType.I32, 8)
      oprot.writeI32(self.weight_web)
      oprot.writeFieldEnd()
    if self.weight_app is not None:
      oprot.writeFieldBegin('weight_app', TType.I32, 9)
      oprot.writeI32(self.weight_app)
      oprot.writeFieldEnd()
    if self.show_name is not None:
      oprot.writeFieldBegin('show_name', TType.STRING, 10)
      oprot.writeString(self.show_name)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 11)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 12)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.old_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.weight_web)
    value = (value * 31) ^ hash(self.weight_app)
    value = (value * 31) ^ hash(self.show_name)
    value = (value * 31) ^ hash(self.type_name)
    value = (value * 31) ^ hash(self.type_name_en)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterItem:
  """
  Attributes:
   - id
   - id_v4
   - hotel_num
   - poi_info
   - weight
   - id_city_v4
   - region_info
   - name_ext_cn
   - name_ext_en
   - price_pair
   - weight_hot
   - type
   - unique_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'id_v4', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.I32, 'hotel_num', None, None, ), # 6
    (7, TType.STRUCT, 'poi_info', (GeoInfo, GeoInfo.thrift_spec), None, ), # 7
    (8, TType.I32, 'weight', None, None, ), # 8
    (9, TType.I32, 'id_city_v4', None, None, ), # 9
    (10, TType.LIST, 'region_info', (TType.STRUCT,(GeoInfo, GeoInfo.thrift_spec)), None, ), # 10
    (11, TType.STRING, 'name_ext_cn', None, None, ), # 11
    (12, TType.STRING, 'name_ext_en', None, None, ), # 12
    (13, TType.STRUCT, 'price_pair', (PricePair, PricePair.thrift_spec), None, ), # 13
    None, # 14
    (15, TType.I32, 'weight_hot', None, None, ), # 15
    (16, TType.I32, 'type', None, None, ), # 16
    (17, TType.I32, 'unique_id', None, None, ), # 17
  )

  def __init__(self, id=None, id_v4=None, hotel_num=None, poi_info=None, weight=None, id_city_v4=None, region_info=None, name_ext_cn=None, name_ext_en=None, price_pair=None, weight_hot=None, type=None, unique_id=None,):
    self.id = id
    self.id_v4 = id_v4
    self.hotel_num = hotel_num
    self.poi_info = poi_info
    self.weight = weight
    self.id_city_v4 = id_city_v4
    self.region_info = region_info
    self.name_ext_cn = name_ext_cn
    self.name_ext_en = name_ext_en
    self.price_pair = price_pair
    self.weight_hot = weight_hot
    self.type = type
    self.unique_id = unique_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id_v4 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.hotel_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.poi_info = GeoInfo()
          self.poi_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.id_city_v4 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.region_info = []
          (_etype1132, _size1129) = iprot.readListBegin()
          for _i1133 in xrange(_size1129):
            _elem1134 = GeoInfo()
            _elem1134.read(iprot)
            self.region_info.append(_elem1134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.name_ext_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.name_ext_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.price_pair = PricePair()
          self.price_pair.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.weight_hot = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.unique_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.id_v4 is not None:
      oprot.writeFieldBegin('id_v4', TType.I32, 2)
      oprot.writeI32(self.id_v4)
      oprot.writeFieldEnd()
    if self.hotel_num is not None:
      oprot.writeFieldBegin('hotel_num', TType.I32, 6)
      oprot.writeI32(self.hotel_num)
      oprot.writeFieldEnd()
    if self.poi_info is not None:
      oprot.writeFieldBegin('poi_info', TType.STRUCT, 7)
      self.poi_info.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 8)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.id_city_v4 is not None:
      oprot.writeFieldBegin('id_city_v4', TType.I32, 9)
      oprot.writeI32(self.id_city_v4)
      oprot.writeFieldEnd()
    if self.region_info is not None:
      oprot.writeFieldBegin('region_info', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.region_info))
      for iter1135 in self.region_info:
        iter1135.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name_ext_cn is not None:
      oprot.writeFieldBegin('name_ext_cn', TType.STRING, 11)
      oprot.writeString(self.name_ext_cn)
      oprot.writeFieldEnd()
    if self.name_ext_en is not None:
      oprot.writeFieldBegin('name_ext_en', TType.STRING, 12)
      oprot.writeString(self.name_ext_en)
      oprot.writeFieldEnd()
    if self.price_pair is not None:
      oprot.writeFieldBegin('price_pair', TType.STRUCT, 13)
      self.price_pair.write(oprot)
      oprot.writeFieldEnd()
    if self.weight_hot is not None:
      oprot.writeFieldBegin('weight_hot', TType.I32, 15)
      oprot.writeI32(self.weight_hot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 16)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.unique_id is not None:
      oprot.writeFieldBegin('unique_id', TType.I32, 17)
      oprot.writeI32(self.unique_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.id_v4)
    value = (value * 31) ^ hash(self.hotel_num)
    value = (value * 31) ^ hash(self.poi_info)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.id_city_v4)
    value = (value * 31) ^ hash(self.region_info)
    value = (value * 31) ^ hash(self.name_ext_cn)
    value = (value * 31) ^ hash(self.name_ext_en)
    value = (value * 31) ^ hash(self.price_pair)
    value = (value * 31) ^ hash(self.weight_hot)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.unique_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterMeta:
  """
  Attributes:
   - name_cn
   - name_en
   - type_name_cn
   - type_name_en
   - ext_str
   - icon_id
   - show_type
   - talent_rec_name_cn
   - talent_rec_name_en
   - purpose
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name_cn', None, None, ), # 1
    (2, TType.STRING, 'name_en', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'type_name_cn', None, None, ), # 4
    (5, TType.STRING, 'type_name_en', None, None, ), # 5
    (6, TType.STRING, 'ext_str', None, None, ), # 6
    (7, TType.I32, 'icon_id', None, None, ), # 7
    (8, TType.I32, 'show_type', None, None, ), # 8
    (9, TType.STRING, 'talent_rec_name_cn', None, None, ), # 9
    (10, TType.STRING, 'talent_rec_name_en', None, None, ), # 10
    (11, TType.I32, 'purpose', None, None, ), # 11
  )

  def __init__(self, name_cn=None, name_en=None, type_name_cn=None, type_name_en=None, ext_str=None, icon_id=None, show_type=None, talent_rec_name_cn=None, talent_rec_name_en=None, purpose=None,):
    self.name_cn = name_cn
    self.name_en = name_en
    self.type_name_cn = type_name_cn
    self.type_name_en = type_name_en
    self.ext_str = ext_str
    self.icon_id = icon_id
    self.show_type = show_type
    self.talent_rec_name_cn = talent_rec_name_cn
    self.talent_rec_name_en = talent_rec_name_en
    self.purpose = purpose

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.type_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.type_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ext_str = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.icon_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.show_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.talent_rec_name_cn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.talent_rec_name_en = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.purpose = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterMeta')
    if self.name_cn is not None:
      oprot.writeFieldBegin('name_cn', TType.STRING, 1)
      oprot.writeString(self.name_cn)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 2)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.type_name_cn is not None:
      oprot.writeFieldBegin('type_name_cn', TType.STRING, 4)
      oprot.writeString(self.type_name_cn)
      oprot.writeFieldEnd()
    if self.type_name_en is not None:
      oprot.writeFieldBegin('type_name_en', TType.STRING, 5)
      oprot.writeString(self.type_name_en)
      oprot.writeFieldEnd()
    if self.ext_str is not None:
      oprot.writeFieldBegin('ext_str', TType.STRING, 6)
      oprot.writeString(self.ext_str)
      oprot.writeFieldEnd()
    if self.icon_id is not None:
      oprot.writeFieldBegin('icon_id', TType.I32, 7)
      oprot.writeI32(self.icon_id)
      oprot.writeFieldEnd()
    if self.show_type is not None:
      oprot.writeFieldBegin('show_type', TType.I32, 8)
      oprot.writeI32(self.show_type)
      oprot.writeFieldEnd()
    if self.talent_rec_name_cn is not None:
      oprot.writeFieldBegin('talent_rec_name_cn', TType.STRING, 9)
      oprot.writeString(self.talent_rec_name_cn)
      oprot.writeFieldEnd()
    if self.talent_rec_name_en is not None:
      oprot.writeFieldBegin('talent_rec_name_en', TType.STRING, 10)
      oprot.writeString(self.talent_rec_name_en)
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.I32, 11)
      oprot.writeI32(self.purpose)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name_cn)
    value = (value * 31) ^ hash(self.name_en)
    value = (value * 31) ^ hash(self.type_name_cn)
    value = (value * 31) ^ hash(self.type_name_en)
    value = (value * 31) ^ hash(self.ext_str)
    value = (value * 31) ^ hash(self.icon_id)
    value = (value * 31) ^ hash(self.show_type)
    value = (value * 31) ^ hash(self.talent_rec_name_cn)
    value = (value * 31) ^ hash(self.talent_rec_name_en)
    value = (value * 31) ^ hash(self.purpose)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterInfo1:
  """
  Attributes:
   - filter_meta
   - filter_item
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter_meta', (FilterMeta, FilterMeta.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'filter_item', (FilterItem, FilterItem.thrift_spec), None, ), # 2
  )

  def __init__(self, filter_meta=None, filter_item=None,):
    self.filter_meta = filter_meta
    self.filter_item = filter_item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter_meta = FilterMeta()
          self.filter_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.filter_item = FilterItem()
          self.filter_item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterInfo1')
    if self.filter_meta is not None:
      oprot.writeFieldBegin('filter_meta', TType.STRUCT, 1)
      self.filter_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_item is not None:
      oprot.writeFieldBegin('filter_item', TType.STRUCT, 2)
      self.filter_item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_meta)
    value = (value * 31) ^ hash(self.filter_item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterInfo2:
  """
  Attributes:
   - filter_meta
   - filter_info1
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter_meta', (FilterMeta, FilterMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'filter_info1', (TType.STRUCT,(FilterInfo1, FilterInfo1.thrift_spec)), None, ), # 2
  )

  def __init__(self, filter_meta=None, filter_info1=None,):
    self.filter_meta = filter_meta
    self.filter_info1 = filter_info1

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter_meta = FilterMeta()
          self.filter_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.filter_info1 = []
          (_etype1139, _size1136) = iprot.readListBegin()
          for _i1140 in xrange(_size1136):
            _elem1141 = FilterInfo1()
            _elem1141.read(iprot)
            self.filter_info1.append(_elem1141)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterInfo2')
    if self.filter_meta is not None:
      oprot.writeFieldBegin('filter_meta', TType.STRUCT, 1)
      self.filter_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_info1 is not None:
      oprot.writeFieldBegin('filter_info1', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_info1))
      for iter1142 in self.filter_info1:
        iter1142.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_meta)
    value = (value * 31) ^ hash(self.filter_info1)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterInfo3:
  """
  Attributes:
   - filter_meta
   - filter_info2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter_meta', (FilterMeta, FilterMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'filter_info2', (TType.STRUCT,(FilterInfo2, FilterInfo2.thrift_spec)), None, ), # 2
  )

  def __init__(self, filter_meta=None, filter_info2=None,):
    self.filter_meta = filter_meta
    self.filter_info2 = filter_info2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter_meta = FilterMeta()
          self.filter_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.filter_info2 = []
          (_etype1146, _size1143) = iprot.readListBegin()
          for _i1147 in xrange(_size1143):
            _elem1148 = FilterInfo2()
            _elem1148.read(iprot)
            self.filter_info2.append(_elem1148)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterInfo3')
    if self.filter_meta is not None:
      oprot.writeFieldBegin('filter_meta', TType.STRUCT, 1)
      self.filter_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.filter_info2 is not None:
      oprot.writeFieldBegin('filter_info2', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_info2))
      for iter1149 in self.filter_info2:
        iter1149.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_meta)
    value = (value * 31) ^ hash(self.filter_info2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterInfo:
  """
  Attributes:
   - filter_meta
   - filter_item
   - type_id
   - depth
   - filter_item1
   - filter_item2
   - filter_item3
   - web_weight
   - app_weight
   - app_weight_hot
   - show_depth
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter_meta', (FilterMeta, FilterMeta.thrift_spec), None, ), # 1
    (2, TType.I32, 'type_id', None, None, ), # 2
    (3, TType.I32, 'depth', None, None, ), # 3
    (4, TType.LIST, 'filter_item1', (TType.STRUCT,(FilterInfo1, FilterInfo1.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'filter_item2', (TType.STRUCT,(FilterInfo2, FilterInfo2.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'filter_item3', (TType.STRUCT,(FilterInfo3, FilterInfo3.thrift_spec)), None, ), # 6
    (7, TType.I32, 'web_weight', None, None, ), # 7
    (8, TType.I32, 'app_weight', None, None, ), # 8
    (9, TType.I32, 'app_weight_hot', None, None, ), # 9
    (10, TType.I32, 'show_depth', None, None, ), # 10
    (11, TType.STRUCT, 'filter_item', (FilterItem, FilterItem.thrift_spec), None, ), # 11
  )

  def __init__(self, filter_meta=None, filter_item=None, type_id=None, depth=None, filter_item1=None, filter_item2=None, filter_item3=None, web_weight=None, app_weight=None, app_weight_hot=None, show_depth=None,):
    self.filter_meta = filter_meta
    self.filter_item = filter_item
    self.type_id = type_id
    self.depth = depth
    self.filter_item1 = filter_item1
    self.filter_item2 = filter_item2
    self.filter_item3 = filter_item3
    self.web_weight = web_weight
    self.app_weight = app_weight
    self.app_weight_hot = app_weight_hot
    self.show_depth = show_depth

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter_meta = FilterMeta()
          self.filter_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.filter_item = FilterItem()
          self.filter_item.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.depth = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.filter_item1 = []
          (_etype1153, _size1150) = iprot.readListBegin()
          for _i1154 in xrange(_size1150):
            _elem1155 = FilterInfo1()
            _elem1155.read(iprot)
            self.filter_item1.append(_elem1155)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.filter_item2 = []
          (_etype1159, _size1156) = iprot.readListBegin()
          for _i1160 in xrange(_size1156):
            _elem1161 = FilterInfo2()
            _elem1161.read(iprot)
            self.filter_item2.append(_elem1161)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.filter_item3 = []
          (_etype1165, _size1162) = iprot.readListBegin()
          for _i1166 in xrange(_size1162):
            _elem1167 = FilterInfo3()
            _elem1167.read(iprot)
            self.filter_item3.append(_elem1167)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.web_weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.app_weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.app_weight_hot = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.show_depth = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterInfo')
    if self.filter_meta is not None:
      oprot.writeFieldBegin('filter_meta', TType.STRUCT, 1)
      self.filter_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 2)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 3)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.filter_item1 is not None:
      oprot.writeFieldBegin('filter_item1', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_item1))
      for iter1168 in self.filter_item1:
        iter1168.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_item2 is not None:
      oprot.writeFieldBegin('filter_item2', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_item2))
      for iter1169 in self.filter_item2:
        iter1169.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_item3 is not None:
      oprot.writeFieldBegin('filter_item3', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_item3))
      for iter1170 in self.filter_item3:
        iter1170.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.web_weight is not None:
      oprot.writeFieldBegin('web_weight', TType.I32, 7)
      oprot.writeI32(self.web_weight)
      oprot.writeFieldEnd()
    if self.app_weight is not None:
      oprot.writeFieldBegin('app_weight', TType.I32, 8)
      oprot.writeI32(self.app_weight)
      oprot.writeFieldEnd()
    if self.app_weight_hot is not None:
      oprot.writeFieldBegin('app_weight_hot', TType.I32, 9)
      oprot.writeI32(self.app_weight_hot)
      oprot.writeFieldEnd()
    if self.show_depth is not None:
      oprot.writeFieldBegin('show_depth', TType.I32, 10)
      oprot.writeI32(self.show_depth)
      oprot.writeFieldEnd()
    if self.filter_item is not None:
      oprot.writeFieldBegin('filter_item', TType.STRUCT, 11)
      self.filter_item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_meta)
    value = (value * 31) ^ hash(self.filter_item)
    value = (value * 31) ^ hash(self.type_id)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.filter_item1)
    value = (value * 31) ^ hash(self.filter_item2)
    value = (value * 31) ^ hash(self.filter_item3)
    value = (value * 31) ^ hash(self.web_weight)
    value = (value * 31) ^ hash(self.app_weight)
    value = (value * 31) ^ hash(self.app_weight_hot)
    value = (value * 31) ^ hash(self.show_depth)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterResult:
  """
  Attributes:
   - city_id
   - region
   - poi
   - bigpoi
   - price
   - filter
   - pay
   - promotion
   - city_idv4
   - filter_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'city_id', None, None, ), # 1
    (2, TType.LIST, 'region', (TType.STRUCT,(FilterRegionResult, FilterRegionResult.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'poi', (TType.STRUCT,(FilterPoiResult, FilterPoiResult.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'bigpoi', (TType.STRUCT,(BigPoiResult, BigPoiResult.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'price', (TType.STRUCT,(PriceResult, PriceResult.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'filter', (TType.STRUCT,(FilResult, FilResult.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'pay', (TType.STRUCT,(PayResult, PayResult.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'promotion', (TType.STRUCT,(PromotionResult, PromotionResult.thrift_spec)), None, ), # 8
    (9, TType.I32, 'city_idv4', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.LIST, 'filter_info', (TType.STRUCT,(FilterInfo, FilterInfo.thrift_spec)), None, ), # 20
  )

  def __init__(self, city_id=None, region=None, poi=None, bigpoi=None, price=None, filter=None, pay=None, promotion=None, city_idv4=None, filter_info=None,):
    self.city_id = city_id
    self.region = region
    self.poi = poi
    self.bigpoi = bigpoi
    self.price = price
    self.filter = filter
    self.pay = pay
    self.promotion = promotion
    self.city_idv4 = city_idv4
    self.filter_info = filter_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.city_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.region = []
          (_etype1174, _size1171) = iprot.readListBegin()
          for _i1175 in xrange(_size1171):
            _elem1176 = FilterRegionResult()
            _elem1176.read(iprot)
            self.region.append(_elem1176)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.poi = []
          (_etype1180, _size1177) = iprot.readListBegin()
          for _i1181 in xrange(_size1177):
            _elem1182 = FilterPoiResult()
            _elem1182.read(iprot)
            self.poi.append(_elem1182)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.bigpoi = []
          (_etype1186, _size1183) = iprot.readListBegin()
          for _i1187 in xrange(_size1183):
            _elem1188 = BigPoiResult()
            _elem1188.read(iprot)
            self.bigpoi.append(_elem1188)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.price = []
          (_etype1192, _size1189) = iprot.readListBegin()
          for _i1193 in xrange(_size1189):
            _elem1194 = PriceResult()
            _elem1194.read(iprot)
            self.price.append(_elem1194)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.filter = []
          (_etype1198, _size1195) = iprot.readListBegin()
          for _i1199 in xrange(_size1195):
            _elem1200 = FilResult()
            _elem1200.read(iprot)
            self.filter.append(_elem1200)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.pay = []
          (_etype1204, _size1201) = iprot.readListBegin()
          for _i1205 in xrange(_size1201):
            _elem1206 = PayResult()
            _elem1206.read(iprot)
            self.pay.append(_elem1206)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.promotion = []
          (_etype1210, _size1207) = iprot.readListBegin()
          for _i1211 in xrange(_size1207):
            _elem1212 = PromotionResult()
            _elem1212.read(iprot)
            self.promotion.append(_elem1212)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.city_idv4 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.filter_info = []
          (_etype1216, _size1213) = iprot.readListBegin()
          for _i1217 in xrange(_size1213):
            _elem1218 = FilterInfo()
            _elem1218.read(iprot)
            self.filter_info.append(_elem1218)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterResult')
    if self.city_id is not None:
      oprot.writeFieldBegin('city_id', TType.I32, 1)
      oprot.writeI32(self.city_id)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.region))
      for iter1219 in self.region:
        iter1219.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.poi is not None:
      oprot.writeFieldBegin('poi', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.poi))
      for iter1220 in self.poi:
        iter1220.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bigpoi is not None:
      oprot.writeFieldBegin('bigpoi', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.bigpoi))
      for iter1221 in self.bigpoi:
        iter1221.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.price))
      for iter1222 in self.price:
        iter1222.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.filter))
      for iter1223 in self.filter:
        iter1223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pay is not None:
      oprot.writeFieldBegin('pay', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.pay))
      for iter1224 in self.pay:
        iter1224.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.promotion is not None:
      oprot.writeFieldBegin('promotion', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.promotion))
      for iter1225 in self.promotion:
        iter1225.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.city_idv4 is not None:
      oprot.writeFieldBegin('city_idv4', TType.I32, 9)
      oprot.writeI32(self.city_idv4)
      oprot.writeFieldEnd()
    if self.filter_info is not None:
      oprot.writeFieldBegin('filter_info', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_info))
      for iter1226 in self.filter_info:
        iter1226.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.city_id)
    value = (value * 31) ^ hash(self.region)
    value = (value * 31) ^ hash(self.poi)
    value = (value * 31) ^ hash(self.bigpoi)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.pay)
    value = (value * 31) ^ hash(self.promotion)
    value = (value * 31) ^ hash(self.city_idv4)
    value = (value * 31) ^ hash(self.filter_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FilterList:
  """
  Attributes:
   - type
   - filter
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'filter', (FilterResult, FilterResult.thrift_spec), None, ), # 2
  )

  def __init__(self, type=None, filter=None,):
    self.type = type
    self.filter = filter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.filter = FilterResult()
          self.filter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterList')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRUCT, 2)
      self.filter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.filter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserTrack:
  """
  Attributes:
   - session_flow_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'session_flow_id', None, None, ), # 1
  )

  def __init__(self, session_flow_id=None,):
    self.session_flow_id = session_flow_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.session_flow_id = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserTrack')
    if self.session_flow_id is not None:
      oprot.writeFieldBegin('session_flow_id', TType.STRING, 1)
      oprot.writeString(self.session_flow_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.session_flow_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PersonalInfo:
  """
  Attributes:
   - idfa
   - card_number
   - location
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'idfa', None, None, ), # 1
    (2, TType.STRING, 'card_number', None, None, ), # 2
    (3, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 3
  )

  def __init__(self, idfa=None, card_number=None, location=None,):
    self.idfa = idfa
    self.card_number = card_number
    self.location = location

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.idfa = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.card_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PersonalInfo')
    if self.idfa is not None:
      oprot.writeFieldBegin('idfa', TType.STRING, 1)
      oprot.writeString(self.idfa)
      oprot.writeFieldEnd()
    if self.card_number is not None:
      oprot.writeFieldBegin('card_number', TType.STRING, 2)
      oprot.writeString(self.card_number)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 3)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.idfa)
    value = (value * 31) ^ hash(self.card_number)
    value = (value * 31) ^ hash(self.location)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PersonalTraitResult:
  """
  Attributes:
   - filter_info
   - source
   - weight
   - city_id
   - method
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'filter_info', (TType.STRUCT,(FilterInfo, FilterInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'source', None, None, ), # 2
    (3, TType.I32, 'weight', None, None, ), # 3
    (4, TType.I32, 'city_id', None, None, ), # 4
    (5, TType.I32, 'method', None, None, ), # 5
  )

  def __init__(self, filter_info=None, source=None, weight=None, city_id=None, method=None,):
    self.filter_info = filter_info
    self.source = source
    self.weight = weight
    self.city_id = city_id
    self.method = method

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.filter_info = []
          (_etype1230, _size1227) = iprot.readListBegin()
          for _i1231 in xrange(_size1227):
            _elem1232 = FilterInfo()
            _elem1232.read(iprot)
            self.filter_info.append(_elem1232)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.source = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.city_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.method = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PersonalTraitResult')
    if self.filter_info is not None:
      oprot.writeFieldBegin('filter_info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.filter_info))
      for iter1233 in self.filter_info:
        iter1233.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 2)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 3)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.city_id is not None:
      oprot.writeFieldBegin('city_id', TType.I32, 4)
      oprot.writeI32(self.city_id)
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.I32, 5)
      oprot.writeI32(self.method)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filter_info)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.city_id)
    value = (value * 31) ^ hash(self.method)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
